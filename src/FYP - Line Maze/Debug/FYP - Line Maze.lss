
FYP - Line Maze.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00002c78  00002d2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c78  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000080  00800140  00800140  00002d6c  2**0
                  ALLOC
  3 .eeprom       00000014  00810000  00810000  00002d6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00006b94  00000000  00000000  00002d80  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00008e23  00000000  00000000  00009914  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000030  00000000  00000000  00012737  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000110  00000000  00000000  00012767  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002353  00000000  00000000  00012877  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000632  00000000  00000000  00014bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000ca1  00000000  00000000  000151fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000390  00000000  00000000  00015ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000a80  00000000  00000000  00016230  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000016ca  00000000  00000000  00016cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000198  00000000  00000000  0001837a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 44 00 	jmp	0x88	; 0x88 <__dtors_end>
       4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__vector_9>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <__vector_13>
      38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 1f       	adc	r16, r16
      70:	1f 1f       	adc	r17, r31
      72:	1f 1f       	adc	r17, r31
      74:	1f 1f       	adc	r17, r31

00000076 <_ZL5bloop>:
      76:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

00000080 <__ctors_start>:
      80:	53 06       	cpc	r5, r19
      82:	e9 0e       	add	r14, r25

00000084 <__ctors_end>:
      84:	58 06       	cpc	r5, r24
      86:	ea 0e       	add	r14, r26

00000088 <__dtors_end>:
      88:	11 24       	eor	r1, r1
      8a:	1f be       	out	0x3f, r1	; 63
      8c:	cf ef       	ldi	r28, 0xFF	; 255
      8e:	d8 e0       	ldi	r29, 0x08	; 8
      90:	de bf       	out	0x3e, r29	; 62
      92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
      94:	11 e0       	ldi	r17, 0x01	; 1
      96:	a0 e0       	ldi	r26, 0x00	; 0
      98:	b1 e0       	ldi	r27, 0x01	; 1
      9a:	e8 e7       	ldi	r30, 0x78	; 120
      9c:	fc e2       	ldi	r31, 0x2C	; 44
      9e:	02 c0       	rjmp	.+4      	; 0xa4 <__do_copy_data+0x10>
      a0:	05 90       	lpm	r0, Z+
      a2:	0d 92       	st	X+, r0
      a4:	a0 34       	cpi	r26, 0x40	; 64
      a6:	b1 07       	cpc	r27, r17
      a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0xc>

000000aa <__do_clear_bss>:
      aa:	21 e0       	ldi	r18, 0x01	; 1
      ac:	a0 e4       	ldi	r26, 0x40	; 64
      ae:	b1 e0       	ldi	r27, 0x01	; 1
      b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
      b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
      b4:	a0 3c       	cpi	r26, 0xC0	; 192
      b6:	b2 07       	cpc	r27, r18
      b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>

000000ba <__do_global_ctors>:
      ba:	10 e0       	ldi	r17, 0x00	; 0
      bc:	c4 e8       	ldi	r28, 0x84	; 132
      be:	d0 e0       	ldi	r29, 0x00	; 0
      c0:	04 c0       	rjmp	.+8      	; 0xca <__do_global_ctors+0x10>
      c2:	22 97       	sbiw	r28, 0x02	; 2
      c4:	fe 01       	movw	r30, r28
      c6:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__tablejump__>
      ca:	c0 38       	cpi	r28, 0x80	; 128
      cc:	d1 07       	cpc	r29, r17
      ce:	c9 f7       	brne	.-14     	; 0xc2 <__do_global_ctors+0x8>
      d0:	0e 94 06 06 	call	0xc0c	; 0xc0c <main>
      d4:	0c 94 2f 16 	jmp	0x2c5e	; 0x2c5e <__do_global_dtors>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <_ZN9NodeStack4pushEP4node9Direction>:
	
	StackNode* _getNodeByPosition(StackNode* n, position p);
	StackNode* _getNodeWithUnvisitedConnections(StackNode* n);
};

void NodeStack::push(node* n, Direction d) {
      dc:	ff 92       	push	r15
      de:	0f 93       	push	r16
      e0:	1f 93       	push	r17
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	ec 01       	movw	r28, r24
      e8:	8b 01       	movw	r16, r22
      ea:	f4 2e       	mov	r15, r20
#define UTILITY_H_

#include <stdlib.h>

void* operator new(size_t objsize) {
	return malloc(objsize);
      ec:	85 e0       	ldi	r24, 0x05	; 5
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <malloc>
      f4:	fc 01       	movw	r30, r24
	top = new StackNode(n, top, d);
      f6:	88 81       	ld	r24, Y
      f8:	99 81       	ldd	r25, Y+1	; 0x01
	struct StackNode {
		node* data;
		StackNode* next;
		Direction enteredFrom;

		StackNode(node* newData, StackNode* nextNode, Direction d) : data(newData), next(nextNode), enteredFrom(d) {}
      fa:	11 83       	std	Z+1, r17	; 0x01
      fc:	00 83       	st	Z, r16
      fe:	93 83       	std	Z+3, r25	; 0x03
     100:	82 83       	std	Z+2, r24	; 0x02
     102:	f4 82       	std	Z+4, r15	; 0x04
	StackNode* _getNodeByPosition(StackNode* n, position p);
	StackNode* _getNodeWithUnvisitedConnections(StackNode* n);
};

void NodeStack::push(node* n, Direction d) {
	top = new StackNode(n, top, d);
     104:	f9 83       	std	Y+1, r31	; 0x01
     106:	e8 83       	st	Y, r30
}
     108:	df 91       	pop	r29
     10a:	cf 91       	pop	r28
     10c:	1f 91       	pop	r17
     10e:	0f 91       	pop	r16
     110:	ff 90       	pop	r15
     112:	08 95       	ret

00000114 <_ZN9NodeStack3popEv>:

Direction NodeStack::pop() {
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
	}
	return NULL;
}

bool NodeStack::isEmpty() {
	if (top == 0) {
     118:	fc 01       	movw	r30, r24
     11a:	c0 81       	ld	r28, Z
     11c:	d1 81       	ldd	r29, Z+1	; 0x01
void NodeStack::push(node* n, Direction d) {
	top = new StackNode(n, top, d);
}

Direction NodeStack::pop() {
	if ( !isEmpty() ) {
     11e:	20 97       	sbiw	r28, 0x00	; 0
     120:	49 f0       	breq	.+18     	; 0x134 <_ZN9NodeStack3popEv+0x20>
		StackNode *topNode = top;
		top = top->next;
     122:	2a 81       	ldd	r18, Y+2	; 0x02
     124:	3b 81       	ldd	r19, Y+3	; 0x03
     126:	31 83       	std	Z+1, r19	; 0x01
     128:	20 83       	st	Z, r18
}

void operator delete(void* obj) {
	free(obj);
     12a:	ce 01       	movw	r24, r28
     12c:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <free>
		//node* data = topNode->data;
		delete topNode;
		Direction d = topNode->enteredFrom;
     130:	8c 81       	ldd	r24, Y+4	; 0x04
		return d;
     132:	01 c0       	rjmp	.+2      	; 0x136 <_ZN9NodeStack3popEv+0x22>
		//return data;
	}
	return NORTH;
     134:	82 e0       	ldi	r24, 0x02	; 2
}
     136:	df 91       	pop	r29
     138:	cf 91       	pop	r28
     13a:	08 95       	ret

0000013c <_ZN9NodeStackD1Ev>:
struct NodeStack {
public:
	NodeStack() : top(0) {
		
	}
	~NodeStack() {
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	ec 01       	movw	r28, r24
		while (!isEmpty()) {
     142:	88 81       	ld	r24, Y
     144:	99 81       	ldd	r25, Y+1	; 0x01
     146:	89 2b       	or	r24, r25
     148:	39 f0       	breq	.+14     	; 0x158 <_ZN9NodeStackD1Ev+0x1c>
			pop();
     14a:	ce 01       	movw	r24, r28
     14c:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN9NodeStack3popEv>
public:
	NodeStack() : top(0) {
		
	}
	~NodeStack() {
		while (!isEmpty()) {
     150:	88 81       	ld	r24, Y
     152:	99 81       	ldd	r25, Y+1	; 0x01
     154:	89 2b       	or	r24, r25
     156:	c9 f7       	brne	.-14     	; 0x14a <_ZN9NodeStackD1Ev+0xe>
			pop();
		}
		isEmpty();
	}
     158:	df 91       	pop	r29
     15a:	cf 91       	pop	r28
     15c:	08 95       	ret

0000015e <_ZN9NodeStack6getTopEv>:
	}
	return NULL;
}

bool NodeStack::isEmpty() {
	if (top == 0) {
     15e:	dc 01       	movw	r26, r24
     160:	ed 91       	ld	r30, X+
     162:	fc 91       	ld	r31, X
	}
	return NORTH;
}

node* NodeStack::getTop() {
	if ( !isEmpty() ) {
     164:	30 97       	sbiw	r30, 0x00	; 0
     166:	19 f0       	breq	.+6      	; 0x16e <_ZN9NodeStack6getTopEv+0x10>
		return top->data;
     168:	80 81       	ld	r24, Z
     16a:	91 81       	ldd	r25, Z+1	; 0x01
     16c:	08 95       	ret
	}
	return NULL;
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	90 e0       	ldi	r25, 0x00	; 0
}
     172:	08 95       	ret

00000174 <_Z22load_custom_charactersv>:
	currentPos.x = 0;
	currentPos.y = 0;
}

void load_custom_characters(){
	lcd_load_custom_character(levels+0,0); // no offset, e.g. one bar
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	88 e6       	ldi	r24, 0x68	; 104
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	0e 94 42 0b 	call	0x1684	; 0x1684 <lcd_load_custom_character>
	lcd_load_custom_character(levels+1,1); // two bars
     17e:	61 e0       	ldi	r22, 0x01	; 1
     180:	89 e6       	ldi	r24, 0x69	; 105
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	0e 94 42 0b 	call	0x1684	; 0x1684 <lcd_load_custom_character>
	lcd_load_custom_character(levels+2,2); // etc...
     188:	62 e0       	ldi	r22, 0x02	; 2
     18a:	8a e6       	ldi	r24, 0x6A	; 106
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	0e 94 42 0b 	call	0x1684	; 0x1684 <lcd_load_custom_character>
	lcd_load_custom_character(levels+3,3);
     192:	63 e0       	ldi	r22, 0x03	; 3
     194:	8b e6       	ldi	r24, 0x6B	; 107
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	0e 94 42 0b 	call	0x1684	; 0x1684 <lcd_load_custom_character>
	lcd_load_custom_character(levels+4,4);
     19c:	64 e0       	ldi	r22, 0x04	; 4
     19e:	8c e6       	ldi	r24, 0x6C	; 108
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 42 0b 	call	0x1684	; 0x1684 <lcd_load_custom_character>
	lcd_load_custom_character(levels+5,5);
     1a6:	65 e0       	ldi	r22, 0x05	; 5
     1a8:	8d e6       	ldi	r24, 0x6D	; 109
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 42 0b 	call	0x1684	; 0x1684 <lcd_load_custom_character>
	lcd_load_custom_character(levels+6,6);
     1b0:	66 e0       	ldi	r22, 0x06	; 6
     1b2:	8e e6       	ldi	r24, 0x6E	; 110
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	0e 94 42 0b 	call	0x1684	; 0x1684 <lcd_load_custom_character>
	clear();
     1ba:	0e 94 c2 0b 	call	0x1784	; 0x1784 <clear>
     1be:	08 95       	ret

000001c0 <_Z16display_readingsPKj>:
}

void display_readings(const unsigned int *calibrated_values){
     1c0:	ef 92       	push	r14
     1c2:	ff 92       	push	r15
     1c4:	0f 93       	push	r16
     1c6:	1f 93       	push	r17
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	cd b7       	in	r28, 0x3d	; 61
     1ce:	de b7       	in	r29, 0x3e	; 62
     1d0:	2a 97       	sbiw	r28, 0x0a	; 10
     1d2:	0f b6       	in	r0, 0x3f	; 63
     1d4:	f8 94       	cli
     1d6:	de bf       	out	0x3e, r29	; 62
     1d8:	0f be       	out	0x3f, r0	; 63
     1da:	cd bf       	out	0x3d, r28	; 61
     1dc:	8c 01       	movw	r16, r24
	unsigned char i;
	for(i=0;i<5;i++) {
     1de:	f1 2c       	mov	r15, r1
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     1e0:	0f 2e       	mov	r0, r31
     1e2:	fa e0       	ldi	r31, 0x0A	; 10
     1e4:	ef 2e       	mov	r14, r31
     1e6:	f0 2d       	mov	r31, r0
     1e8:	e1 e3       	ldi	r30, 0x31	; 49
     1ea:	f1 e0       	ldi	r31, 0x01	; 1
     1ec:	de 01       	movw	r26, r28
     1ee:	11 96       	adiw	r26, 0x01	; 1
     1f0:	8e 2d       	mov	r24, r14
     1f2:	01 90       	ld	r0, Z+
     1f4:	0d 92       	st	X+, r0
     1f6:	8a 95       	dec	r24
     1f8:	e1 f7       	brne	.-8      	; 0x1f2 <_Z16display_readingsPKj+0x32>
		char c = display_characters[calibrated_values[i]/101];
     1fa:	f8 01       	movw	r30, r16
     1fc:	21 91       	ld	r18, Z+
     1fe:	31 91       	ld	r19, Z+
     200:	8f 01       	movw	r16, r30
     202:	a7 e4       	ldi	r26, 0x47	; 71
     204:	b4 e1       	ldi	r27, 0x14	; 20
     206:	0e 94 9b 14 	call	0x2936	; 0x2936 <__umulhisi3>
     20a:	96 95       	lsr	r25
     20c:	87 95       	ror	r24
     20e:	96 95       	lsr	r25
     210:	87 95       	ror	r24
     212:	96 95       	lsr	r25
     214:	87 95       	ror	r24
     216:	e1 e0       	ldi	r30, 0x01	; 1
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	ec 0f       	add	r30, r28
     21c:	fd 1f       	adc	r31, r29
     21e:	e8 0f       	add	r30, r24
     220:	f9 1f       	adc	r31, r25
		print_character(c);
     222:	80 81       	ld	r24, Z
     224:	0e 94 45 0b 	call	0x168a	; 0x168a <print_character>
	clear();
}

void display_readings(const unsigned int *calibrated_values){
	unsigned char i;
	for(i=0;i<5;i++) {
     228:	f3 94       	inc	r15
     22a:	f5 e0       	ldi	r31, 0x05	; 5
     22c:	ff 12       	cpse	r15, r31
     22e:	dc cf       	rjmp	.-72     	; 0x1e8 <_Z16display_readingsPKj+0x28>
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
		char c = display_characters[calibrated_values[i]/101];
		print_character(c);
	}
}
     230:	2a 96       	adiw	r28, 0x0a	; 10
     232:	0f b6       	in	r0, 0x3f	; 63
     234:	f8 94       	cli
     236:	de bf       	out	0x3e, r29	; 62
     238:	0f be       	out	0x3f, r0	; 63
     23a:	cd bf       	out	0x3d, r28	; 61
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	1f 91       	pop	r17
     242:	0f 91       	pop	r16
     244:	ff 90       	pop	r15
     246:	ef 90       	pop	r14
     248:	08 95       	ret

0000024a <_Z15loadCalibrationv>:
		get_line_sensors_calibrated_maximum_on()[i]
		);
	}
}

void loadCalibration(){
     24a:	0f 93       	push	r16
     24c:	1f 93       	push	r17
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
	calibrate_line_sensors(IR_EMITTERS_ON); // need to do this to allocate the arrays
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <calibrate_line_sensors>
     258:	c0 e0       	ldi	r28, 0x00	; 0
     25a:	d0 e0       	ldi	r29, 0x00	; 0
	int i;
	for(i=0;i<5;i++){
		get_line_sensors_calibrated_minimum_on()[i] =
     25c:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <get_line_sensors_calibrated_minimum_on>
     260:	8c 01       	movw	r16, r24
     262:	0c 0f       	add	r16, r28
     264:	1d 1f       	adc	r17, r29
		eeprom_read_word(&calibrated_minimum_on[i]);
     266:	ce 01       	movw	r24, r28
     268:	80 50       	subi	r24, 0x00	; 0
     26a:	90 40       	sbci	r25, 0x00	; 0
     26c:	0e 94 19 16 	call	0x2c32	; 0x2c32 <__eerd_word_m328p>
     270:	f8 01       	movw	r30, r16
     272:	91 83       	std	Z+1, r25	; 0x01
     274:	80 83       	st	Z, r24

		get_line_sensors_calibrated_maximum_on()[i] =
     276:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <get_line_sensors_calibrated_maximum_on>
     27a:	8c 01       	movw	r16, r24
     27c:	0c 0f       	add	r16, r28
     27e:	1d 1f       	adc	r17, r29
		eeprom_read_word(&calibrated_maximum_on[i]);
     280:	ce 01       	movw	r24, r28
     282:	86 5f       	subi	r24, 0xF6	; 246
     284:	9f 4f       	sbci	r25, 0xFF	; 255
     286:	0e 94 19 16 	call	0x2c32	; 0x2c32 <__eerd_word_m328p>
     28a:	f8 01       	movw	r30, r16
     28c:	91 83       	std	Z+1, r25	; 0x01
     28e:	80 83       	st	Z, r24
     290:	22 96       	adiw	r28, 0x02	; 2
}

void loadCalibration(){
	calibrate_line_sensors(IR_EMITTERS_ON); // need to do this to allocate the arrays
	int i;
	for(i=0;i<5;i++){
     292:	ca 30       	cpi	r28, 0x0A	; 10
     294:	d1 05       	cpc	r29, r1
     296:	11 f7       	brne	.-60     	; 0x25c <_Z15loadCalibrationv+0x12>
		eeprom_read_word(&calibrated_minimum_on[i]);

		get_line_sensors_calibrated_maximum_on()[i] =
		eeprom_read_word(&calibrated_maximum_on[i]);
	}
}
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	1f 91       	pop	r17
     29e:	0f 91       	pop	r16
     2a0:	08 95       	ret

000002a2 <_Z10initialisev>:
#include "lineMaze.h"

void initialise(){
	pololu_3pi_init(2000);
     2a2:	80 ed       	ldi	r24, 0xD0	; 208
     2a4:	97 e0       	ldi	r25, 0x07	; 7
     2a6:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <pololu_3pi_init>
	load_custom_characters();
     2aa:	0e 94 ba 00 	call	0x174	; 0x174 <_Z22load_custom_charactersv>
	load_custom_characters();
     2ae:	0e 94 ba 00 	call	0x174	; 0x174 <_Z22load_custom_charactersv>
	loadCalibration();
     2b2:	0e 94 25 01 	call	0x24a	; 0x24a <_Z15loadCalibrationv>
	play_from_program_space(bloop);
     2b6:	86 e7       	ldi	r24, 0x76	; 118
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <play_from_program_space>
	
	foundFinish = false;
     2be:	10 92 b8 01 	sts	0x01B8, r1
	isLeft = false;
     2c2:	10 92 ba 01 	sts	0x01BA, r1
	isRight = false;
     2c6:	10 92 b9 01 	sts	0x01B9, r1
	isForward = false;
     2ca:	10 92 bb 01 	sts	0x01BB, r1
	
	currentDir.dir = NORTH;
     2ce:	82 e0       	ldi	r24, 0x02	; 2
     2d0:	80 93 b7 01 	sts	0x01B7, r24
	currentPos.x = 0;
     2d4:	10 92 b5 01 	sts	0x01B5, r1
	currentPos.y = 0;
     2d8:	10 92 b6 01 	sts	0x01B6, r1
     2dc:	08 95       	ret

000002de <_Z4stopv>:
	}
	stop();
}

void stop(){
	set_motors(0, 0);
     2de:	60 e0       	ldi	r22, 0x00	; 0
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <set_motors>
     2ea:	08 95       	ret

000002ec <_Z4turn4Turn>:
		get_line_sensors_calibrated_maximum_on()[i] =
		eeprom_read_word(&calibrated_maximum_on[i]);
	}
}

void turn(Turn t){
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
     2f4:	2a 97       	sbiw	r28, 0x0a	; 10
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	cd bf       	out	0x3d, r28	; 61
	unsigned int sensors[5];
	unsigned int turnCalibration = 600;
	
	switch(t){
     300:	81 30       	cpi	r24, 0x01	; 1
     302:	79 f1       	breq	.+94     	; 0x362 <_Z4turn4Turn+0x76>
     304:	20 f0       	brcs	.+8      	; 0x30e <_Z4turn4Turn+0x22>
     306:	82 30       	cpi	r24, 0x02	; 2
     308:	09 f4       	brne	.+2      	; 0x30c <_Z4turn4Turn+0x20>
     30a:	55 c0       	rjmp	.+170    	; 0x3b6 <_Z4turn4Turn+0xca>
     30c:	86 c0       	rjmp	.+268    	; 0x41a <_Z4turn4Turn+0x12e>
		case LEFT:
		set_motors(-40, 40);
     30e:	68 e2       	ldi	r22, 0x28	; 40
     310:	70 e0       	ldi	r23, 0x00	; 0
     312:	88 ed       	ldi	r24, 0xD8	; 216
     314:	9f ef       	ldi	r25, 0xFF	; 255
     316:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <set_motors>
		delay_ms(200);
     31a:	88 ec       	ldi	r24, 0xC8	; 200
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <delay_ms>
		read_line(sensors,IR_EMITTERS_ON);
     322:	61 e0       	ldi	r22, 0x01	; 1
     324:	ce 01       	movw	r24, r28
     326:	01 96       	adiw	r24, 0x01	; 1
     328:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <read_line>
		while (sensors[2] < turnCalibration){
     32c:	8d 81       	ldd	r24, Y+5	; 0x05
     32e:	9e 81       	ldd	r25, Y+6	; 0x06
     330:	88 35       	cpi	r24, 0x58	; 88
     332:	92 40       	sbci	r25, 0x02	; 2
     334:	50 f4       	brcc	.+20     	; 0x34a <_Z4turn4Turn+0x5e>
			read_line(sensors,IR_EMITTERS_ON);
     336:	61 e0       	ldi	r22, 0x01	; 1
     338:	ce 01       	movw	r24, r28
     33a:	01 96       	adiw	r24, 0x01	; 1
     33c:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <read_line>
	switch(t){
		case LEFT:
		set_motors(-40, 40);
		delay_ms(200);
		read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] < turnCalibration){
     340:	8d 81       	ldd	r24, Y+5	; 0x05
     342:	9e 81       	ldd	r25, Y+6	; 0x06
     344:	88 35       	cpi	r24, 0x58	; 88
     346:	92 40       	sbci	r25, 0x02	; 2
     348:	b0 f3       	brcs	.-20     	; 0x336 <_Z4turn4Turn+0x4a>
			faceInt = -1;
		}
		this->dir = static_cast<Direction>(faceInt + 1);
	}
	void previous() {
		int faceInt = dir;
     34a:	80 91 b7 01 	lds	r24, 0x01B7
     34e:	90 e0       	ldi	r25, 0x00	; 0
		if (faceInt <= 0) {
     350:	18 16       	cp	r1, r24
     352:	19 06       	cpc	r1, r25
     354:	14 f0       	brlt	.+4      	; 0x35a <_Z4turn4Turn+0x6e>
			faceInt = 4;
     356:	84 e0       	ldi	r24, 0x04	; 4
     358:	90 e0       	ldi	r25, 0x00	; 0
		}
		this->dir = static_cast<Direction>(faceInt - 1);
     35a:	81 50       	subi	r24, 0x01	; 1
     35c:	80 93 b7 01 	sts	0x01B7, r24
     360:	5c c0       	rjmp	.+184    	; 0x41a <_Z4turn4Turn+0x12e>
			read_line(sensors,IR_EMITTERS_ON);
		}
		currentDir.previous();
		break;
		case RIGHT:
		set_motors(40, -40);
     362:	68 ed       	ldi	r22, 0xD8	; 216
     364:	7f ef       	ldi	r23, 0xFF	; 255
     366:	88 e2       	ldi	r24, 0x28	; 40
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <set_motors>
		delay_ms(200);
     36e:	88 ec       	ldi	r24, 0xC8	; 200
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <delay_ms>
		read_line(sensors,IR_EMITTERS_ON);
     376:	61 e0       	ldi	r22, 0x01	; 1
     378:	ce 01       	movw	r24, r28
     37a:	01 96       	adiw	r24, 0x01	; 1
     37c:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <read_line>
		while (sensors[2] < turnCalibration){
     380:	8d 81       	ldd	r24, Y+5	; 0x05
     382:	9e 81       	ldd	r25, Y+6	; 0x06
     384:	88 35       	cpi	r24, 0x58	; 88
     386:	92 40       	sbci	r25, 0x02	; 2
     388:	50 f4       	brcc	.+20     	; 0x39e <_Z4turn4Turn+0xb2>
			read_line(sensors,IR_EMITTERS_ON);
     38a:	61 e0       	ldi	r22, 0x01	; 1
     38c:	ce 01       	movw	r24, r28
     38e:	01 96       	adiw	r24, 0x01	; 1
     390:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <read_line>
		break;
		case RIGHT:
		set_motors(40, -40);
		delay_ms(200);
		read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] < turnCalibration){
     394:	8d 81       	ldd	r24, Y+5	; 0x05
     396:	9e 81       	ldd	r25, Y+6	; 0x06
     398:	88 35       	cpi	r24, 0x58	; 88
     39a:	92 40       	sbci	r25, 0x02	; 2
     39c:	b0 f3       	brcs	.-20     	; 0x38a <_Z4turn4Turn+0x9e>

struct cDirection {
	Direction dir;

	void next() {
		int faceInt = dir;
     39e:	80 91 b7 01 	lds	r24, 0x01B7
     3a2:	90 e0       	ldi	r25, 0x00	; 0
		if (faceInt == 3) {
     3a4:	83 30       	cpi	r24, 0x03	; 3
     3a6:	91 05       	cpc	r25, r1
     3a8:	11 f4       	brne	.+4      	; 0x3ae <_Z4turn4Turn+0xc2>
			faceInt = -1;
     3aa:	8f ef       	ldi	r24, 0xFF	; 255
     3ac:	9f ef       	ldi	r25, 0xFF	; 255
		}
		this->dir = static_cast<Direction>(faceInt + 1);
     3ae:	8f 5f       	subi	r24, 0xFF	; 255
     3b0:	80 93 b7 01 	sts	0x01B7, r24
     3b4:	32 c0       	rjmp	.+100    	; 0x41a <_Z4turn4Turn+0x12e>
			read_line(sensors,IR_EMITTERS_ON);
		}
		currentDir.next();
		break;
		case BACK:
		set_motors(40, -40);
     3b6:	68 ed       	ldi	r22, 0xD8	; 216
     3b8:	7f ef       	ldi	r23, 0xFF	; 255
     3ba:	88 e2       	ldi	r24, 0x28	; 40
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <set_motors>
		delay_ms(700);
     3c2:	8c eb       	ldi	r24, 0xBC	; 188
     3c4:	92 e0       	ldi	r25, 0x02	; 2
     3c6:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <delay_ms>
		read_line(sensors,IR_EMITTERS_ON);
     3ca:	61 e0       	ldi	r22, 0x01	; 1
     3cc:	ce 01       	movw	r24, r28
     3ce:	01 96       	adiw	r24, 0x01	; 1
     3d0:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <read_line>
		while (sensors[2] < turnCalibration){
     3d4:	8d 81       	ldd	r24, Y+5	; 0x05
     3d6:	9e 81       	ldd	r25, Y+6	; 0x06
     3d8:	88 35       	cpi	r24, 0x58	; 88
     3da:	92 40       	sbci	r25, 0x02	; 2
     3dc:	50 f4       	brcc	.+20     	; 0x3f2 <_Z4turn4Turn+0x106>
			read_line(sensors,IR_EMITTERS_ON);
     3de:	61 e0       	ldi	r22, 0x01	; 1
     3e0:	ce 01       	movw	r24, r28
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <read_line>
		break;
		case BACK:
		set_motors(40, -40);
		delay_ms(700);
		read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] < turnCalibration){
     3e8:	8d 81       	ldd	r24, Y+5	; 0x05
     3ea:	9e 81       	ldd	r25, Y+6	; 0x06
     3ec:	88 35       	cpi	r24, 0x58	; 88
     3ee:	92 40       	sbci	r25, 0x02	; 2
     3f0:	b0 f3       	brcs	.-20     	; 0x3de <_Z4turn4Turn+0xf2>
			read_line(sensors,IR_EMITTERS_ON);
		}
		stop();
     3f2:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z4stopv>

struct cDirection {
	Direction dir;

	void next() {
		int faceInt = dir;
     3f6:	80 91 b7 01 	lds	r24, 0x01B7
		if (faceInt == 3) {
     3fa:	83 30       	cpi	r24, 0x03	; 3
     3fc:	31 f0       	breq	.+12     	; 0x40a <_Z4turn4Turn+0x11e>
			faceInt = -1;
		}
		this->dir = static_cast<Direction>(faceInt + 1);
     3fe:	8f 5f       	subi	r24, 0xFF	; 255

struct cDirection {
	Direction dir;

	void next() {
		int faceInt = dir;
     400:	90 e0       	ldi	r25, 0x00	; 0
		if (faceInt == 3) {
     402:	83 30       	cpi	r24, 0x03	; 3
     404:	91 05       	cpc	r25, r1
     406:	31 f4       	brne	.+12     	; 0x414 <_Z4turn4Turn+0x128>
     408:	03 c0       	rjmp	.+6      	; 0x410 <_Z4turn4Turn+0x124>

struct cDirection {
	Direction dir;

	void next() {
		int faceInt = dir;
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	02 c0       	rjmp	.+4      	; 0x414 <_Z4turn4Turn+0x128>
		if (faceInt == 3) {
			faceInt = -1;
     410:	8f ef       	ldi	r24, 0xFF	; 255
     412:	9f ef       	ldi	r25, 0xFF	; 255
		}
		this->dir = static_cast<Direction>(faceInt + 1);
     414:	8f 5f       	subi	r24, 0xFF	; 255
     416:	80 93 b7 01 	sts	0x01B7, r24
		currentDir.next();
		break;
		default:
		break;
	}
	stop();
     41a:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z4stopv>
}
     41e:	2a 96       	adiw	r28, 0x0a	; 10
     420:	0f b6       	in	r0, 0x3f	; 63
     422:	f8 94       	cli
     424:	de bf       	out	0x3e, r29	; 62
     426:	0f be       	out	0x3f, r0	; 63
     428:	cd bf       	out	0x3d, r28	; 61
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	08 95       	ret

00000430 <_Z7faceDir9Direction>:
			faceInt = 4;
		}
		this->dir = static_cast<Direction>(faceInt - 1);
	}
	Direction getNext() {
		int faceInt = dir;
     430:	90 91 b7 01 	lds	r25, 0x01B7
     434:	29 2f       	mov	r18, r25
     436:	30 e0       	ldi	r19, 0x00	; 0
		if (faceInt >= 3) {
     438:	23 30       	cpi	r18, 0x03	; 3
     43a:	31 05       	cpc	r19, r1
     43c:	14 f4       	brge	.+4      	; 0x442 <_Z7faceDir9Direction+0x12>
			faceInt = 4;
		}
		this->dir = static_cast<Direction>(faceInt - 1);
	}
	Direction getNext() {
		int faceInt = dir;
     43e:	49 2f       	mov	r20, r25
     440:	01 c0       	rjmp	.+2      	; 0x444 <_Z7faceDir9Direction+0x14>
		if (faceInt >= 3) {
			faceInt = -1;
     442:	4f ef       	ldi	r20, 0xFF	; 255
		}
		return static_cast<Direction>(faceInt + 1);
     444:	4f 5f       	subi	r20, 0xFF	; 255
	
	return 0;
}

void faceDir(Direction d){
	if (currentDir.getNext() == d){
     446:	84 13       	cpse	r24, r20
     448:	04 c0       	rjmp	.+8      	; 0x452 <_Z7faceDir9Direction+0x22>
		turn(RIGHT);
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4turn4Turn>
     450:	08 95       	ret
	}
	Direction getPrevious() {
		int faceInt = dir;
		if (faceInt <= 0) {
     452:	12 16       	cp	r1, r18
     454:	13 06       	cpc	r1, r19
     456:	14 f4       	brge	.+4      	; 0x45c <_Z7faceDir9Direction+0x2c>
			faceInt = -1;
		}
		return static_cast<Direction>(faceInt + 1);
	}
	Direction getPrevious() {
		int faceInt = dir;
     458:	49 2f       	mov	r20, r25
     45a:	01 c0       	rjmp	.+2      	; 0x45e <_Z7faceDir9Direction+0x2e>
		if (faceInt <= 0) {
			faceInt = 4;
     45c:	44 e0       	ldi	r20, 0x04	; 4
		}
		return static_cast<Direction>(faceInt - 1);
     45e:	41 50       	subi	r20, 0x01	; 1
	} else if(currentDir.getPrevious() == d){
     460:	84 13       	cpse	r24, r20
     462:	04 c0       	rjmp	.+8      	; 0x46c <_Z7faceDir9Direction+0x3c>
		turn(LEFT);
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4turn4Turn>
     46a:	08 95       	ret
	}
	Direction getOpposite(){
		int faceInt = dir;
		if (faceInt >= 3) {
     46c:	23 30       	cpi	r18, 0x03	; 3
     46e:	31 05       	cpc	r19, r1
     470:	3c f4       	brge	.+14     	; 0x480 <_Z7faceDir9Direction+0x50>
			faceInt = -1;
		}
		Direction temp = static_cast<Direction>(faceInt + 1);
     472:	9f 5f       	subi	r25, 0xFF	; 255
		faceInt = temp;
     474:	29 2f       	mov	r18, r25
     476:	30 e0       	ldi	r19, 0x00	; 0
		if (faceInt >= 3) {
     478:	23 30       	cpi	r18, 0x03	; 3
     47a:	31 05       	cpc	r19, r1
     47c:	24 f4       	brge	.+8      	; 0x486 <_Z7faceDir9Direction+0x56>
     47e:	05 c0       	rjmp	.+10     	; 0x48a <_Z7faceDir9Direction+0x5a>
		int faceInt = dir;
		if (faceInt >= 3) {
			faceInt = -1;
		}
		Direction temp = static_cast<Direction>(faceInt + 1);
		faceInt = temp;
     480:	20 e0       	ldi	r18, 0x00	; 0
     482:	30 e0       	ldi	r19, 0x00	; 0
     484:	02 c0       	rjmp	.+4      	; 0x48a <_Z7faceDir9Direction+0x5a>
		if (faceInt >= 3) {
			faceInt = -1;
     486:	2f ef       	ldi	r18, 0xFF	; 255
     488:	3f ef       	ldi	r19, 0xFF	; 255
		}
		return static_cast<Direction>(faceInt + 1);
     48a:	2f 5f       	subi	r18, 0xFF	; 255
	} else if(currentDir.getOpposite() == d){
     48c:	82 13       	cpse	r24, r18
     48e:	03 c0       	rjmp	.+6      	; 0x496 <_Z7faceDir9Direction+0x66>
		turn(BACK);
     490:	82 e0       	ldi	r24, 0x02	; 2
     492:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4turn4Turn>
     496:	08 95       	ret

00000498 <_Z13followSegmentv>:

void stop(){
	set_motors(0, 0);
}

int8_t followSegment(){
     498:	2f 92       	push	r2
     49a:	3f 92       	push	r3
     49c:	4f 92       	push	r4
     49e:	5f 92       	push	r5
     4a0:	6f 92       	push	r6
     4a2:	7f 92       	push	r7
     4a4:	8f 92       	push	r8
     4a6:	9f 92       	push	r9
     4a8:	af 92       	push	r10
     4aa:	bf 92       	push	r11
     4ac:	cf 92       	push	r12
     4ae:	df 92       	push	r13
     4b0:	ef 92       	push	r14
     4b2:	ff 92       	push	r15
     4b4:	0f 93       	push	r16
     4b6:	1f 93       	push	r17
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
     4c0:	2e 97       	sbiw	r28, 0x0e	; 14
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	f8 94       	cli
     4c6:	de bf       	out	0x3e, r29	; 62
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	cd bf       	out	0x3d, r28	; 61
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
static inline unsigned long millis(void) { return get_ms(); }
     4cc:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <get_ms>
     4d0:	6b 87       	std	Y+11, r22	; 0x0b
     4d2:	7c 87       	std	Y+12, r23	; 0x0c
     4d4:	8d 87       	std	Y+13, r24	; 0x0d
     4d6:	9e 87       	std	Y+14, r25	; 0x0e
	unsigned long startTime = millis();
	
	int last_proportional = 0;
	long integral=0;
     4d8:	c1 2c       	mov	r12, r1
     4da:	d1 2c       	mov	r13, r1
     4dc:	76 01       	movw	r14, r12
}

int8_t followSegment(){
	unsigned long startTime = millis();
	
	int last_proportional = 0;
     4de:	21 2c       	mov	r2, r1
     4e0:	31 2c       	mov	r3, r1
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     4e2:	0f 2e       	mov	r0, r31
     4e4:	f0 e1       	ldi	r31, 0x10	; 16
     4e6:	8f 2e       	mov	r8, r31
     4e8:	f7 e2       	ldi	r31, 0x27	; 39
     4ea:	9f 2e       	mov	r9, r31
     4ec:	a1 2c       	mov	r10, r1
     4ee:	b1 2c       	mov	r11, r1
     4f0:	f0 2d       	mov	r31, r0
     4f2:	0f 2e       	mov	r0, r31
     4f4:	f4 e1       	ldi	r31, 0x14	; 20
     4f6:	6f 2e       	mov	r6, r31
     4f8:	71 2c       	mov	r7, r1
     4fa:	f0 2d       	mov	r31, r0
     4fc:	0f 2e       	mov	r0, r31
     4fe:	f4 ec       	ldi	r31, 0xC4	; 196
     500:	4f 2e       	mov	r4, r31
     502:	f0 2d       	mov	r31, r0
     504:	55 24       	eor	r5, r5
     506:	5a 94       	dec	r5
		// Normally, we will be following a line.  The code below is
		// similar to the 3pi-linefollower-pid example, but the maximum
		// speed is turned down to 60 for reliability.
		
		// Get the position of the line.
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     508:	61 e0       	ldi	r22, 0x01	; 1
     50a:	ce 01       	movw	r24, r28
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <read_line>
		
		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 2000;
     512:	8c 01       	movw	r16, r24
     514:	00 5d       	subi	r16, 0xD0	; 208
     516:	17 40       	sbci	r17, 0x07	; 7
		
		// Compute the derivative (change) and integral (sum) of the
		// position.
		int derivative = proportional - last_proportional;
		integral += proportional;
     518:	c8 01       	movw	r24, r16
     51a:	aa 27       	eor	r26, r26
     51c:	97 fd       	sbrc	r25, 7
     51e:	a0 95       	com	r26
     520:	ba 2f       	mov	r27, r26
     522:	c8 0e       	add	r12, r24
     524:	d9 1e       	adc	r13, r25
     526:	ea 1e       	adc	r14, r26
     528:	fb 1e       	adc	r15, r27
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     52a:	c7 01       	movw	r24, r14
     52c:	b6 01       	movw	r22, r12
     52e:	a5 01       	movw	r20, r10
     530:	94 01       	movw	r18, r8
     532:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <__divmodsi4>
		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 2000;
		
		// Compute the derivative (change) and integral (sum) of the
		// position.
		int derivative = proportional - last_proportional;
     536:	b8 01       	movw	r22, r16
     538:	62 19       	sub	r22, r2
     53a:	73 09       	sbc	r23, r3
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     53c:	cb 01       	movw	r24, r22
     53e:	88 0f       	add	r24, r24
     540:	99 1f       	adc	r25, r25
     542:	86 0f       	add	r24, r22
     544:	97 1f       	adc	r25, r23
     546:	99 23       	and	r25, r25
     548:	0c f4       	brge	.+2      	; 0x54c <_Z13followSegmentv+0xb4>
     54a:	01 96       	adiw	r24, 0x01	; 1
     54c:	95 95       	asr	r25
     54e:	87 95       	ror	r24
     550:	28 0f       	add	r18, r24
     552:	39 1f       	adc	r19, r25
     554:	c8 01       	movw	r24, r16
     556:	b3 01       	movw	r22, r6
     558:	0e 94 46 14 	call	0x288c	; 0x288c <__divmodhi4>
     55c:	c9 01       	movw	r24, r18
     55e:	86 0f       	add	r24, r22
     560:	97 1f       	adc	r25, r23
     562:	8d 33       	cpi	r24, 0x3D	; 61
     564:	91 05       	cpc	r25, r1
     566:	14 f0       	brlt	.+4      	; 0x56c <_Z13followSegmentv+0xd4>
     568:	8c e3       	ldi	r24, 0x3C	; 60
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	84 3c       	cpi	r24, 0xC4	; 196
     56e:	2f ef       	ldi	r18, 0xFF	; 255
     570:	92 07       	cpc	r25, r18
     572:	14 f4       	brge	.+4      	; 0x578 <_Z13followSegmentv+0xe0>
     574:	84 2d       	mov	r24, r4
     576:	95 2d       	mov	r25, r5
		}
		if(power_difference < -max) {
			power_difference = -max;
		}
		
		if(power_difference < 0) {
     578:	99 23       	and	r25, r25
     57a:	34 f4       	brge	.+12     	; 0x588 <_Z13followSegmentv+0xf0>
			set_motors(max+power_difference,max);
     57c:	6c e3       	ldi	r22, 0x3C	; 60
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	cc 96       	adiw	r24, 0x3c	; 60
     582:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <set_motors>
     586:	08 c0       	rjmp	.+16     	; 0x598 <_Z13followSegmentv+0x100>
		} else {
			set_motors(max,max-power_difference);
     588:	6c e3       	ldi	r22, 0x3C	; 60
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	68 1b       	sub	r22, r24
     58e:	79 0b       	sbc	r23, r25
     590:	8c e3       	ldi	r24, 0x3C	; 60
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <set_motors>
		// determining whether there is a line straight ahead, and the
		// sensors 0 and 4 for detecting lines going to the left and
		// right.
		

		if(sensors[1] < 350 && sensors[2] < 350 && sensors[3] < 350){
     598:	8b 81       	ldd	r24, Y+3	; 0x03
     59a:	9c 81       	ldd	r25, Y+4	; 0x04
     59c:	8e 35       	cpi	r24, 0x5E	; 94
     59e:	91 40       	sbci	r25, 0x01	; 1
     5a0:	98 f4       	brcc	.+38     	; 0x5c8 <_Z13followSegmentv+0x130>
     5a2:	8d 81       	ldd	r24, Y+5	; 0x05
     5a4:	9e 81       	ldd	r25, Y+6	; 0x06
     5a6:	8e 35       	cpi	r24, 0x5E	; 94
     5a8:	91 40       	sbci	r25, 0x01	; 1
     5aa:	70 f4       	brcc	.+28     	; 0x5c8 <_Z13followSegmentv+0x130>
     5ac:	8f 81       	ldd	r24, Y+7	; 0x07
     5ae:	98 85       	ldd	r25, Y+8	; 0x08
     5b0:	8e 35       	cpi	r24, 0x5E	; 94
     5b2:	91 40       	sbci	r25, 0x01	; 1
     5b4:	48 f4       	brcc	.+18     	; 0x5c8 <_Z13followSegmentv+0x130>
			// There is no line visible ahead, and we didn't see any
			// intersection.  Must be a dead end.
			
			isLeft = false;
     5b6:	10 92 ba 01 	sts	0x01BA, r1
			isRight = false;
     5ba:	10 92 b9 01 	sts	0x01B9, r1
			isForward = false;
     5be:	10 92 bb 01 	sts	0x01BB, r1
			
			stop();
     5c2:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z4stopv>
			
			break;
     5c6:	82 c0       	rjmp	.+260    	; 0x6cc <_Z13followSegmentv+0x234>
		} else if(sensors[0] > 350 || sensors[4] > 350) {		
     5c8:	89 81       	ldd	r24, Y+1	; 0x01
     5ca:	9a 81       	ldd	r25, Y+2	; 0x02
     5cc:	8f 35       	cpi	r24, 0x5F	; 95
     5ce:	91 40       	sbci	r25, 0x01	; 1
     5d0:	38 f4       	brcc	.+14     	; 0x5e0 <_Z13followSegmentv+0x148>
     5d2:	89 85       	ldd	r24, Y+9	; 0x09
     5d4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5d6:	8f 35       	cpi	r24, 0x5F	; 95
     5d8:	91 40       	sbci	r25, 0x01	; 1
     5da:	10 f4       	brcc	.+4      	; 0x5e0 <_Z13followSegmentv+0x148>
		// position.
		int derivative = proportional - last_proportional;
		integral += proportional;
		
		// Remember the last position.
		last_proportional = proportional;
     5dc:	18 01       	movw	r2, r16
     5de:	94 cf       	rjmp	.-216    	; 0x508 <_Z13followSegmentv+0x70>
			stop();
			
			break;
		} else if(sensors[0] > 350 || sensors[4] > 350) {		
			// Found an intersection.
			set_motors(40, 40);
     5e0:	68 e2       	ldi	r22, 0x28	; 40
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	88 e2       	ldi	r24, 0x28	; 40
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <set_motors>
			delay_ms(50);
     5ec:	82 e3       	ldi	r24, 0x32	; 50
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <delay_ms>
			
			read_line(sensors,IR_EMITTERS_ON);
     5f4:	61 e0       	ldi	r22, 0x01	; 1
     5f6:	ce 01       	movw	r24, r28
     5f8:	01 96       	adiw	r24, 0x01	; 1
     5fa:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <read_line>
			isLeft = (sensors[0] > 500);
     5fe:	21 e0       	ldi	r18, 0x01	; 1
     600:	89 81       	ldd	r24, Y+1	; 0x01
     602:	9a 81       	ldd	r25, Y+2	; 0x02
     604:	85 3f       	cpi	r24, 0xF5	; 245
     606:	91 40       	sbci	r25, 0x01	; 1
     608:	08 f4       	brcc	.+2      	; 0x60c <_Z13followSegmentv+0x174>
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	20 93 ba 01 	sts	0x01BA, r18
			isRight = (sensors[4] > 500);
     610:	21 e0       	ldi	r18, 0x01	; 1
     612:	89 85       	ldd	r24, Y+9	; 0x09
     614:	9a 85       	ldd	r25, Y+10	; 0x0a
     616:	85 3f       	cpi	r24, 0xF5	; 245
     618:	91 40       	sbci	r25, 0x01	; 1
     61a:	08 f4       	brcc	.+2      	; 0x61e <_Z13followSegmentv+0x186>
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	20 93 b9 01 	sts	0x01B9, r18

			set_motors(40, 40);
     622:	68 e2       	ldi	r22, 0x28	; 40
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	88 e2       	ldi	r24, 0x28	; 40
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <set_motors>
			delay_ms(200);
     62e:	88 ec       	ldi	r24, 0xC8	; 200
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <delay_ms>
			stop();
     636:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z4stopv>
			
			read_line(sensors,IR_EMITTERS_ON);
     63a:	61 e0       	ldi	r22, 0x01	; 1
     63c:	ce 01       	movw	r24, r28
     63e:	01 96       	adiw	r24, 0x01	; 1
     640:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <read_line>
			
			if (sensors[0] > 350 && sensors[1] > 350 && sensors[2] > 350 && sensors[3] > 350 && sensors[4] > 350){
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	9a 81       	ldd	r25, Y+2	; 0x02
     648:	8f 35       	cpi	r24, 0x5F	; 95
     64a:	91 40       	sbci	r25, 0x01	; 1
     64c:	28 f1       	brcs	.+74     	; 0x698 <_Z13followSegmentv+0x200>
     64e:	8b 81       	ldd	r24, Y+3	; 0x03
     650:	9c 81       	ldd	r25, Y+4	; 0x04
     652:	8f 35       	cpi	r24, 0x5F	; 95
     654:	91 40       	sbci	r25, 0x01	; 1
     656:	00 f1       	brcs	.+64     	; 0x698 <_Z13followSegmentv+0x200>
     658:	8d 81       	ldd	r24, Y+5	; 0x05
     65a:	9e 81       	ldd	r25, Y+6	; 0x06
     65c:	8f 35       	cpi	r24, 0x5F	; 95
     65e:	91 40       	sbci	r25, 0x01	; 1
     660:	d8 f0       	brcs	.+54     	; 0x698 <_Z13followSegmentv+0x200>
     662:	8f 81       	ldd	r24, Y+7	; 0x07
     664:	98 85       	ldd	r25, Y+8	; 0x08
     666:	8f 35       	cpi	r24, 0x5F	; 95
     668:	91 40       	sbci	r25, 0x01	; 1
     66a:	b0 f0       	brcs	.+44     	; 0x698 <_Z13followSegmentv+0x200>
     66c:	89 85       	ldd	r24, Y+9	; 0x09
     66e:	9a 85       	ldd	r25, Y+10	; 0x0a
     670:	8f 35       	cpi	r24, 0x5F	; 95
     672:	91 40       	sbci	r25, 0x01	; 1
     674:	88 f0       	brcs	.+34     	; 0x698 <_Z13followSegmentv+0x200>
				play_frequency(2000, 100, 10);
     676:	4a e0       	ldi	r20, 0x0A	; 10
     678:	64 e6       	ldi	r22, 0x64	; 100
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	80 ed       	ldi	r24, 0xD0	; 208
     67e:	97 e0       	ldi	r25, 0x07	; 7
     680:	0e 94 76 08 	call	0x10ec	; 0x10ec <play_frequency>
				foundFinish = true;
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	80 93 b8 01 	sts	0x01B8, r24
				isLeft = false;
     68a:	10 92 ba 01 	sts	0x01BA, r1
				isRight = false;
     68e:	10 92 b9 01 	sts	0x01B9, r1
				isForward = false;
     692:	10 92 bb 01 	sts	0x01BB, r1
				break;
     696:	1a c0       	rjmp	.+52     	; 0x6cc <_Z13followSegmentv+0x234>
			} else {
				foundFinish = false;
     698:	10 92 b8 01 	sts	0x01B8, r1
			}
			
			isForward = (sensors[1] > 350 || sensors[2] > 350 || sensors[3] > 350);
     69c:	8b 81       	ldd	r24, Y+3	; 0x03
     69e:	9c 81       	ldd	r25, Y+4	; 0x04
     6a0:	8f 35       	cpi	r24, 0x5F	; 95
     6a2:	91 40       	sbci	r25, 0x01	; 1
     6a4:	70 f4       	brcc	.+28     	; 0x6c2 <_Z13followSegmentv+0x22a>
     6a6:	8d 81       	ldd	r24, Y+5	; 0x05
     6a8:	9e 81       	ldd	r25, Y+6	; 0x06
     6aa:	8f 35       	cpi	r24, 0x5F	; 95
     6ac:	91 40       	sbci	r25, 0x01	; 1
     6ae:	58 f4       	brcc	.+22     	; 0x6c6 <_Z13followSegmentv+0x22e>
     6b0:	21 e0       	ldi	r18, 0x01	; 1
     6b2:	8f 81       	ldd	r24, Y+7	; 0x07
     6b4:	98 85       	ldd	r25, Y+8	; 0x08
     6b6:	8f 35       	cpi	r24, 0x5F	; 95
     6b8:	91 40       	sbci	r25, 0x01	; 1
     6ba:	08 f4       	brcc	.+2      	; 0x6be <_Z13followSegmentv+0x226>
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	82 2f       	mov	r24, r18
     6c0:	03 c0       	rjmp	.+6      	; 0x6c8 <_Z13followSegmentv+0x230>
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	01 c0       	rjmp	.+2      	; 0x6c8 <_Z13followSegmentv+0x230>
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	80 93 bb 01 	sts	0x01BB, r24
     6cc:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <get_ms>
			
			break;
		}
	}
	
	unsigned long totalTime = millis() - startTime;
     6d0:	dc 01       	movw	r26, r24
     6d2:	cb 01       	movw	r24, r22
     6d4:	2b 85       	ldd	r18, Y+11	; 0x0b
     6d6:	3c 85       	ldd	r19, Y+12	; 0x0c
     6d8:	4d 85       	ldd	r20, Y+13	; 0x0d
     6da:	5e 85       	ldd	r21, Y+14	; 0x0e
     6dc:	82 1b       	sub	r24, r18
     6de:	93 0b       	sbc	r25, r19
     6e0:	a4 0b       	sbc	r26, r20
     6e2:	b5 0b       	sbc	r27, r21
	//print(" ");
	//print_long(totalTime);
	
	//wait_for_button(BUTTON_B);
	
	if (totalTime >= 50 && totalTime <= 850){
     6e4:	8c 01       	movw	r16, r24
     6e6:	9d 01       	movw	r18, r26
     6e8:	02 53       	subi	r16, 0x32	; 50
     6ea:	11 09       	sbc	r17, r1
     6ec:	21 09       	sbc	r18, r1
     6ee:	31 09       	sbc	r19, r1
     6f0:	01 32       	cpi	r16, 0x21	; 33
     6f2:	13 40       	sbci	r17, 0x03	; 3
     6f4:	21 05       	cpc	r18, r1
     6f6:	31 05       	cpc	r19, r1
     6f8:	08 f1       	brcs	.+66     	; 0x73c <_Z13followSegmentv+0x2a4>
		return 1;
	} else if(totalTime > 850 && totalTime <= 1300){
     6fa:	8c 01       	movw	r16, r24
     6fc:	9d 01       	movw	r18, r26
     6fe:	03 55       	subi	r16, 0x53	; 83
     700:	13 40       	sbci	r17, 0x03	; 3
     702:	21 09       	sbc	r18, r1
     704:	31 09       	sbc	r19, r1
     706:	02 3c       	cpi	r16, 0xC2	; 194
     708:	11 40       	sbci	r17, 0x01	; 1
     70a:	21 05       	cpc	r18, r1
     70c:	31 05       	cpc	r19, r1
     70e:	c0 f0       	brcs	.+48     	; 0x740 <_Z13followSegmentv+0x2a8>
		return 2;
	} else if(totalTime > 1300 && totalTime <= 1850){
     710:	8c 01       	movw	r16, r24
     712:	9d 01       	movw	r18, r26
     714:	05 51       	subi	r16, 0x15	; 21
     716:	15 40       	sbci	r17, 0x05	; 5
     718:	21 09       	sbc	r18, r1
     71a:	31 09       	sbc	r19, r1
     71c:	06 32       	cpi	r16, 0x26	; 38
     71e:	12 40       	sbci	r17, 0x02	; 2
     720:	21 05       	cpc	r18, r1
     722:	31 05       	cpc	r19, r1
     724:	78 f0       	brcs	.+30     	; 0x744 <_Z13followSegmentv+0x2ac>
		return 3;
	} else if(totalTime > 1850 && totalTime <= 2700){
     726:	8b 53       	subi	r24, 0x3B	; 59
     728:	97 40       	sbci	r25, 0x07	; 7
     72a:	a1 09       	sbc	r26, r1
     72c:	b1 09       	sbc	r27, r1
     72e:	82 35       	cpi	r24, 0x52	; 82
     730:	93 40       	sbci	r25, 0x03	; 3
     732:	a1 05       	cpc	r26, r1
     734:	b1 05       	cpc	r27, r1
     736:	40 f4       	brcc	.+16     	; 0x748 <_Z13followSegmentv+0x2b0>
		return 4;
     738:	84 e0       	ldi	r24, 0x04	; 4
     73a:	07 c0       	rjmp	.+14     	; 0x74a <_Z13followSegmentv+0x2b2>
	//print_long(totalTime);
	
	//wait_for_button(BUTTON_B);
	
	if (totalTime >= 50 && totalTime <= 850){
		return 1;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	05 c0       	rjmp	.+10     	; 0x74a <_Z13followSegmentv+0x2b2>
	} else if(totalTime > 850 && totalTime <= 1300){
		return 2;
     740:	82 e0       	ldi	r24, 0x02	; 2
     742:	03 c0       	rjmp	.+6      	; 0x74a <_Z13followSegmentv+0x2b2>
	} else if(totalTime > 1300 && totalTime <= 1850){
		return 3;
     744:	83 e0       	ldi	r24, 0x03	; 3
     746:	01 c0       	rjmp	.+2      	; 0x74a <_Z13followSegmentv+0x2b2>
	} else if(totalTime > 1850 && totalTime <= 2700){
		return 4;
	} else {
		return 0;
     748:	80 e0       	ldi	r24, 0x00	; 0
	}
     74a:	2e 96       	adiw	r28, 0x0e	; 14
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	f8 94       	cli
     750:	de bf       	out	0x3e, r29	; 62
     752:	0f be       	out	0x3f, r0	; 63
     754:	cd bf       	out	0x3d, r28	; 61
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
     75e:	ff 90       	pop	r15
     760:	ef 90       	pop	r14
     762:	df 90       	pop	r13
     764:	cf 90       	pop	r12
     766:	bf 90       	pop	r11
     768:	af 90       	pop	r10
     76a:	9f 90       	pop	r9
     76c:	8f 90       	pop	r8
     76e:	7f 90       	pop	r7
     770:	6f 90       	pop	r6
     772:	5f 90       	pop	r5
     774:	4f 90       	pop	r4
     776:	3f 90       	pop	r3
     778:	2f 90       	pop	r2
     77a:	08 95       	ret

0000077c <_Z10followLinev>:
	
	faceDir(currentDir.getOpposite());
}


void followLine(){
     77c:	0f 93       	push	r16
     77e:	1f 93       	push	r17
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
			break;
			case EAST:
			currentPos.x += tilesTravelled;
			break;
			case WEST:
			currentPos.x -= tilesTravelled;
     784:	05 eb       	ldi	r16, 0xB5	; 181
     786:	11 e0       	ldi	r17, 0x01	; 1
		switch(currentDir){
			case NORTH:
			currentPos.y += tilesTravelled;
			break;
			case SOUTH:
			currentPos.y -= tilesTravelled;
     788:	c6 eb       	ldi	r28, 0xB6	; 182
     78a:	d1 e0       	ldi	r29, 0x01	; 1
}


void followLine(){
	while(1){
		uint8_t tilesTravelled = followSegment();
     78c:	0e 94 4c 02 	call	0x498	; 0x498 <_Z13followSegmentv>
		
		switch(currentDir){
     790:	90 91 b7 01 	lds	r25, 0x01B7
     794:	91 30       	cpi	r25, 0x01	; 1
     796:	99 f0       	breq	.+38     	; 0x7be <_Z10followLinev+0x42>
     798:	48 f0       	brcs	.+18     	; 0x7ac <_Z10followLinev+0x30>
     79a:	92 30       	cpi	r25, 0x02	; 2
     79c:	19 f0       	breq	.+6      	; 0x7a4 <_Z10followLinev+0x28>
     79e:	93 30       	cpi	r25, 0x03	; 3
     7a0:	49 f0       	breq	.+18     	; 0x7b4 <_Z10followLinev+0x38>
     7a2:	11 c0       	rjmp	.+34     	; 0x7c6 <_Z10followLinev+0x4a>
			case NORTH:
			currentPos.y += tilesTravelled;
     7a4:	98 81       	ld	r25, Y
     7a6:	89 0f       	add	r24, r25
     7a8:	88 83       	st	Y, r24
			break;
     7aa:	0d c0       	rjmp	.+26     	; 0x7c6 <_Z10followLinev+0x4a>
			case SOUTH:
			currentPos.y -= tilesTravelled;
     7ac:	98 81       	ld	r25, Y
     7ae:	98 1b       	sub	r25, r24
     7b0:	98 83       	st	Y, r25
			break;
     7b2:	09 c0       	rjmp	.+18     	; 0x7c6 <_Z10followLinev+0x4a>
			case EAST:
			currentPos.x += tilesTravelled;
     7b4:	f8 01       	movw	r30, r16
     7b6:	90 81       	ld	r25, Z
     7b8:	89 0f       	add	r24, r25
     7ba:	80 83       	st	Z, r24
			break;
     7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <_Z10followLinev+0x4a>
			case WEST:
			currentPos.x -= tilesTravelled;
     7be:	f8 01       	movw	r30, r16
     7c0:	90 81       	ld	r25, Z
     7c2:	98 1b       	sub	r25, r24
     7c4:	90 83       	st	Z, r25
			break;
			default:
			break;
		}
		
		if (isLeft && !isRight && !isForward){
     7c6:	80 91 ba 01 	lds	r24, 0x01BA
     7ca:	88 23       	and	r24, r24
     7cc:	99 f0       	breq	.+38     	; 0x7f4 <_Z10followLinev+0x78>
     7ce:	80 91 b9 01 	lds	r24, 0x01B9
     7d2:	81 11       	cpse	r24, r1
     7d4:	13 c0       	rjmp	.+38     	; 0x7fc <_Z10followLinev+0x80>
     7d6:	80 91 bb 01 	lds	r24, 0x01BB
     7da:	81 11       	cpse	r24, r1
     7dc:	0f c0       	rjmp	.+30     	; 0x7fc <_Z10followLinev+0x80>
			turn(LEFT);
     7de:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4turn4Turn>
     7e2:	d4 cf       	rjmp	.-88     	; 0x78c <_Z10followLinev+0x10>
		} else if(isRight && !isLeft && !isForward){
     7e4:	80 91 bb 01 	lds	r24, 0x01BB
     7e8:	81 11       	cpse	r24, r1
     7ea:	08 c0       	rjmp	.+16     	; 0x7fc <_Z10followLinev+0x80>
			turn(RIGHT);
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z4turn4Turn>
     7f2:	cc cf       	rjmp	.-104    	; 0x78c <_Z10followLinev+0x10>
			break;
		}
		
		if (isLeft && !isRight && !isForward){
			turn(LEFT);
		} else if(isRight && !isLeft && !isForward){
     7f4:	80 91 b9 01 	lds	r24, 0x01B9
     7f8:	81 11       	cpse	r24, r1
     7fa:	f4 cf       	rjmp	.-24     	; 0x7e4 <_Z10followLinev+0x68>
			turn(RIGHT);
		} else {
			break;
		}
	}
}
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	1f 91       	pop	r17
     802:	0f 91       	pop	r16
     804:	08 95       	ret

00000806 <_Z7mapMazev>:

void travelTo(int8_t x, int8_t y){
	
}

void mapMaze(){
     806:	2f 92       	push	r2
     808:	3f 92       	push	r3
     80a:	4f 92       	push	r4
     80c:	5f 92       	push	r5
     80e:	6f 92       	push	r6
     810:	7f 92       	push	r7
     812:	8f 92       	push	r8
     814:	9f 92       	push	r9
     816:	af 92       	push	r10
     818:	bf 92       	push	r11
     81a:	cf 92       	push	r12
     81c:	df 92       	push	r13
     81e:	ef 92       	push	r14
     820:	ff 92       	push	r15
     822:	0f 93       	push	r16
     824:	1f 93       	push	r17
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	cd b7       	in	r28, 0x3d	; 61
     82c:	de b7       	in	r29, 0x3e	; 62
     82e:	c6 56       	subi	r28, 0x66	; 102
     830:	d1 09       	sbc	r29, r1
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	f8 94       	cli
     836:	de bf       	out	0x3e, r29	; 62
     838:	0f be       	out	0x3f, r0	; 63
     83a:	cd bf       	out	0x3d, r28	; 61
	int startRAM = get_free_ram();
     83c:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <get_free_ram>
     840:	4c 01       	movw	r8, r24
	
	currentDir.dir = NORTH;
     842:	82 e0       	ldi	r24, 0x02	; 2
     844:	80 93 b7 01 	sts	0x01B7, r24
	currentPos.x = 0;
     848:	10 92 b5 01 	sts	0x01B5, r1
	currentPos.y = 0;
     84c:	10 92 b6 01 	sts	0x01B6, r1
#include "node.h"
#include <stdbool.h>

struct NodeStack {
public:
	NodeStack() : top(0) {
     850:	1a 82       	std	Y+2, r1	; 0x02
     852:	19 82       	std	Y+1, r1	; 0x01
	
	myNodeStack = NodeStack();
     854:	10 92 b4 01 	sts	0x01B4, r1
     858:	10 92 b3 01 	sts	0x01B3, r1
#define UTILITY_H_

#include <stdlib.h>

void* operator new(size_t objsize) {
	return malloc(objsize);
     85c:	8b e0       	ldi	r24, 0x0B	; 11
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <malloc>
     864:	8c 01       	movw	r16, r24
	//float f, g, h;

	node(){
		this->visited = false;
		for (int i=0; i<4; i++){
			this->connections[i] = NULL;
     866:	dc 01       	movw	r26, r24
     868:	14 96       	adiw	r26, 0x04	; 4
     86a:	1c 92       	st	X, r1
     86c:	1e 92       	st	-X, r1
     86e:	13 97       	sbiw	r26, 0x03	; 3
     870:	16 96       	adiw	r26, 0x06	; 6
     872:	1c 92       	st	X, r1
     874:	1e 92       	st	-X, r1
     876:	15 97       	sbiw	r26, 0x05	; 5
     878:	1a 96       	adiw	r26, 0x0a	; 10
     87a:	1c 92       	st	X, r1
     87c:	1e 92       	st	-X, r1
     87e:	19 97       	sbiw	r26, 0x09	; 9
     880:	e5 eb       	ldi	r30, 0xB5	; 181
     882:	f1 e0       	ldi	r31, 0x01	; 1
     884:	81 81       	ldd	r24, Z+1	; 0x01
		}
	}
	
	void setPosition(position p){
		this->pos = p;
     886:	90 81       	ld	r25, Z
     888:	9c 93       	st	X, r25
     88a:	11 96       	adiw	r26, 0x01	; 1
     88c:	8c 93       	st	X, r24
     88e:	8b e0       	ldi	r24, 0x0B	; 11
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <malloc>
     896:	fc 01       	movw	r30, r24
	node* connections[4]; // 0 = South (where mouse came from), 1 = West, 2 = North, 3 = East
	//node* parent;
	//float f, g, h;

	node(){
		this->visited = false;
     898:	12 82       	std	Z+2, r1	; 0x02
		for (int i=0; i<4; i++){
			this->connections[i] = NULL;
     89a:	14 82       	std	Z+4, r1	; 0x04
     89c:	13 82       	std	Z+3, r1	; 0x03
     89e:	16 82       	std	Z+6, r1	; 0x06
     8a0:	15 82       	std	Z+5, r1	; 0x05
     8a2:	10 86       	std	Z+8, r1	; 0x08
     8a4:	17 82       	std	Z+7, r1	; 0x07
     8a6:	12 86       	std	Z+10, r1	; 0x0a
     8a8:	11 86       	std	Z+9, r1	; 0x09
	node* allNodes[50];
	int head = 0;
	
	node* root = new node;
	root->setPosition(currentPos);
	root->connections[2] = new node;
     8aa:	d8 01       	movw	r26, r16
     8ac:	18 96       	adiw	r26, 0x08	; 8
     8ae:	9c 93       	st	X, r25
     8b0:	8e 93       	st	-X, r24
     8b2:	17 97       	sbiw	r26, 0x07	; 7
	root->visited = true;
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	12 96       	adiw	r26, 0x02	; 2
     8b8:	8c 93       	st	X, r24
	
	allNodes[head] = root;
     8ba:	1c 83       	std	Y+4, r17	; 0x04
     8bc:	0b 83       	std	Y+3, r16	; 0x03
	
	myNodeStack.push(root, NORTH);
     8be:	42 e0       	ldi	r20, 0x02	; 2
     8c0:	b8 01       	movw	r22, r16
     8c2:	83 eb       	ldi	r24, 0xB3	; 179
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN9NodeStack4pushEP4node9Direction>
	currentPos.x = 0;
	currentPos.y = 0;
	
	myNodeStack = NodeStack();
	node* allNodes[50];
	int head = 0;
     8ca:	c1 2c       	mov	r12, r1
     8cc:	d1 2c       	mov	r13, r1
	}
	return NULL;
}

bool NodeStack::isEmpty() {
	if (top == 0) {
     8ce:	0f 2e       	mov	r0, r31
     8d0:	f3 eb       	ldi	r31, 0xB3	; 179
     8d2:	6f 2e       	mov	r6, r31
     8d4:	f1 e0       	ldi	r31, 0x01	; 1
     8d6:	7f 2e       	mov	r7, r31
     8d8:	f0 2d       	mov	r31, r0
		
		//delay_ms(1000);
		
		wait_for_button(BUTTON_B);
		
		for (i=3; i>-1; i--){
     8da:	0f 2e       	mov	r0, r31
     8dc:	f3 e0       	ldi	r31, 0x03	; 3
     8de:	3f 2e       	mov	r3, r31
     8e0:	f0 2d       	mov	r31, r0
     8e2:	21 2c       	mov	r2, r1
		int faceInt = dir;
		if (faceInt >= 3) {
			faceInt = -1;
		}
		Direction temp = static_cast<Direction>(faceInt + 1);
		faceInt = temp;
     8e4:	41 2c       	mov	r4, r1
     8e6:	51 2c       	mov	r5, r1
	allNodes[head] = root;
	
	myNodeStack.push(root, NORTH);
	
	int i;
	while(!myNodeStack.isEmpty()){
     8e8:	55 c1       	rjmp	.+682    	; 0xb94 <__stack+0x295>
		node* currentNode = myNodeStack.getTop();
     8ea:	c3 01       	movw	r24, r6
     8ec:	0e 94 af 00 	call	0x15e	; 0x15e <_ZN9NodeStack6getTopEv>
     8f0:	5c 01       	movw	r10, r24
		
		clear();
     8f2:	0e 94 c2 0b 	call	0x1784	; 0x1784 <clear>
		//print(" ");
		//print_long(currentPos.x);
		//print(", ");
		//print_long(currentPos.y);
		
		print(" ");
     8f6:	8b e3       	ldi	r24, 0x3B	; 59
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <print>
		print_long(get_free_ram());
     8fe:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <get_free_ram>
     902:	bc 01       	movw	r22, r24
     904:	88 27       	eor	r24, r24
     906:	77 fd       	sbrc	r23, 7
     908:	80 95       	com	r24
     90a:	98 2f       	mov	r25, r24
     90c:	0e 94 36 0c 	call	0x186c	; 0x186c <print_long>
		
		lcd_goto_xy(0, 1);
     910:	61 e0       	ldi	r22, 0x01	; 1
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <lcd_goto_xy>
		
		print(" ");
     918:	8b e3       	ldi	r24, 0x3B	; 59
     91a:	91 e0       	ldi	r25, 0x01	; 1
     91c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <print>
		print_long(startRAM - get_free_ram());
     920:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <get_free_ram>
     924:	b4 01       	movw	r22, r8
     926:	68 1b       	sub	r22, r24
     928:	79 0b       	sbc	r23, r25
     92a:	88 27       	eor	r24, r24
     92c:	77 fd       	sbrc	r23, 7
     92e:	80 95       	com	r24
     930:	98 2f       	mov	r25, r24
     932:	0e 94 36 0c 	call	0x186c	; 0x186c <print_long>
		
		//delay_ms(1000);
		
		wait_for_button(BUTTON_B);
     936:	80 e1       	ldi	r24, 0x10	; 16
     938:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <wait_for_button>
     93c:	f5 01       	movw	r30, r10
		
		for (i=3; i>-1; i--){
     93e:	e3 2c       	mov	r14, r3
     940:	f2 2c       	mov	r15, r2
			if (currentNode->connections[i] != NULL){
     942:	a1 85       	ldd	r26, Z+9	; 0x09
     944:	b2 85       	ldd	r27, Z+10	; 0x0a
     946:	10 97       	sbiw	r26, 0x00	; 0
     948:	21 f0       	breq	.+8      	; 0x952 <__stack+0x53>
				if (currentNode->connections[i]->visited == false){
     94a:	12 96       	adiw	r26, 0x02	; 2
     94c:	8c 91       	ld	r24, X
     94e:	88 23       	and	r24, r24
     950:	49 f0       	breq	.+18     	; 0x964 <__stack+0x65>
		
		//delay_ms(1000);
		
		wait_for_button(BUTTON_B);
		
		for (i=3; i>-1; i--){
     952:	b1 e0       	ldi	r27, 0x01	; 1
     954:	eb 1a       	sub	r14, r27
     956:	f1 08       	sbc	r15, r1
     958:	32 97       	sbiw	r30, 0x02	; 2
     95a:	8f ef       	ldi	r24, 0xFF	; 255
     95c:	e8 16       	cp	r14, r24
     95e:	f8 06       	cpc	r15, r24
     960:	81 f7       	brne	.-32     	; 0x942 <__stack+0x43>
     962:	04 c0       	rjmp	.+8      	; 0x96c <__stack+0x6d>
					break;
				}
			}
		}
		
		if (i == -1){ // this node has no unvisited connections
     964:	9f ef       	ldi	r25, 0xFF	; 255
     966:	e9 16       	cp	r14, r25
     968:	f9 06       	cpc	r15, r25
     96a:	b9 f4       	brne	.+46     	; 0x99a <__stack+0x9b>
			cDirection d;
			d = myNodeStack.pop();
     96c:	c3 01       	movw	r24, r6
     96e:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN9NodeStack3popEv>
			faceInt = 4;
		}
		return static_cast<Direction>(faceInt - 1);
	}
	Direction getOpposite(){
		int faceInt = dir;
     972:	28 2f       	mov	r18, r24
     974:	30 e0       	ldi	r19, 0x00	; 0
		if (faceInt >= 3) {
     976:	23 30       	cpi	r18, 0x03	; 3
     978:	31 05       	cpc	r19, r1
     97a:	34 f4       	brge	.+12     	; 0x988 <__stack+0x89>
			faceInt = -1;
		}
		Direction temp = static_cast<Direction>(faceInt + 1);
     97c:	8f 5f       	subi	r24, 0xFF	; 255
		faceInt = temp;
     97e:	90 e0       	ldi	r25, 0x00	; 0
		if (faceInt >= 3) {
     980:	83 30       	cpi	r24, 0x03	; 3
     982:	91 05       	cpc	r25, r1
     984:	1c f4       	brge	.+6      	; 0x98c <__stack+0x8d>
     986:	03 c0       	rjmp	.+6      	; 0x98e <__stack+0x8f>
		int faceInt = dir;
		if (faceInt >= 3) {
			faceInt = -1;
		}
		Direction temp = static_cast<Direction>(faceInt + 1);
		faceInt = temp;
     988:	84 2d       	mov	r24, r4
     98a:	01 c0       	rjmp	.+2      	; 0x98e <__stack+0x8f>
		if (faceInt >= 3) {
			faceInt = -1;
     98c:	8f ef       	ldi	r24, 0xFF	; 255
			faceDir(d.getOpposite());
     98e:	8f 5f       	subi	r24, 0xFF	; 255
     990:	0e 94 18 02 	call	0x430	; 0x430 <_Z7faceDir9Direction>
			followLine();
     994:	0e 94 be 03 	call	0x77c	; 0x77c <_Z10followLinev>
     998:	fd c0       	rjmp	.+506    	; 0xb94 <__stack+0x295>
	}
}

void faceDir(int i){
	Direction d = static_cast<Direction>(i);
	faceDir(d);
     99a:	8e 2d       	mov	r24, r14
     99c:	0e 94 18 02 	call	0x430	; 0x430 <_Z7faceDir9Direction>
			d = myNodeStack.pop();
			faceDir(d.getOpposite());
			followLine();
		} else {
			faceDir(i);
			followLine();
     9a0:	0e 94 be 03 	call	0x77c	; 0x77c <_Z10followLinev>
			
			node* nextNode = NULL;
			for (int j=0; j<=head; j++){
     9a4:	dd 20       	and	r13, r13
     9a6:	c4 f0       	brlt	.+48     	; 0x9d8 <__stack+0xd9>
#define POSITION_H_

struct position {
	int8_t x, y;
	bool operator == (const position &RHS) {
		return (this->x == RHS.x && this->y == RHS.y);
     9a8:	a5 eb       	ldi	r26, 0xB5	; 181
     9aa:	b1 e0       	ldi	r27, 0x01	; 1
     9ac:	3c 91       	ld	r19, X
     9ae:	e6 eb       	ldi	r30, 0xB6	; 182
     9b0:	f1 e0       	ldi	r31, 0x01	; 1
     9b2:	40 81       	ld	r20, Z
     9b4:	fe 01       	movw	r30, r28
     9b6:	33 96       	adiw	r30, 0x03	; 3
     9b8:	84 2d       	mov	r24, r4
     9ba:	95 2d       	mov	r25, r5
				if (allNodes[j]->pos == currentPos){
     9bc:	a1 91       	ld	r26, Z+
     9be:	b1 91       	ld	r27, Z+
     9c0:	2c 91       	ld	r18, X
     9c2:	23 13       	cpse	r18, r19
     9c4:	03 c1       	rjmp	.+518    	; 0xbcc <__stack+0x2cd>
     9c6:	11 96       	adiw	r26, 0x01	; 1
     9c8:	2c 91       	ld	r18, X
     9ca:	11 97       	sbiw	r26, 0x01	; 1
     9cc:	24 13       	cpse	r18, r20
     9ce:	fe c0       	rjmp	.+508    	; 0xbcc <__stack+0x2cd>
     9d0:	8d 01       	movw	r16, r26
					nextNode = allNodes[j];
					break;
				}
			}
			
			if (nextNode == NULL){ // new node
     9d2:	10 97       	sbiw	r26, 0x00	; 0
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <__stack+0xd9>
     9d6:	98 c0       	rjmp	.+304    	; 0xb08 <__stack+0x209>
     9d8:	8b e0       	ldi	r24, 0x0B	; 11
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <malloc>
     9e0:	8c 01       	movw	r16, r24
	node* connections[4]; // 0 = South (where mouse came from), 1 = West, 2 = North, 3 = East
	//node* parent;
	//float f, g, h;

	node(){
		this->visited = false;
     9e2:	dc 01       	movw	r26, r24
     9e4:	12 96       	adiw	r26, 0x02	; 2
     9e6:	1c 92       	st	X, r1
     9e8:	12 97       	sbiw	r26, 0x02	; 2
		for (int i=0; i<4; i++){
			this->connections[i] = NULL;
     9ea:	14 96       	adiw	r26, 0x04	; 4
     9ec:	1c 92       	st	X, r1
     9ee:	1e 92       	st	-X, r1
     9f0:	13 97       	sbiw	r26, 0x03	; 3
     9f2:	16 96       	adiw	r26, 0x06	; 6
     9f4:	1c 92       	st	X, r1
     9f6:	1e 92       	st	-X, r1
     9f8:	15 97       	sbiw	r26, 0x05	; 5
     9fa:	18 96       	adiw	r26, 0x08	; 8
     9fc:	1c 92       	st	X, r1
     9fe:	1e 92       	st	-X, r1
     a00:	17 97       	sbiw	r26, 0x07	; 7
     a02:	1a 96       	adiw	r26, 0x0a	; 10
     a04:	1c 92       	st	X, r1
     a06:	1e 92       	st	-X, r1
     a08:	19 97       	sbiw	r26, 0x09	; 9
     a0a:	80 91 b6 01 	lds	r24, 0x01B6
		}
	}
	
	void setPosition(position p){
		this->pos = p;
     a0e:	e5 eb       	ldi	r30, 0xB5	; 181
     a10:	f1 e0       	ldi	r31, 0x01	; 1
     a12:	90 81       	ld	r25, Z
     a14:	9c 93       	st	X, r25
     a16:	11 96       	adiw	r26, 0x01	; 1
     a18:	8c 93       	st	X, r24
				//play_frequency(1000, 100, 10);
				
				delete nextNode;
				nextNode = new node;
				nextNode->setPosition(currentPos);
				if (isLeft) nextNode->connections[currentDir.getPrevious()] = new node;
     a1a:	80 91 ba 01 	lds	r24, 0x01BA
     a1e:	88 23       	and	r24, r24
     a20:	01 f1       	breq	.+64     	; 0xa62 <__stack+0x163>
     a22:	8b e0       	ldi	r24, 0x0B	; 11
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <malloc>
     a2a:	fc 01       	movw	r30, r24
	node* connections[4]; // 0 = South (where mouse came from), 1 = West, 2 = North, 3 = East
	//node* parent;
	//float f, g, h;

	node(){
		this->visited = false;
     a2c:	12 82       	std	Z+2, r1	; 0x02
		for (int i=0; i<4; i++){
			this->connections[i] = NULL;
     a2e:	14 82       	std	Z+4, r1	; 0x04
     a30:	13 82       	std	Z+3, r1	; 0x03
     a32:	16 82       	std	Z+6, r1	; 0x06
     a34:	15 82       	std	Z+5, r1	; 0x05
     a36:	10 86       	std	Z+8, r1	; 0x08
     a38:	17 82       	std	Z+7, r1	; 0x07
     a3a:	12 86       	std	Z+10, r1	; 0x0a
     a3c:	11 86       	std	Z+9, r1	; 0x09
			faceInt = -1;
		}
		return static_cast<Direction>(faceInt + 1);
	}
	Direction getPrevious() {
		int faceInt = dir;
     a3e:	80 91 b7 01 	lds	r24, 0x01B7
     a42:	90 e0       	ldi	r25, 0x00	; 0
		if (faceInt <= 0) {
     a44:	18 16       	cp	r1, r24
     a46:	19 06       	cpc	r1, r25
     a48:	0c f0       	brlt	.+2      	; 0xa4c <__stack+0x14d>
			faceInt = 4;
     a4a:	84 e0       	ldi	r24, 0x04	; 4
		}
		return static_cast<Direction>(faceInt - 1);
     a4c:	81 50       	subi	r24, 0x01	; 1
     a4e:	a8 2f       	mov	r26, r24
     a50:	b0 e0       	ldi	r27, 0x00	; 0
     a52:	aa 0f       	add	r26, r26
     a54:	bb 1f       	adc	r27, r27
     a56:	a0 0f       	add	r26, r16
     a58:	b1 1f       	adc	r27, r17
     a5a:	14 96       	adiw	r26, 0x04	; 4
     a5c:	fc 93       	st	X, r31
     a5e:	ee 93       	st	-X, r30
     a60:	13 97       	sbiw	r26, 0x03	; 3
				if (isRight) nextNode->connections[currentDir.getNext()] = new node;
     a62:	80 91 b9 01 	lds	r24, 0x01B9
     a66:	88 23       	and	r24, r24
     a68:	01 f1       	breq	.+64     	; 0xaaa <__stack+0x1ab>
     a6a:	8b e0       	ldi	r24, 0x0B	; 11
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <malloc>
     a72:	fc 01       	movw	r30, r24
	node* connections[4]; // 0 = South (where mouse came from), 1 = West, 2 = North, 3 = East
	//node* parent;
	//float f, g, h;

	node(){
		this->visited = false;
     a74:	12 82       	std	Z+2, r1	; 0x02
		for (int i=0; i<4; i++){
			this->connections[i] = NULL;
     a76:	14 82       	std	Z+4, r1	; 0x04
     a78:	13 82       	std	Z+3, r1	; 0x03
     a7a:	16 82       	std	Z+6, r1	; 0x06
     a7c:	15 82       	std	Z+5, r1	; 0x05
     a7e:	10 86       	std	Z+8, r1	; 0x08
     a80:	17 82       	std	Z+7, r1	; 0x07
     a82:	12 86       	std	Z+10, r1	; 0x0a
     a84:	11 86       	std	Z+9, r1	; 0x09
			faceInt = 4;
		}
		this->dir = static_cast<Direction>(faceInt - 1);
	}
	Direction getNext() {
		int faceInt = dir;
     a86:	80 91 b7 01 	lds	r24, 0x01B7
     a8a:	90 e0       	ldi	r25, 0x00	; 0
		if (faceInt >= 3) {
     a8c:	83 30       	cpi	r24, 0x03	; 3
     a8e:	91 05       	cpc	r25, r1
     a90:	0c f0       	brlt	.+2      	; 0xa94 <__stack+0x195>
			faceInt = -1;
     a92:	8f ef       	ldi	r24, 0xFF	; 255
		}
		return static_cast<Direction>(faceInt + 1);
     a94:	8f 5f       	subi	r24, 0xFF	; 255
     a96:	a8 2f       	mov	r26, r24
     a98:	b0 e0       	ldi	r27, 0x00	; 0
     a9a:	aa 0f       	add	r26, r26
     a9c:	bb 1f       	adc	r27, r27
     a9e:	a0 0f       	add	r26, r16
     aa0:	b1 1f       	adc	r27, r17
     aa2:	14 96       	adiw	r26, 0x04	; 4
     aa4:	fc 93       	st	X, r31
     aa6:	ee 93       	st	-X, r30
     aa8:	13 97       	sbiw	r26, 0x03	; 3
				if (isForward) nextNode->connections[currentDir] = new node;
     aaa:	80 91 bb 01 	lds	r24, 0x01BB
     aae:	88 23       	and	r24, r24
     ab0:	c9 f0       	breq	.+50     	; 0xae4 <__stack+0x1e5>
     ab2:	8b e0       	ldi	r24, 0x0B	; 11
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <malloc>
     aba:	fc 01       	movw	r30, r24
	node* connections[4]; // 0 = South (where mouse came from), 1 = West, 2 = North, 3 = East
	//node* parent;
	//float f, g, h;

	node(){
		this->visited = false;
     abc:	12 82       	std	Z+2, r1	; 0x02
		for (int i=0; i<4; i++){
			this->connections[i] = NULL;
     abe:	14 82       	std	Z+4, r1	; 0x04
     ac0:	13 82       	std	Z+3, r1	; 0x03
     ac2:	16 82       	std	Z+6, r1	; 0x06
     ac4:	15 82       	std	Z+5, r1	; 0x05
     ac6:	10 86       	std	Z+8, r1	; 0x08
     ac8:	17 82       	std	Z+7, r1	; 0x07
     aca:	12 86       	std	Z+10, r1	; 0x0a
     acc:	11 86       	std	Z+9, r1	; 0x09
     ace:	a0 91 b7 01 	lds	r26, 0x01B7
     ad2:	b0 e0       	ldi	r27, 0x00	; 0
     ad4:	aa 0f       	add	r26, r26
     ad6:	bb 1f       	adc	r27, r27
     ad8:	a0 0f       	add	r26, r16
     ada:	b1 1f       	adc	r27, r17
     adc:	14 96       	adiw	r26, 0x04	; 4
     ade:	9c 93       	st	X, r25
     ae0:	8e 93       	st	-X, r24
     ae2:	13 97       	sbiw	r26, 0x03	; 3
				nextNode->visited = true;
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	d8 01       	movw	r26, r16
     ae8:	12 96       	adiw	r26, 0x02	; 2
     aea:	8c 93       	st	X, r24
				head++;
     aec:	bf ef       	ldi	r27, 0xFF	; 255
     aee:	cb 1a       	sub	r12, r27
     af0:	db 0a       	sbc	r13, r27
				allNodes[head] = nextNode;
     af2:	f6 01       	movw	r30, r12
     af4:	ee 0f       	add	r30, r30
     af6:	ff 1f       	adc	r31, r31
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	8c 0f       	add	r24, r28
     afe:	9d 1f       	adc	r25, r29
     b00:	e8 0f       	add	r30, r24
     b02:	f9 1f       	adc	r31, r25
     b04:	13 83       	std	Z+3, r17	; 0x03
     b06:	02 83       	std	Z+2, r16	; 0x02
			}
			
			delete currentNode->connections[i];
     b08:	ee 0c       	add	r14, r14
     b0a:	ff 1c       	adc	r15, r15
     b0c:	ea 0c       	add	r14, r10
     b0e:	fb 1c       	adc	r15, r11
}

void operator delete(void* obj) {
	free(obj);
     b10:	d7 01       	movw	r26, r14
     b12:	13 96       	adiw	r26, 0x03	; 3
     b14:	8d 91       	ld	r24, X+
     b16:	9c 91       	ld	r25, X
     b18:	14 97       	sbiw	r26, 0x04	; 4
     b1a:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <free>
			currentNode->connections[i] = nextNode;
     b1e:	f7 01       	movw	r30, r14
     b20:	14 83       	std	Z+4, r17	; 0x04
     b22:	03 83       	std	Z+3, r16	; 0x03
			faceInt = 4;
		}
		return static_cast<Direction>(faceInt - 1);
	}
	Direction getOpposite(){
		int faceInt = dir;
     b24:	80 91 b7 01 	lds	r24, 0x01B7
     b28:	28 2f       	mov	r18, r24
     b2a:	30 e0       	ldi	r19, 0x00	; 0
		if (faceInt >= 3) {
     b2c:	23 30       	cpi	r18, 0x03	; 3
     b2e:	31 05       	cpc	r19, r1
     b30:	34 f4       	brge	.+12     	; 0xb3e <__stack+0x23f>
			faceInt = -1;
		}
		Direction temp = static_cast<Direction>(faceInt + 1);
     b32:	8f 5f       	subi	r24, 0xFF	; 255
		faceInt = temp;
     b34:	90 e0       	ldi	r25, 0x00	; 0
		if (faceInt >= 3) {
     b36:	83 30       	cpi	r24, 0x03	; 3
     b38:	91 05       	cpc	r25, r1
     b3a:	1c f4       	brge	.+6      	; 0xb42 <__stack+0x243>
     b3c:	03 c0       	rjmp	.+6      	; 0xb44 <__stack+0x245>
		int faceInt = dir;
		if (faceInt >= 3) {
			faceInt = -1;
		}
		Direction temp = static_cast<Direction>(faceInt + 1);
		faceInt = temp;
     b3e:	84 2d       	mov	r24, r4
     b40:	01 c0       	rjmp	.+2      	; 0xb44 <__stack+0x245>
		if (faceInt >= 3) {
			faceInt = -1;
     b42:	8f ef       	ldi	r24, 0xFF	; 255
		}
		return static_cast<Direction>(faceInt + 1);
     b44:	8f 5f       	subi	r24, 0xFF	; 255
			delete nextNode->connections[currentDir.getOpposite()];
     b46:	e8 2f       	mov	r30, r24
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	ee 0f       	add	r30, r30
     b4c:	ff 1f       	adc	r31, r31
     b4e:	e0 0f       	add	r30, r16
     b50:	f1 1f       	adc	r31, r17
     b52:	83 81       	ldd	r24, Z+3	; 0x03
     b54:	94 81       	ldd	r25, Z+4	; 0x04
     b56:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <free>
			faceInt = 4;
		}
		return static_cast<Direction>(faceInt - 1);
	}
	Direction getOpposite(){
		int faceInt = dir;
     b5a:	40 91 b7 01 	lds	r20, 0x01B7
     b5e:	84 2f       	mov	r24, r20
     b60:	90 e0       	ldi	r25, 0x00	; 0
		if (faceInt >= 3) {
     b62:	03 97       	sbiw	r24, 0x03	; 3
     b64:	3c f4       	brge	.+14     	; 0xb74 <__stack+0x275>
			faceInt = -1;
		}
		Direction temp = static_cast<Direction>(faceInt + 1);
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	84 0f       	add	r24, r20
		faceInt = temp;
     b6a:	90 e0       	ldi	r25, 0x00	; 0
		if (faceInt >= 3) {
     b6c:	83 30       	cpi	r24, 0x03	; 3
     b6e:	91 05       	cpc	r25, r1
     b70:	1c f4       	brge	.+6      	; 0xb78 <__stack+0x279>
     b72:	03 c0       	rjmp	.+6      	; 0xb7a <__stack+0x27b>
		int faceInt = dir;
		if (faceInt >= 3) {
			faceInt = -1;
		}
		Direction temp = static_cast<Direction>(faceInt + 1);
		faceInt = temp;
     b74:	84 2d       	mov	r24, r4
     b76:	01 c0       	rjmp	.+2      	; 0xb7a <__stack+0x27b>
		if (faceInt >= 3) {
			faceInt = -1;
     b78:	8f ef       	ldi	r24, 0xFF	; 255
		}
		return static_cast<Direction>(faceInt + 1);
     b7a:	8f 5f       	subi	r24, 0xFF	; 255
			nextNode->connections[currentDir.getOpposite()] = currentNode;
     b7c:	e8 2f       	mov	r30, r24
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	ee 0f       	add	r30, r30
     b82:	ff 1f       	adc	r31, r31
     b84:	e0 0f       	add	r30, r16
     b86:	f1 1f       	adc	r31, r17
     b88:	b4 82       	std	Z+4, r11	; 0x04
     b8a:	a3 82       	std	Z+3, r10	; 0x03
			
			myNodeStack.push(nextNode, currentDir);
     b8c:	b8 01       	movw	r22, r16
     b8e:	c3 01       	movw	r24, r6
     b90:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN9NodeStack4pushEP4node9Direction>
	allNodes[head] = root;
	
	myNodeStack.push(root, NORTH);
	
	int i;
	while(!myNodeStack.isEmpty()){
     b94:	d3 01       	movw	r26, r6
     b96:	8d 91       	ld	r24, X+
     b98:	9c 91       	ld	r25, X
     b9a:	89 2b       	or	r24, r25
     b9c:	09 f0       	breq	.+2      	; 0xba0 <__stack+0x2a1>
     b9e:	a5 ce       	rjmp	.-694    	; 0x8ea <_Z7mapMazev+0xe4>
			faceInt = 4;
		}
		return static_cast<Direction>(faceInt - 1);
	}
	Direction getOpposite(){
		int faceInt = dir;
     ba0:	80 91 b7 01 	lds	r24, 0x01B7
     ba4:	28 2f       	mov	r18, r24
     ba6:	30 e0       	ldi	r19, 0x00	; 0
		if (faceInt >= 3) {
     ba8:	23 30       	cpi	r18, 0x03	; 3
     baa:	31 05       	cpc	r19, r1
     bac:	34 f4       	brge	.+12     	; 0xbba <__stack+0x2bb>
			faceInt = -1;
		}
		Direction temp = static_cast<Direction>(faceInt + 1);
     bae:	8f 5f       	subi	r24, 0xFF	; 255
		faceInt = temp;
     bb0:	90 e0       	ldi	r25, 0x00	; 0
		if (faceInt >= 3) {
     bb2:	83 30       	cpi	r24, 0x03	; 3
     bb4:	91 05       	cpc	r25, r1
     bb6:	24 f4       	brge	.+8      	; 0xbc0 <__stack+0x2c1>
     bb8:	05 c0       	rjmp	.+10     	; 0xbc4 <__stack+0x2c5>
		int faceInt = dir;
		if (faceInt >= 3) {
			faceInt = -1;
		}
		Direction temp = static_cast<Direction>(faceInt + 1);
		faceInt = temp;
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <__stack+0x2c5>
		if (faceInt >= 3) {
			faceInt = -1;
     bc0:	8f ef       	ldi	r24, 0xFF	; 255
     bc2:	9f ef       	ldi	r25, 0xFF	; 255
			
			myNodeStack.push(nextNode, currentDir);
		}
	}
	
	faceDir(currentDir.getOpposite());
     bc4:	8f 5f       	subi	r24, 0xFF	; 255
     bc6:	0e 94 18 02 	call	0x430	; 0x430 <_Z7faceDir9Direction>
     bca:	06 c0       	rjmp	.+12     	; 0xbd8 <__stack+0x2d9>
		} else {
			faceDir(i);
			followLine();
			
			node* nextNode = NULL;
			for (int j=0; j<=head; j++){
     bcc:	01 96       	adiw	r24, 0x01	; 1
     bce:	c8 16       	cp	r12, r24
     bd0:	d9 06       	cpc	r13, r25
     bd2:	0c f0       	brlt	.+2      	; 0xbd6 <__stack+0x2d7>
     bd4:	f3 ce       	rjmp	.-538    	; 0x9bc <__stack+0xbd>
     bd6:	00 cf       	rjmp	.-512    	; 0x9d8 <__stack+0xd9>
			myNodeStack.push(nextNode, currentDir);
		}
	}
	
	faceDir(currentDir.getOpposite());
}
     bd8:	ca 59       	subi	r28, 0x9A	; 154
     bda:	df 4f       	sbci	r29, 0xFF	; 255
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	de bf       	out	0x3e, r29	; 62
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	cd bf       	out	0x3d, r28	; 61
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	ff 90       	pop	r15
     bf0:	ef 90       	pop	r14
     bf2:	df 90       	pop	r13
     bf4:	cf 90       	pop	r12
     bf6:	bf 90       	pop	r11
     bf8:	af 90       	pop	r10
     bfa:	9f 90       	pop	r9
     bfc:	8f 90       	pop	r8
     bfe:	7f 90       	pop	r7
     c00:	6f 90       	pop	r6
     c02:	5f 90       	pop	r5
     c04:	4f 90       	pop	r4
     c06:	3f 90       	pop	r3
     c08:	2f 90       	pop	r2
     c0a:	08 95       	ret

00000c0c <main>:
	set_motors(0,0);
	
	saveCalibration();
}

int main(){
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
     c14:	2a 97       	sbiw	r28, 0x0a	; 10
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	f8 94       	cli
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	cd bf       	out	0x3d, r28	; 61
	initialise();
     c20:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_Z10initialisev>
	
	while(1){
		clear();
     c24:	0e 94 c2 0b 	call	0x1784	; 0x1784 <clear>
		print(" ");
     c28:	8b e3       	ldi	r24, 0x3B	; 59
     c2a:	91 e0       	ldi	r25, 0x01	; 1
     c2c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <print>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     c30:	0e 94 4d 07 	call	0xe9a	; 0xe9a <read_battery_millivolts_3pi>
		print_long(read_battery_millivolts());
     c34:	bc 01       	movw	r22, r24
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 36 0c 	call	0x186c	; 0x186c <print_long>
		print("mv");
     c3e:	8d e3       	ldi	r24, 0x3D	; 61
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <print>
		delay_ms(20);
     c46:	84 e1       	ldi	r24, 0x14	; 20
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <delay_ms>
		
		if (button_is_pressed(BUTTON_A)){
     c4e:	82 e0       	ldi	r24, 0x02	; 2
     c50:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <button_is_pressed>
     c54:	88 23       	and	r24, r24
     c56:	19 f0       	breq	.+6      	; 0xc5e <main+0x52>
			//calibrate();
			mapMaze();
     c58:	0e 94 03 04 	call	0x806	; 0x806 <_Z7mapMazev>
     c5c:	e3 cf       	rjmp	.-58     	; 0xc24 <main+0x18>
		} else if(button_is_pressed(BUTTON_B)){
     c5e:	80 e1       	ldi	r24, 0x10	; 16
     c60:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <button_is_pressed>
     c64:	81 11       	cpse	r24, r1
     c66:	de cf       	rjmp	.-68     	; 0xc24 <main+0x18>
			
		} else if(button_is_pressed(BUTTON_C)){
     c68:	80 e2       	ldi	r24, 0x20	; 32
     c6a:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <button_is_pressed>
     c6e:	88 23       	and	r24, r24
     c70:	c9 f2       	breq	.-78     	; 0xc24 <main+0x18>
			unsigned int sensors[5];
			while(1){
				unsigned int position = read_line(sensors, IR_EMITTERS_ON);
     c72:	61 e0       	ldi	r22, 0x01	; 1
     c74:	ce 01       	movw	r24, r28
     c76:	01 96       	adiw	r24, 0x01	; 1
     c78:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <read_line>
     c7c:	8c 01       	movw	r16, r24
				clear();
     c7e:	0e 94 c2 0b 	call	0x1784	; 0x1784 <clear>
				print_long(position);
     c82:	b8 01       	movw	r22, r16
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	0e 94 36 0c 	call	0x186c	; 0x186c <print_long>
				lcd_goto_xy(0,1);
     c8c:	61 e0       	ldi	r22, 0x01	; 1
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <lcd_goto_xy>
				display_readings(sensors);
     c94:	ce 01       	movw	r24, r28
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_Z16display_readingsPKj>
				delay_ms(100);
     c9c:	84 e6       	ldi	r24, 0x64	; 100
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <delay_ms>
     ca4:	e6 cf       	rjmp	.-52     	; 0xc72 <main+0x66>

00000ca6 <_GLOBAL__sub_I__Znwj>:
#include "node.h"
#include <stdbool.h>

struct NodeStack {
public:
	NodeStack() : top(0) {
     ca6:	10 92 b4 01 	sts	0x01B4, r1
     caa:	10 92 b3 01 	sts	0x01B3, r1
     cae:	08 95       	ret

00000cb0 <_GLOBAL__sub_D__Znwj>:
bool foundFinish;

cDirection currentDir;
position currentPos;

NodeStack myNodeStack;
     cb0:	83 eb       	ldi	r24, 0xB3	; 179
     cb2:	91 e0       	ldi	r25, 0x01	; 1
     cb4:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN9NodeStackD1Ev>
     cb8:	08 95       	ret

00000cba <_ZN15OrangutanAnalog7setModeEh>:
     cba:	88 23       	and	r24, r24
     cbc:	21 f4       	brne	.+8      	; 0xcc6 <_ZN15OrangutanAnalog7setModeEh+0xc>
     cbe:	80 91 7c 00 	lds	r24, 0x007C
     cc2:	8f 7d       	andi	r24, 0xDF	; 223
     cc4:	03 c0       	rjmp	.+6      	; 0xccc <_ZN15OrangutanAnalog7setModeEh+0x12>
     cc6:	80 91 7c 00 	lds	r24, 0x007C
     cca:	80 62       	ori	r24, 0x20	; 32
     ccc:	80 93 7c 00 	sts	0x007C, r24
     cd0:	08 95       	ret

00000cd2 <_ZN15OrangutanAnalog7getModeEv>:
     cd2:	80 91 7c 00 	lds	r24, 0x007C
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	25 e0       	ldi	r18, 0x05	; 5
     cda:	95 95       	asr	r25
     cdc:	87 95       	ror	r24
     cde:	2a 95       	dec	r18
     ce0:	e1 f7       	brne	.-8      	; 0xcda <_ZN15OrangutanAnalog7getModeEv+0x8>
     ce2:	81 70       	andi	r24, 0x01	; 1
     ce4:	08 95       	ret

00000ce6 <_ZN15OrangutanAnalog12isConvertingEv>:
     ce6:	80 91 7a 00 	lds	r24, 0x007A
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	36 e0       	ldi	r19, 0x06	; 6
     cee:	95 95       	asr	r25
     cf0:	87 95       	ror	r24
     cf2:	3a 95       	dec	r19
     cf4:	e1 f7       	brne	.-8      	; 0xcee <_ZN15OrangutanAnalog12isConvertingEv+0x8>
     cf6:	81 70       	andi	r24, 0x01	; 1
     cf8:	08 95       	ret

00000cfa <_ZN15OrangutanAnalog16conversionResultEv>:
     cfa:	0e 94 69 06 	call	0xcd2	; 0xcd2 <_ZN15OrangutanAnalog7getModeEv>
     cfe:	88 23       	and	r24, r24
     d00:	21 f0       	breq	.+8      	; 0xd0a <_ZN15OrangutanAnalog16conversionResultEv+0x10>
     d02:	20 91 79 00 	lds	r18, 0x0079
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <_ZN15OrangutanAnalog16conversionResultEv+0x18>
     d0a:	20 91 78 00 	lds	r18, 0x0078
     d0e:	30 91 79 00 	lds	r19, 0x0079
     d12:	c9 01       	movw	r24, r18
     d14:	08 95       	ret

00000d16 <_ZN15OrangutanAnalog15startConversionEhh>:
     d16:	80 32       	cpi	r24, 0x20	; 32
     d18:	b0 f4       	brcc	.+44     	; 0xd46 <_ZN15OrangutanAnalog15startConversionEhh+0x30>
     d1a:	97 e8       	ldi	r25, 0x87	; 135
     d1c:	90 93 7a 00 	sts	0x007A, r25
     d20:	90 91 7c 00 	lds	r25, 0x007C
     d24:	29 2f       	mov	r18, r25
     d26:	20 64       	ori	r18, 0x40	; 64
     d28:	66 23       	and	r22, r22
     d2a:	11 f0       	breq	.+4      	; 0xd30 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
     d2c:	90 6c       	ori	r25, 0xC0	; 192
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <_ZN15OrangutanAnalog15startConversionEhh+0x1e>
     d30:	92 2f       	mov	r25, r18
     d32:	9f 77       	andi	r25, 0x7F	; 127
     d34:	90 7e       	andi	r25, 0xE0	; 224
     d36:	98 2b       	or	r25, r24
     d38:	90 93 7c 00 	sts	0x007C, r25
     d3c:	80 91 7a 00 	lds	r24, 0x007A
     d40:	80 64       	ori	r24, 0x40	; 64
     d42:	80 93 7a 00 	sts	0x007A, r24
     d46:	08 95       	ret

00000d48 <_ZN15OrangutanAnalog11readAverageEhj>:
     d48:	a0 e0       	ldi	r26, 0x00	; 0
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	ea ea       	ldi	r30, 0xAA	; 170
     d4e:	f6 e0       	ldi	r31, 0x06	; 6
     d50:	0c 94 bf 14 	jmp	0x297e	; 0x297e <__prologue_saves__+0x14>
     d54:	6b 01       	movw	r12, r22
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN15OrangutanAnalog15startConversionEhh>
     d5c:	0e 94 73 06 	call	0xce6	; 0xce6 <_ZN15OrangutanAnalog12isConvertingEv>
     d60:	88 23       	and	r24, r24
     d62:	e1 f7       	brne	.-8      	; 0xd5c <_ZN15OrangutanAnalog11readAverageEhj+0x14>
     d64:	e6 01       	movw	r28, r12
     d66:	ee 24       	eor	r14, r14
     d68:	ff 24       	eor	r15, r15
     d6a:	87 01       	movw	r16, r14
     d6c:	80 91 7a 00 	lds	r24, 0x007A
     d70:	80 64       	ori	r24, 0x40	; 64
     d72:	80 93 7a 00 	sts	0x007A, r24
     d76:	0e 94 73 06 	call	0xce6	; 0xce6 <_ZN15OrangutanAnalog12isConvertingEv>
     d7a:	88 23       	and	r24, r24
     d7c:	e1 f7       	brne	.-8      	; 0xd76 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
     d7e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN15OrangutanAnalog16conversionResultEv>
     d82:	a0 e0       	ldi	r26, 0x00	; 0
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e8 0e       	add	r14, r24
     d88:	f9 1e       	adc	r15, r25
     d8a:	0a 1f       	adc	r16, r26
     d8c:	1b 1f       	adc	r17, r27
     d8e:	21 97       	sbiw	r28, 0x01	; 1
     d90:	69 f7       	brne	.-38     	; 0xd6c <_ZN15OrangutanAnalog11readAverageEhj+0x24>
     d92:	c6 01       	movw	r24, r12
     d94:	96 95       	lsr	r25
     d96:	87 95       	ror	r24
     d98:	20 e4       	ldi	r18, 0x40	; 64
     d9a:	c2 16       	cp	r12, r18
     d9c:	d1 04       	cpc	r13, r1
     d9e:	40 f4       	brcc	.+16     	; 0xdb0 <_ZN15OrangutanAnalog11readAverageEhj+0x68>
     da0:	8e 0d       	add	r24, r14
     da2:	9f 1d       	adc	r25, r15
     da4:	6c 2d       	mov	r22, r12
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	0e 94 32 14 	call	0x2864	; 0x2864 <__udivmodhi4>
     dac:	cb 01       	movw	r24, r22
     dae:	0d c0       	rjmp	.+26     	; 0xdca <_ZN15OrangutanAnalog11readAverageEhj+0x82>
     db0:	bc 01       	movw	r22, r24
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	6e 0d       	add	r22, r14
     db8:	7f 1d       	adc	r23, r15
     dba:	80 1f       	adc	r24, r16
     dbc:	91 1f       	adc	r25, r17
     dbe:	96 01       	movw	r18, r12
     dc0:	40 e0       	ldi	r20, 0x00	; 0
     dc2:	50 e0       	ldi	r21, 0x00	; 0
     dc4:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__udivmodsi4>
     dc8:	c9 01       	movw	r24, r18
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
     dce:	e8 e0       	ldi	r30, 0x08	; 8
     dd0:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__epilogue_restores__+0x14>

00000dd4 <_ZN15OrangutanAnalog12toMillivoltsEj>:
     dd4:	a3 e0       	ldi	r26, 0x03	; 3
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e0 ef       	ldi	r30, 0xF0	; 240
     dda:	f6 e0       	ldi	r31, 0x06	; 6
     ddc:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__prologue_saves__+0x1e>
     de0:	bc 01       	movw	r22, r24
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	20 91 00 01 	lds	r18, 0x0100
     dea:	30 91 01 01 	lds	r19, 0x0101
     dee:	40 e0       	ldi	r20, 0x00	; 0
     df0:	50 e0       	ldi	r21, 0x00	; 0
     df2:	0e 94 16 14 	call	0x282c	; 0x282c <__mulsi3>
     df6:	18 2f       	mov	r17, r24
     df8:	69 83       	std	Y+1, r22	; 0x01
     dfa:	7a 83       	std	Y+2, r23	; 0x02
     dfc:	9b 83       	std	Y+3, r25	; 0x03
     dfe:	0e 94 69 06 	call	0xcd2	; 0xcd2 <_ZN15OrangutanAnalog7getModeEv>
     e02:	69 81       	ldd	r22, Y+1	; 0x01
     e04:	7a 81       	ldd	r23, Y+2	; 0x02
     e06:	9b 81       	ldd	r25, Y+3	; 0x03
     e08:	88 23       	and	r24, r24
     e0a:	71 f0       	breq	.+28     	; 0xe28 <_ZN15OrangutanAnalog12toMillivoltsEj+0x54>
     e0c:	9b 01       	movw	r18, r22
     e0e:	41 2f       	mov	r20, r17
     e10:	59 2f       	mov	r21, r25
     e12:	ca 01       	movw	r24, r20
     e14:	b9 01       	movw	r22, r18
     e16:	61 58       	subi	r22, 0x81	; 129
     e18:	7f 4f       	sbci	r23, 0xFF	; 255
     e1a:	8f 4f       	sbci	r24, 0xFF	; 255
     e1c:	9f 4f       	sbci	r25, 0xFF	; 255
     e1e:	2f ef       	ldi	r18, 0xFF	; 255
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	40 e0       	ldi	r20, 0x00	; 0
     e24:	50 e0       	ldi	r21, 0x00	; 0
     e26:	0d c0       	rjmp	.+26     	; 0xe42 <_ZN15OrangutanAnalog12toMillivoltsEj+0x6e>
     e28:	9b 01       	movw	r18, r22
     e2a:	41 2f       	mov	r20, r17
     e2c:	59 2f       	mov	r21, r25
     e2e:	ca 01       	movw	r24, r20
     e30:	b9 01       	movw	r22, r18
     e32:	61 50       	subi	r22, 0x01	; 1
     e34:	7e 4f       	sbci	r23, 0xFE	; 254
     e36:	8f 4f       	sbci	r24, 0xFF	; 255
     e38:	9f 4f       	sbci	r25, 0xFF	; 255
     e3a:	2f ef       	ldi	r18, 0xFF	; 255
     e3c:	33 e0       	ldi	r19, 0x03	; 3
     e3e:	40 e0       	ldi	r20, 0x00	; 0
     e40:	50 e0       	ldi	r21, 0x00	; 0
     e42:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__udivmodsi4>
     e46:	c9 01       	movw	r24, r18
     e48:	23 96       	adiw	r28, 0x03	; 3
     e4a:	e3 e0       	ldi	r30, 0x03	; 3
     e4c:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__epilogue_restores__+0x1e>

00000e50 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
     e50:	0e 94 a4 06 	call	0xd48	; 0xd48 <_ZN15OrangutanAnalog11readAverageEhj>
     e54:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN15OrangutanAnalog12toMillivoltsEj>
     e58:	08 95       	ret

00000e5a <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
     e5a:	1f 93       	push	r17
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	0e 94 69 06 	call	0xcd2	; 0xcd2 <_ZN15OrangutanAnalog7getModeEv>
     e64:	18 2f       	mov	r17, r24
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	0e 94 5d 06 	call	0xcba	; 0xcba <_ZN15OrangutanAnalog7setModeEh>
     e6c:	86 e0       	ldi	r24, 0x06	; 6
     e6e:	6a e0       	ldi	r22, 0x0A	; 10
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
     e76:	ec 01       	movw	r28, r24
     e78:	81 2f       	mov	r24, r17
     e7a:	0e 94 5d 06 	call	0xcba	; 0xcba <_ZN15OrangutanAnalog7setModeEh>
     e7e:	9e 01       	movw	r18, r28
     e80:	22 0f       	add	r18, r18
     e82:	33 1f       	adc	r19, r19
     e84:	2c 0f       	add	r18, r28
     e86:	3d 1f       	adc	r19, r29
     e88:	2f 5f       	subi	r18, 0xFF	; 255
     e8a:	3f 4f       	sbci	r19, 0xFF	; 255
     e8c:	36 95       	lsr	r19
     e8e:	27 95       	ror	r18
     e90:	c9 01       	movw	r24, r18
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	08 95       	ret

00000e9a <read_battery_millivolts_3pi>:
     e9a:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
     e9e:	08 95       	ret

00000ea0 <_ZL16currentCharacterv>:
     ea0:	90 91 45 01 	lds	r25, 0x0145
     ea4:	e0 91 41 01 	lds	r30, 0x0141
     ea8:	f0 91 42 01 	lds	r31, 0x0142
     eac:	99 23       	and	r25, r25
     eae:	11 f0       	breq	.+4      	; 0xeb4 <_ZL16currentCharacterv+0x14>
     eb0:	84 91       	lpm	r24, Z
     eb2:	01 c0       	rjmp	.+2      	; 0xeb6 <_ZL16currentCharacterv+0x16>
     eb4:	80 81       	ld	r24, Z
     eb6:	28 2f       	mov	r18, r24
     eb8:	21 54       	subi	r18, 0x41	; 65
     eba:	2a 31       	cpi	r18, 0x1A	; 26
     ebc:	10 f4       	brcc	.+4      	; 0xec2 <_ZL16currentCharacterv+0x22>
     ebe:	80 5e       	subi	r24, 0xE0	; 224
     ec0:	08 95       	ret
     ec2:	80 32       	cpi	r24, 0x20	; 32
     ec4:	71 f4       	brne	.+28     	; 0xee2 <_ZL16currentCharacterv+0x42>
     ec6:	20 91 41 01 	lds	r18, 0x0141
     eca:	30 91 42 01 	lds	r19, 0x0142
     ece:	a9 01       	movw	r20, r18
     ed0:	4f 5f       	subi	r20, 0xFF	; 255
     ed2:	5f 4f       	sbci	r21, 0xFF	; 255
     ed4:	50 93 42 01 	sts	0x0142, r21
     ed8:	40 93 41 01 	sts	0x0141, r20
     edc:	21 15       	cp	r18, r1
     ede:	31 05       	cpc	r19, r1
     ee0:	09 f7       	brne	.-62     	; 0xea4 <_ZL16currentCharacterv+0x4>
     ee2:	08 95       	ret

00000ee4 <_ZL9getNumberv>:
     ee4:	ef 92       	push	r14
     ee6:	ff 92       	push	r15
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	0e 94 50 07 	call	0xea0	; 0xea0 <_ZL16currentCharacterv>
     ef0:	c0 e0       	ldi	r28, 0x00	; 0
     ef2:	d0 e0       	ldi	r29, 0x00	; 0
     ef4:	1b c0       	rjmp	.+54     	; 0xf2c <_ZL9getNumberv+0x48>
     ef6:	9e 01       	movw	r18, r28
     ef8:	22 0f       	add	r18, r18
     efa:	33 1f       	adc	r19, r19
     efc:	93 e0       	ldi	r25, 0x03	; 3
     efe:	cc 0f       	add	r28, r28
     f00:	dd 1f       	adc	r29, r29
     f02:	9a 95       	dec	r25
     f04:	e1 f7       	brne	.-8      	; 0xefe <_ZL9getNumberv+0x1a>
     f06:	c2 0f       	add	r28, r18
     f08:	d3 1f       	adc	r29, r19
     f0a:	99 27       	eor	r25, r25
     f0c:	87 fd       	sbrc	r24, 7
     f0e:	90 95       	com	r25
     f10:	c8 0f       	add	r28, r24
     f12:	d9 1f       	adc	r29, r25
     f14:	e0 97       	sbiw	r28, 0x30	; 48
     f16:	80 91 41 01 	lds	r24, 0x0141
     f1a:	90 91 42 01 	lds	r25, 0x0142
     f1e:	01 96       	adiw	r24, 0x01	; 1
     f20:	90 93 42 01 	sts	0x0142, r25
     f24:	80 93 41 01 	sts	0x0141, r24
     f28:	0e 94 50 07 	call	0xea0	; 0xea0 <_ZL16currentCharacterv>
     f2c:	98 2f       	mov	r25, r24
     f2e:	90 53       	subi	r25, 0x30	; 48
     f30:	9a 30       	cpi	r25, 0x0A	; 10
     f32:	08 f3       	brcs	.-62     	; 0xef6 <_ZL9getNumberv+0x12>
     f34:	ce 01       	movw	r24, r28
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	ff 90       	pop	r15
     f3c:	ef 90       	pop	r14
     f3e:	08 95       	ret

00000f40 <_ZN15OrangutanBuzzer5init2Ev>:
     f40:	10 92 6f 00 	sts	0x006F, r1
     f44:	83 e2       	ldi	r24, 0x23	; 35
     f46:	80 93 80 00 	sts	0x0080, r24
     f4a:	81 e1       	ldi	r24, 0x11	; 17
     f4c:	80 93 81 00 	sts	0x0081, r24
     f50:	10 92 82 00 	sts	0x0082, r1
     f54:	80 e1       	ldi	r24, 0x10	; 16
     f56:	97 e2       	ldi	r25, 0x27	; 39
     f58:	90 93 89 00 	sts	0x0089, r25
     f5c:	80 93 88 00 	sts	0x0088, r24
     f60:	10 92 8b 00 	sts	0x008B, r1
     f64:	10 92 8a 00 	sts	0x008A, r1
     f68:	22 9a       	sbi	0x04, 2	; 4
     f6a:	78 94       	sei
     f6c:	08 95       	ret

00000f6e <_ZN15OrangutanBuzzer4initEv>:
     f6e:	80 91 40 01 	lds	r24, 0x0140
     f72:	88 23       	and	r24, r24
     f74:	29 f4       	brne	.+10     	; 0xf80 <_ZN15OrangutanBuzzer4initEv+0x12>
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	80 93 40 01 	sts	0x0140, r24
     f7c:	0e 94 a0 07 	call	0xf40	; 0xf40 <_ZN15OrangutanBuzzer5init2Ev>
     f80:	08 95       	ret

00000f82 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
     f82:	a0 e0       	ldi	r26, 0x00	; 0
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e7 ec       	ldi	r30, 0xC7	; 199
     f88:	f7 e0       	ldi	r31, 0x07	; 7
     f8a:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__prologue_saves__+0xc>
     f8e:	8c 01       	movw	r16, r24
     f90:	5b 01       	movw	r10, r22
     f92:	e4 2e       	mov	r14, r20
     f94:	0e 94 b7 07 	call	0xf6e	; 0xf6e <_ZN15OrangutanBuzzer4initEv>
     f98:	10 92 02 01 	sts	0x0102, r1
     f9c:	17 ff       	sbrs	r17, 7
     f9e:	04 c0       	rjmp	.+8      	; 0xfa8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x26>
     fa0:	1f 77       	andi	r17, 0x7F	; 127
     fa2:	aa e0       	ldi	r26, 0x0A	; 10
     fa4:	fa 2e       	mov	r15, r26
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2a>
     fa8:	ff 24       	eor	r15, r15
     faa:	f3 94       	inc	r15
     fac:	c0 90 81 00 	lds	r12, 0x0081
     fb0:	dd 24       	eor	r13, r13
     fb2:	28 ef       	ldi	r18, 0xF8	; 248
     fb4:	c2 22       	and	r12, r18
     fb6:	dd 24       	eor	r13, r13
     fb8:	88 ec       	ldi	r24, 0xC8	; 200
     fba:	3f 2d       	mov	r19, r15
     fbc:	38 9f       	mul	r19, r24
     fbe:	c0 01       	movw	r24, r0
     fc0:	11 24       	eor	r1, r1
     fc2:	80 17       	cp	r24, r16
     fc4:	91 07       	cpc	r25, r17
     fc6:	d8 f4       	brcc	.+54     	; 0xffe <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x7c>
     fc8:	e8 01       	movw	r28, r16
     fca:	67 e2       	ldi	r22, 0x27	; 39
     fcc:	01 31       	cpi	r16, 0x11	; 17
     fce:	16 07       	cpc	r17, r22
     fd0:	10 f0       	brcs	.+4      	; 0xfd6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x54>
     fd2:	c0 e1       	ldi	r28, 0x10	; 16
     fd4:	d7 e2       	ldi	r29, 0x27	; 39
     fd6:	be 01       	movw	r22, r28
     fd8:	76 95       	lsr	r23
     fda:	67 95       	ror	r22
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	60 58       	subi	r22, 0x80	; 128
     fe2:	79 46       	sbci	r23, 0x69	; 105
     fe4:	87 46       	sbci	r24, 0x67	; 103
     fe6:	9f 4f       	sbci	r25, 0xFF	; 255
     fe8:	9e 01       	movw	r18, r28
     fea:	40 e0       	ldi	r20, 0x00	; 0
     fec:	50 e0       	ldi	r21, 0x00	; 0
     fee:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__udivmodsi4>
     ff2:	89 01       	movw	r16, r18
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	c8 2a       	or	r12, r24
     ffa:	d9 2a       	or	r13, r25
     ffc:	2c c0       	rjmp	.+88     	; 0x1056 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd4>
     ffe:	98 e2       	ldi	r25, 0x28	; 40
    1000:	f9 9e       	mul	r15, r25
    1002:	90 2d       	mov	r25, r0
    1004:	11 24       	eor	r1, r1
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	89 2e       	mov	r8, r25
    100a:	e4 01       	movw	r28, r8
    100c:	4e 01       	movw	r8, r28
    100e:	98 2e       	mov	r9, r24
    1010:	e4 01       	movw	r28, r8
    1012:	80 16       	cp	r8, r16
    1014:	91 06       	cpc	r9, r17
    1016:	08 f4       	brcc	.+2      	; 0x101a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x98>
    1018:	e8 01       	movw	r28, r16
    101a:	be 01       	movw	r22, r28
    101c:	76 95       	lsr	r23
    101e:	67 95       	ror	r22
    1020:	9e 01       	movw	r18, r28
    1022:	40 e0       	ldi	r20, 0x00	; 0
    1024:	50 e0       	ldi	r21, 0x00	; 0
    1026:	8f 2d       	mov	r24, r15
    1028:	8a 30       	cpi	r24, 0x0A	; 10
    102a:	39 f4       	brne	.+14     	; 0x103a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xb8>
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	60 5e       	subi	r22, 0xE0	; 224
    1032:	73 44       	sbci	r23, 0x43	; 67
    1034:	81 44       	sbci	r24, 0x41	; 65
    1036:	9f 4f       	sbci	r25, 0xFF	; 255
    1038:	06 c0       	rjmp	.+12     	; 0x1046 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc4>
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	60 53       	subi	r22, 0x30	; 48
    1040:	7d 4e       	sbci	r23, 0xED	; 237
    1042:	8c 4e       	sbci	r24, 0xEC	; 236
    1044:	9f 4f       	sbci	r25, 0xFF	; 255
    1046:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__udivmodsi4>
    104a:	89 01       	movw	r16, r18
    104c:	52 e0       	ldi	r21, 0x02	; 2
    104e:	85 2e       	mov	r8, r21
    1050:	91 2c       	mov	r9, r1
    1052:	c8 28       	or	r12, r8
    1054:	d9 28       	or	r13, r9
    1056:	2f 2d       	mov	r18, r15
    1058:	2a 30       	cpi	r18, 0x0A	; 10
    105a:	39 f4       	brne	.+14     	; 0x106a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xe8>
    105c:	ce 01       	movw	r24, r28
    105e:	05 96       	adiw	r24, 0x05	; 5
    1060:	6a e0       	ldi	r22, 0x0A	; 10
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	0e 94 32 14 	call	0x2864	; 0x2864 <__udivmodhi4>
    1068:	eb 01       	movw	r28, r22
    106a:	33 e0       	ldi	r19, 0x03	; 3
    106c:	c8 3e       	cpi	r28, 0xE8	; 232
    106e:	d3 07       	cpc	r29, r19
    1070:	79 f0       	breq	.+30     	; 0x1090 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x10e>
    1072:	be 01       	movw	r22, r28
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	95 01       	movw	r18, r10
    107a:	40 e0       	ldi	r20, 0x00	; 0
    107c:	50 e0       	ldi	r21, 0x00	; 0
    107e:	0e 94 16 14 	call	0x282c	; 0x282c <__mulsi3>
    1082:	28 ee       	ldi	r18, 0xE8	; 232
    1084:	33 e0       	ldi	r19, 0x03	; 3
    1086:	40 e0       	ldi	r20, 0x00	; 0
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <__divmodsi4>
    108e:	01 c0       	rjmp	.+2      	; 0x1092 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    1090:	95 01       	movw	r18, r10
    1092:	10 92 6f 00 	sts	0x006F, r1
    1096:	c0 92 81 00 	sts	0x0081, r12
    109a:	10 93 89 00 	sts	0x0089, r17
    109e:	00 93 88 00 	sts	0x0088, r16
    10a2:	40 91 88 00 	lds	r20, 0x0088
    10a6:	50 91 89 00 	lds	r21, 0x0089
    10aa:	6e 2d       	mov	r22, r14
    10ac:	60 31       	cpi	r22, 0x10	; 16
    10ae:	08 f0       	brcs	.+2      	; 0x10b2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    10b0:	6f e0       	ldi	r22, 0x0F	; 15
    10b2:	80 e1       	ldi	r24, 0x10	; 16
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	86 1b       	sub	r24, r22
    10b8:	91 09       	sbc	r25, r1
    10ba:	ba 01       	movw	r22, r20
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    10be:	76 95       	lsr	r23
    10c0:	67 95       	ror	r22
    10c2:	8a 95       	dec	r24
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    10c6:	70 93 8b 00 	sts	0x008B, r23
    10ca:	60 93 8a 00 	sts	0x008A, r22
    10ce:	30 93 48 01 	sts	0x0148, r19
    10d2:	20 93 47 01 	sts	0x0147, r18
    10d6:	86 b3       	in	r24, 0x16	; 22
    10d8:	8f ef       	ldi	r24, 0xFF	; 255
    10da:	86 bb       	out	0x16, r24	; 22
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	80 93 6f 00 	sts	0x006F, r24
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	ec e0       	ldi	r30, 0x0C	; 12
    10e8:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__epilogue_restores__+0xc>

000010ec <play_frequency>:
    10ec:	0e 94 c1 07 	call	0xf82	; 0xf82 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    10f0:	08 95       	ret

000010f2 <_ZN15OrangutanBuzzer8playNoteEhjh>:
    10f2:	9b 01       	movw	r18, r22
    10f4:	8f 3f       	cpi	r24, 0xFF	; 255
    10f6:	11 f0       	breq	.+4      	; 0x10fc <_ZN15OrangutanBuzzer8playNoteEhjh+0xa>
    10f8:	44 23       	and	r20, r20
    10fa:	29 f4       	brne	.+10     	; 0x1106 <_ZN15OrangutanBuzzer8playNoteEhjh+0x14>
    10fc:	88 ee       	ldi	r24, 0xE8	; 232
    10fe:	93 e0       	ldi	r25, 0x03	; 3
    1100:	b9 01       	movw	r22, r18
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	49 c0       	rjmp	.+146    	; 0x1198 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa6>
    1106:	81 31       	cpi	r24, 0x11	; 17
    1108:	30 f0       	brcs	.+12     	; 0x1116 <_ZN15OrangutanBuzzer8playNoteEhjh+0x24>
    110a:	58 2f       	mov	r21, r24
    110c:	50 51       	subi	r21, 0x10	; 16
    110e:	50 36       	cpi	r21, 0x60	; 96
    1110:	18 f0       	brcs	.+6      	; 0x1118 <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
    1112:	5f e5       	ldi	r21, 0x5F	; 95
    1114:	01 c0       	rjmp	.+2      	; 0x1118 <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
    1116:	50 e0       	ldi	r21, 0x00	; 0
    1118:	85 2f       	mov	r24, r21
    111a:	6c e0       	ldi	r22, 0x0C	; 12
    111c:	0e 94 26 14 	call	0x284c	; 0x284c <__udivmodqi4>
    1120:	a8 2f       	mov	r26, r24
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e4 ef       	ldi	r30, 0xF4	; 244
    1126:	ff ef       	ldi	r31, 0xFF	; 255
    1128:	ae 9f       	mul	r26, r30
    112a:	b0 01       	movw	r22, r0
    112c:	af 9f       	mul	r26, r31
    112e:	70 0d       	add	r23, r0
    1130:	be 9f       	mul	r27, r30
    1132:	70 0d       	add	r23, r0
    1134:	11 24       	eor	r1, r1
    1136:	65 0f       	add	r22, r21
    1138:	71 1d       	adc	r23, r1
    113a:	6c 30       	cpi	r22, 0x0C	; 12
    113c:	71 05       	cpc	r23, r1
    113e:	40 f4       	brcc	.+16     	; 0x1150 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5e>
    1140:	fb 01       	movw	r30, r22
    1142:	ee 0f       	add	r30, r30
    1144:	ff 1f       	adc	r31, r31
    1146:	e4 5f       	subi	r30, 0xF4	; 244
    1148:	fe 4f       	sbci	r31, 0xFE	; 254
    114a:	60 81       	ld	r22, Z
    114c:	71 81       	ldd	r23, Z+1	; 0x01
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	70 e0       	ldi	r23, 0x00	; 0
    1154:	87 30       	cpi	r24, 0x07	; 7
    1156:	81 f0       	breq	.+32     	; 0x1178 <_ZN15OrangutanBuzzer8playNoteEhjh+0x86>
    1158:	08 2e       	mov	r0, r24
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <_ZN15OrangutanBuzzer8playNoteEhjh+0x6e>
    115c:	66 0f       	add	r22, r22
    115e:	77 1f       	adc	r23, r23
    1160:	0a 94       	dec	r0
    1162:	e2 f7       	brpl	.-8      	; 0x115c <_ZN15OrangutanBuzzer8playNoteEhjh+0x6a>
    1164:	82 30       	cpi	r24, 0x02	; 2
    1166:	28 f0       	brcs	.+10     	; 0x1172 <_ZN15OrangutanBuzzer8playNoteEhjh+0x80>
    1168:	cb 01       	movw	r24, r22
    116a:	05 96       	adiw	r24, 0x05	; 5
    116c:	6a e0       	ldi	r22, 0x0A	; 10
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	0c c0       	rjmp	.+24     	; 0x118a <_ZN15OrangutanBuzzer8playNoteEhjh+0x98>
    1172:	60 50       	subi	r22, 0x00	; 0
    1174:	70 48       	sbci	r23, 0x80	; 128
    1176:	0b c0       	rjmp	.+22     	; 0x118e <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    1178:	cb 01       	movw	r24, r22
    117a:	b6 e0       	ldi	r27, 0x06	; 6
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	ba 95       	dec	r27
    1182:	e1 f7       	brne	.-8      	; 0x117c <_ZN15OrangutanBuzzer8playNoteEhjh+0x8a>
    1184:	02 96       	adiw	r24, 0x02	; 2
    1186:	65 e0       	ldi	r22, 0x05	; 5
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	0e 94 32 14 	call	0x2864	; 0x2864 <__udivmodhi4>
    118e:	40 31       	cpi	r20, 0x10	; 16
    1190:	08 f0       	brcs	.+2      	; 0x1194 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa2>
    1192:	4f e0       	ldi	r20, 0x0F	; 15
    1194:	cb 01       	movw	r24, r22
    1196:	b9 01       	movw	r22, r18
    1198:	0e 94 c1 07 	call	0xf82	; 0xf82 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    119c:	08 95       	ret

0000119e <_ZL8nextNotev>:
    119e:	a0 e0       	ldi	r26, 0x00	; 0
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e5 ed       	ldi	r30, 0xD5	; 213
    11a4:	f8 e0       	ldi	r31, 0x08	; 8
    11a6:	0c 94 ba 14 	jmp	0x2974	; 0x2974 <__prologue_saves__+0xa>
    11aa:	b0 90 03 01 	lds	r11, 0x0103
    11ae:	80 91 43 01 	lds	r24, 0x0143
    11b2:	88 23       	and	r24, r24
    11b4:	61 f0       	breq	.+24     	; 0x11ce <_ZL8nextNotev+0x30>
    11b6:	60 91 44 01 	lds	r22, 0x0144
    11ba:	66 23       	and	r22, r22
    11bc:	41 f0       	breq	.+16     	; 0x11ce <_ZL8nextNotev+0x30>
    11be:	8f ef       	ldi	r24, 0xFF	; 255
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	40 e0       	ldi	r20, 0x00	; 0
    11c4:	0e 94 79 08 	call	0x10f2	; 0x10f2 <_ZN15OrangutanBuzzer8playNoteEhjh>
    11c8:	10 92 44 01 	sts	0x0144, r1
    11cc:	34 c1       	rjmp	.+616    	; 0x1436 <_ZL8nextNotev+0x298>
    11ce:	c0 ec       	ldi	r28, 0xC0	; 192
    11d0:	dd e5       	ldi	r29, 0x5D	; 93
    11d2:	aa 24       	eor	r10, r10
    11d4:	a3 94       	inc	r10
    11d6:	14 e0       	ldi	r17, 0x04	; 4
    11d8:	71 2e       	mov	r7, r17
    11da:	00 ed       	ldi	r16, 0xD0	; 208
    11dc:	17 e0       	ldi	r17, 0x07	; 7
    11de:	b4 e0       	ldi	r27, 0x04	; 4
    11e0:	eb 2e       	mov	r14, r27
    11e2:	f1 2c       	mov	r15, r1
    11e4:	a4 ef       	ldi	r26, 0xF4	; 244
    11e6:	ca 2e       	mov	r12, r26
    11e8:	a1 e0       	ldi	r26, 0x01	; 1
    11ea:	da 2e       	mov	r13, r26
    11ec:	ff e0       	ldi	r31, 0x0F	; 15
    11ee:	8f 2e       	mov	r8, r31
    11f0:	91 2c       	mov	r9, r1
    11f2:	0e 94 50 07 	call	0xea0	; 0xea0 <_ZL16currentCharacterv>
    11f6:	20 91 41 01 	lds	r18, 0x0141
    11fa:	30 91 42 01 	lds	r19, 0x0142
    11fe:	2f 5f       	subi	r18, 0xFF	; 255
    1200:	3f 4f       	sbci	r19, 0xFF	; 255
    1202:	30 93 42 01 	sts	0x0142, r19
    1206:	20 93 41 01 	sts	0x0141, r18
    120a:	86 36       	cpi	r24, 0x66	; 102
    120c:	f1 f1       	breq	.+124    	; 0x128a <_ZL8nextNotev+0xec>
    120e:	87 36       	cpi	r24, 0x67	; 103
    1210:	cc f4       	brge	.+50     	; 0x1244 <_ZL8nextNotev+0xa6>
    1212:	82 36       	cpi	r24, 0x62	; 98
    1214:	09 f4       	brne	.+2      	; 0x1218 <_ZL8nextNotev+0x7a>
    1216:	af c0       	rjmp	.+350    	; 0x1376 <_ZL8nextNotev+0x1d8>
    1218:	83 36       	cpi	r24, 0x63	; 99
    121a:	7c f4       	brge	.+30     	; 0x123a <_ZL8nextNotev+0x9c>
    121c:	8e 33       	cpi	r24, 0x3E	; 62
    121e:	49 f1       	breq	.+82     	; 0x1272 <_ZL8nextNotev+0xd4>
    1220:	8f 33       	cpi	r24, 0x3F	; 63
    1222:	3c f4       	brge	.+14     	; 0x1232 <_ZL8nextNotev+0x94>
    1224:	81 32       	cpi	r24, 0x21	; 33
    1226:	09 f4       	brne	.+2      	; 0x122a <_ZL8nextNotev+0x8c>
    1228:	87 c0       	rjmp	.+270    	; 0x1338 <_ZL8nextNotev+0x19a>
    122a:	8c 33       	cpi	r24, 0x3C	; 60
    122c:	09 f0       	breq	.+2      	; 0x1230 <_ZL8nextNotev+0x92>
    122e:	9b c0       	rjmp	.+310    	; 0x1366 <_ZL8nextNotev+0x1c8>
    1230:	22 c0       	rjmp	.+68     	; 0x1276 <_ZL8nextNotev+0xd8>
    1232:	81 36       	cpi	r24, 0x61	; 97
    1234:	09 f0       	breq	.+2      	; 0x1238 <_ZL8nextNotev+0x9a>
    1236:	97 c0       	rjmp	.+302    	; 0x1366 <_ZL8nextNotev+0x1c8>
    1238:	9b c0       	rjmp	.+310    	; 0x1370 <_ZL8nextNotev+0x1d2>
    123a:	84 36       	cpi	r24, 0x64	; 100
    123c:	01 f1       	breq	.+64     	; 0x127e <_ZL8nextNotev+0xe0>
    123e:	85 36       	cpi	r24, 0x65	; 101
    1240:	0c f5       	brge	.+66     	; 0x1284 <_ZL8nextNotev+0xe6>
    1242:	1b c0       	rjmp	.+54     	; 0x127a <_ZL8nextNotev+0xdc>
    1244:	8f 36       	cpi	r24, 0x6F	; 111
    1246:	09 f4       	brne	.+2      	; 0x124a <_ZL8nextNotev+0xac>
    1248:	47 c0       	rjmp	.+142    	; 0x12d8 <_ZL8nextNotev+0x13a>
    124a:	80 37       	cpi	r24, 0x70	; 112
    124c:	44 f4       	brge	.+16     	; 0x125e <_ZL8nextNotev+0xc0>
    124e:	8c 36       	cpi	r24, 0x6C	; 108
    1250:	11 f1       	breq	.+68     	; 0x1296 <_ZL8nextNotev+0xf8>
    1252:	8d 36       	cpi	r24, 0x6D	; 109
    1254:	61 f1       	breq	.+88     	; 0x12ae <_ZL8nextNotev+0x110>
    1256:	87 36       	cpi	r24, 0x67	; 103
    1258:	09 f0       	breq	.+2      	; 0x125c <_ZL8nextNotev+0xbe>
    125a:	85 c0       	rjmp	.+266    	; 0x1366 <_ZL8nextNotev+0x1c8>
    125c:	19 c0       	rjmp	.+50     	; 0x1290 <_ZL8nextNotev+0xf2>
    125e:	84 37       	cpi	r24, 0x74	; 116
    1260:	09 f4       	brne	.+2      	; 0x1264 <_ZL8nextNotev+0xc6>
    1262:	44 c0       	rjmp	.+136    	; 0x12ec <_ZL8nextNotev+0x14e>
    1264:	86 37       	cpi	r24, 0x76	; 118
    1266:	09 f4       	brne	.+2      	; 0x126a <_ZL8nextNotev+0xcc>
    1268:	60 c0       	rjmp	.+192    	; 0x132a <_ZL8nextNotev+0x18c>
    126a:	82 37       	cpi	r24, 0x72	; 114
    126c:	09 f0       	breq	.+2      	; 0x1270 <_ZL8nextNotev+0xd2>
    126e:	7b c0       	rjmp	.+246    	; 0x1366 <_ZL8nextNotev+0x1c8>
    1270:	39 c0       	rjmp	.+114    	; 0x12e4 <_ZL8nextNotev+0x146>
    1272:	b3 94       	inc	r11
    1274:	be cf       	rjmp	.-132    	; 0x11f2 <_ZL8nextNotev+0x54>
    1276:	ba 94       	dec	r11
    1278:	bc cf       	rjmp	.-136    	; 0x11f2 <_ZL8nextNotev+0x54>
    127a:	ee 24       	eor	r14, r14
    127c:	35 c0       	rjmp	.+106    	; 0x12e8 <_ZL8nextNotev+0x14a>
    127e:	ee 24       	eor	r14, r14
    1280:	82 e0       	ldi	r24, 0x02	; 2
    1282:	7b c0       	rjmp	.+246    	; 0x137a <_ZL8nextNotev+0x1dc>
    1284:	ee 24       	eor	r14, r14
    1286:	84 e0       	ldi	r24, 0x04	; 4
    1288:	78 c0       	rjmp	.+240    	; 0x137a <_ZL8nextNotev+0x1dc>
    128a:	ee 24       	eor	r14, r14
    128c:	85 e0       	ldi	r24, 0x05	; 5
    128e:	75 c0       	rjmp	.+234    	; 0x137a <_ZL8nextNotev+0x1dc>
    1290:	ee 24       	eor	r14, r14
    1292:	87 e0       	ldi	r24, 0x07	; 7
    1294:	72 c0       	rjmp	.+228    	; 0x137a <_ZL8nextNotev+0x1dc>
    1296:	0e 94 72 07 	call	0xee4	; 0xee4 <_ZL9getNumberv>
    129a:	bc 01       	movw	r22, r24
    129c:	90 93 05 01 	sts	0x0105, r25
    12a0:	80 93 04 01 	sts	0x0104, r24
    12a4:	80 91 06 01 	lds	r24, 0x0106
    12a8:	90 91 07 01 	lds	r25, 0x0107
    12ac:	37 c0       	rjmp	.+110    	; 0x131c <_ZL8nextNotev+0x17e>
    12ae:	0e 94 50 07 	call	0xea0	; 0xea0 <_ZL16currentCharacterv>
    12b2:	8c 36       	cpi	r24, 0x6C	; 108
    12b4:	19 f4       	brne	.+6      	; 0x12bc <_ZL8nextNotev+0x11e>
    12b6:	10 92 43 01 	sts	0x0143, r1
    12ba:	04 c0       	rjmp	.+8      	; 0x12c4 <_ZL8nextNotev+0x126>
    12bc:	a0 92 43 01 	sts	0x0143, r10
    12c0:	10 92 44 01 	sts	0x0144, r1
    12c4:	80 91 41 01 	lds	r24, 0x0141
    12c8:	90 91 42 01 	lds	r25, 0x0142
    12cc:	01 96       	adiw	r24, 0x01	; 1
    12ce:	90 93 42 01 	sts	0x0142, r25
    12d2:	80 93 41 01 	sts	0x0141, r24
    12d6:	8d cf       	rjmp	.-230    	; 0x11f2 <_ZL8nextNotev+0x54>
    12d8:	0e 94 72 07 	call	0xee4	; 0xee4 <_ZL9getNumberv>
    12dc:	b8 2e       	mov	r11, r24
    12de:	80 93 03 01 	sts	0x0103, r24
    12e2:	87 cf       	rjmp	.-242    	; 0x11f2 <_ZL8nextNotev+0x54>
    12e4:	ee 24       	eor	r14, r14
    12e6:	e3 94       	inc	r14
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	47 c0       	rjmp	.+142    	; 0x137a <_ZL8nextNotev+0x1dc>
    12ec:	0e 94 72 07 	call	0xee4	; 0xee4 <_ZL9getNumberv>
    12f0:	bc 01       	movw	r22, r24
    12f2:	ce 01       	movw	r24, r28
    12f4:	0e 94 32 14 	call	0x2864	; 0x2864 <__udivmodhi4>
    12f8:	cb 01       	movw	r24, r22
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	53 e0       	ldi	r21, 0x03	; 3
    1300:	66 0f       	add	r22, r22
    1302:	77 1f       	adc	r23, r23
    1304:	5a 95       	dec	r21
    1306:	e1 f7       	brne	.-8      	; 0x1300 <_ZL8nextNotev+0x162>
    1308:	86 0f       	add	r24, r22
    130a:	97 1f       	adc	r25, r23
    130c:	90 93 07 01 	sts	0x0107, r25
    1310:	80 93 06 01 	sts	0x0106, r24
    1314:	60 91 04 01 	lds	r22, 0x0104
    1318:	70 91 05 01 	lds	r23, 0x0105
    131c:	0e 94 32 14 	call	0x2864	; 0x2864 <__udivmodhi4>
    1320:	70 93 09 01 	sts	0x0109, r23
    1324:	60 93 08 01 	sts	0x0108, r22
    1328:	64 cf       	rjmp	.-312    	; 0x11f2 <_ZL8nextNotev+0x54>
    132a:	0e 94 72 07 	call	0xee4	; 0xee4 <_ZL9getNumberv>
    132e:	90 93 0b 01 	sts	0x010B, r25
    1332:	80 93 0a 01 	sts	0x010A, r24
    1336:	5d cf       	rjmp	.-326    	; 0x11f2 <_ZL8nextNotev+0x54>
    1338:	70 92 03 01 	sts	0x0103, r7
    133c:	10 93 07 01 	sts	0x0107, r17
    1340:	00 93 06 01 	sts	0x0106, r16
    1344:	f0 92 05 01 	sts	0x0105, r15
    1348:	e0 92 04 01 	sts	0x0104, r14
    134c:	d0 92 09 01 	sts	0x0109, r13
    1350:	c0 92 08 01 	sts	0x0108, r12
    1354:	90 92 0b 01 	sts	0x010B, r9
    1358:	80 92 0a 01 	sts	0x010A, r8
    135c:	10 92 43 01 	sts	0x0143, r1
    1360:	44 e0       	ldi	r20, 0x04	; 4
    1362:	b4 2e       	mov	r11, r20
    1364:	46 cf       	rjmp	.-372    	; 0x11f2 <_ZL8nextNotev+0x54>
    1366:	10 92 42 01 	sts	0x0142, r1
    136a:	10 92 41 01 	sts	0x0141, r1
    136e:	63 c0       	rjmp	.+198    	; 0x1436 <_ZL8nextNotev+0x298>
    1370:	ee 24       	eor	r14, r14
    1372:	89 e0       	ldi	r24, 0x09	; 9
    1374:	02 c0       	rjmp	.+4      	; 0x137a <_ZL8nextNotev+0x1dc>
    1376:	ee 24       	eor	r14, r14
    1378:	8b e0       	ldi	r24, 0x0B	; 11
    137a:	9c e0       	ldi	r25, 0x0C	; 12
    137c:	b9 9e       	mul	r11, r25
    137e:	b0 2c       	mov	r11, r0
    1380:	11 24       	eor	r1, r1
    1382:	b8 0e       	add	r11, r24
    1384:	0e 94 50 07 	call	0xea0	; 0xea0 <_ZL16currentCharacterv>
    1388:	8b 32       	cpi	r24, 0x2B	; 43
    138a:	11 f0       	breq	.+4      	; 0x1390 <_ZL8nextNotev+0x1f2>
    138c:	83 32       	cpi	r24, 0x23	; 35
    138e:	b9 f4       	brne	.+46     	; 0x13be <_ZL8nextNotev+0x220>
    1390:	80 91 41 01 	lds	r24, 0x0141
    1394:	90 91 42 01 	lds	r25, 0x0142
    1398:	01 96       	adiw	r24, 0x01	; 1
    139a:	90 93 42 01 	sts	0x0142, r25
    139e:	80 93 41 01 	sts	0x0141, r24
    13a2:	b3 94       	inc	r11
    13a4:	ef cf       	rjmp	.-34     	; 0x1384 <_ZL8nextNotev+0x1e6>
    13a6:	80 91 41 01 	lds	r24, 0x0141
    13aa:	90 91 42 01 	lds	r25, 0x0142
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	90 93 42 01 	sts	0x0142, r25
    13b4:	80 93 41 01 	sts	0x0141, r24
    13b8:	ba 94       	dec	r11
    13ba:	0e 94 50 07 	call	0xea0	; 0xea0 <_ZL16currentCharacterv>
    13be:	8d 32       	cpi	r24, 0x2D	; 45
    13c0:	91 f3       	breq	.-28     	; 0x13a6 <_ZL8nextNotev+0x208>
    13c2:	c0 91 08 01 	lds	r28, 0x0108
    13c6:	d0 91 09 01 	lds	r29, 0x0109
    13ca:	81 53       	subi	r24, 0x31	; 49
    13cc:	88 30       	cpi	r24, 0x08	; 8
    13ce:	58 f4       	brcc	.+22     	; 0x13e6 <_ZL8nextNotev+0x248>
    13d0:	c0 91 06 01 	lds	r28, 0x0106
    13d4:	d0 91 07 01 	lds	r29, 0x0107
    13d8:	0e 94 72 07 	call	0xee4	; 0xee4 <_ZL9getNumberv>
    13dc:	bc 01       	movw	r22, r24
    13de:	ce 01       	movw	r24, r28
    13e0:	0e 94 32 14 	call	0x2864	; 0x2864 <__udivmodhi4>
    13e4:	eb 01       	movw	r28, r22
    13e6:	8e 01       	movw	r16, r28
    13e8:	0b c0       	rjmp	.+22     	; 0x1400 <_ZL8nextNotev+0x262>
    13ea:	80 91 41 01 	lds	r24, 0x0141
    13ee:	90 91 42 01 	lds	r25, 0x0142
    13f2:	01 96       	adiw	r24, 0x01	; 1
    13f4:	90 93 42 01 	sts	0x0142, r25
    13f8:	80 93 41 01 	sts	0x0141, r24
    13fc:	c0 0f       	add	r28, r16
    13fe:	d1 1f       	adc	r29, r17
    1400:	16 95       	lsr	r17
    1402:	07 95       	ror	r16
    1404:	0e 94 50 07 	call	0xea0	; 0xea0 <_ZL16currentCharacterv>
    1408:	8e 32       	cpi	r24, 0x2E	; 46
    140a:	79 f3       	breq	.-34     	; 0x13ea <_ZL8nextNotev+0x24c>
    140c:	80 91 43 01 	lds	r24, 0x0143
    1410:	88 23       	and	r24, r24
    1412:	39 f0       	breq	.+14     	; 0x1422 <_ZL8nextNotev+0x284>
    1414:	ce 01       	movw	r24, r28
    1416:	96 95       	lsr	r25
    1418:	87 95       	ror	r24
    141a:	80 93 44 01 	sts	0x0144, r24
    141e:	c8 1b       	sub	r28, r24
    1420:	d1 09       	sbc	r29, r1
    1422:	ee 20       	and	r14, r14
    1424:	11 f0       	breq	.+4      	; 0x142a <_ZL8nextNotev+0x28c>
    1426:	bb 24       	eor	r11, r11
    1428:	ba 94       	dec	r11
    142a:	8b 2d       	mov	r24, r11
    142c:	be 01       	movw	r22, r28
    142e:	40 91 0a 01 	lds	r20, 0x010A
    1432:	0e 94 79 08 	call	0x10f2	; 0x10f2 <_ZN15OrangutanBuzzer8playNoteEhjh>
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	ed e0       	ldi	r30, 0x0D	; 13
    143c:	0c 94 d6 14 	jmp	0x29ac	; 0x29ac <__epilogue_restores__+0xa>

00001440 <__vector_13>:
    1440:	1f 92       	push	r1
    1442:	0f 92       	push	r0
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	0f 92       	push	r0
    1448:	11 24       	eor	r1, r1
    144a:	2f 93       	push	r18
    144c:	3f 93       	push	r19
    144e:	4f 93       	push	r20
    1450:	5f 93       	push	r21
    1452:	6f 93       	push	r22
    1454:	7f 93       	push	r23
    1456:	8f 93       	push	r24
    1458:	9f 93       	push	r25
    145a:	af 93       	push	r26
    145c:	bf 93       	push	r27
    145e:	ef 93       	push	r30
    1460:	ff 93       	push	r31
    1462:	80 91 47 01 	lds	r24, 0x0147
    1466:	90 91 48 01 	lds	r25, 0x0148
    146a:	9c 01       	movw	r18, r24
    146c:	21 50       	subi	r18, 0x01	; 1
    146e:	30 40       	sbci	r19, 0x00	; 0
    1470:	30 93 48 01 	sts	0x0148, r19
    1474:	20 93 47 01 	sts	0x0147, r18
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	11 f5       	brne	.+68     	; 0x14c0 <__vector_13+0x80>
    147c:	10 92 6f 00 	sts	0x006F, r1
    1480:	78 94       	sei
    1482:	80 91 81 00 	lds	r24, 0x0081
    1486:	88 7f       	andi	r24, 0xF8	; 248
    1488:	81 60       	ori	r24, 0x01	; 1
    148a:	80 93 81 00 	sts	0x0081, r24
    148e:	80 e1       	ldi	r24, 0x10	; 16
    1490:	97 e2       	ldi	r25, 0x27	; 39
    1492:	90 93 89 00 	sts	0x0089, r25
    1496:	80 93 88 00 	sts	0x0088, r24
    149a:	10 92 8b 00 	sts	0x008B, r1
    149e:	10 92 8a 00 	sts	0x008A, r1
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	80 93 02 01 	sts	0x0102, r24
    14a8:	80 91 41 01 	lds	r24, 0x0141
    14ac:	90 91 42 01 	lds	r25, 0x0142
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	31 f0       	breq	.+12     	; 0x14c0 <__vector_13+0x80>
    14b4:	80 91 46 01 	lds	r24, 0x0146
    14b8:	88 23       	and	r24, r24
    14ba:	11 f4       	brne	.+4      	; 0x14c0 <__vector_13+0x80>
    14bc:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZL8nextNotev>
    14c0:	ff 91       	pop	r31
    14c2:	ef 91       	pop	r30
    14c4:	bf 91       	pop	r27
    14c6:	af 91       	pop	r26
    14c8:	9f 91       	pop	r25
    14ca:	8f 91       	pop	r24
    14cc:	7f 91       	pop	r23
    14ce:	6f 91       	pop	r22
    14d0:	5f 91       	pop	r21
    14d2:	4f 91       	pop	r20
    14d4:	3f 91       	pop	r19
    14d6:	2f 91       	pop	r18
    14d8:	0f 90       	pop	r0
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	0f 90       	pop	r0
    14de:	1f 90       	pop	r1
    14e0:	18 95       	reti

000014e2 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    14e2:	10 92 6f 00 	sts	0x006F, r1
    14e6:	90 93 42 01 	sts	0x0142, r25
    14ea:	80 93 41 01 	sts	0x0141, r24
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	80 93 45 01 	sts	0x0145, r24
    14f4:	10 92 44 01 	sts	0x0144, r1
    14f8:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZL8nextNotev>
    14fc:	08 95       	ret

000014fe <play_from_program_space>:
    14fe:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    1502:	08 95       	ret

00001504 <delayMicroseconds.clone.0>:
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	6f 93       	push	r22
    150a:	64 e0       	ldi	r22, 0x04	; 4
    150c:	6a 95       	dec	r22
    150e:	f1 f7       	brne	.-4      	; 0x150c <delayMicroseconds.clone.0+0x8>
    1510:	6f 91       	pop	r22
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	c9 f7       	brne	.-14     	; 0x1508 <delayMicroseconds.clone.0+0x4>
    1516:	08 95       	ret

00001518 <_ZN12OrangutanLCD8busyWaitEv>:
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	1a b1       	in	r17, 0x0a	; 10
    1522:	57 98       	cbi	0x0a, 7	; 10
    1524:	5a 98       	cbi	0x0b, 2	; 11
    1526:	28 9a       	sbi	0x05, 0	; 5
    1528:	c0 e0       	ldi	r28, 0x00	; 0
    152a:	d0 e0       	ldi	r29, 0x00	; 0
    152c:	0e 94 82 0a 	call	0x1504	; 0x1504 <delayMicroseconds.clone.0>
    1530:	5c 9a       	sbi	0x0b, 4	; 11
    1532:	0e 94 82 0a 	call	0x1504	; 0x1504 <delayMicroseconds.clone.0>
    1536:	09 b1       	in	r16, 0x09	; 9
    1538:	5c 98       	cbi	0x0b, 4	; 11
    153a:	0e 94 82 0a 	call	0x1504	; 0x1504 <delayMicroseconds.clone.0>
    153e:	5c 9a       	sbi	0x0b, 4	; 11
    1540:	0e 94 82 0a 	call	0x1504	; 0x1504 <delayMicroseconds.clone.0>
    1544:	5c 98       	cbi	0x0b, 4	; 11
    1546:	07 ff       	sbrs	r16, 7
    1548:	11 c0       	rjmp	.+34     	; 0x156c <_ZN12OrangutanLCD8busyWaitEv+0x54>
    154a:	24 96       	adiw	r28, 0x04	; 4
    154c:	9e 01       	movw	r18, r28
    154e:	40 e0       	ldi	r20, 0x00	; 0
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	80 91 4d 01 	lds	r24, 0x014D
    1556:	90 91 4e 01 	lds	r25, 0x014E
    155a:	a0 91 4f 01 	lds	r26, 0x014F
    155e:	b0 91 50 01 	lds	r27, 0x0150
    1562:	28 17       	cp	r18, r24
    1564:	39 07       	cpc	r19, r25
    1566:	4a 07       	cpc	r20, r26
    1568:	5b 07       	cpc	r21, r27
    156a:	00 f3       	brcs	.-64     	; 0x152c <_ZN12OrangutanLCD8busyWaitEv+0x14>
    156c:	1a b9       	out	0x0a, r17	; 10
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	1f 91       	pop	r17
    1574:	0f 91       	pop	r16
    1576:	08 95       	ret

00001578 <_ZN12OrangutanLCD8sendDataEh>:
    1578:	65 b1       	in	r22, 0x05	; 5
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	ac 01       	movw	r20, r24
    157e:	41 70       	andi	r20, 0x01	; 1
    1580:	50 70       	andi	r21, 0x00	; 0
    1582:	44 0f       	add	r20, r20
    1584:	55 1f       	adc	r21, r21
    1586:	9c 01       	movw	r18, r24
    1588:	26 70       	andi	r18, 0x06	; 6
    158a:	30 70       	andi	r19, 0x00	; 0
    158c:	53 e0       	ldi	r21, 0x03	; 3
    158e:	22 0f       	add	r18, r18
    1590:	33 1f       	adc	r19, r19
    1592:	5a 95       	dec	r21
    1594:	e1 f7       	brne	.-8      	; 0x158e <_ZN12OrangutanLCD8sendDataEh+0x16>
    1596:	24 2b       	or	r18, r20
    1598:	6d 7c       	andi	r22, 0xCD	; 205
    159a:	26 2b       	or	r18, r22
    159c:	25 b9       	out	0x05, r18	; 5
    159e:	2b b1       	in	r18, 0x0b	; 11
    15a0:	88 70       	andi	r24, 0x08	; 8
    15a2:	90 70       	andi	r25, 0x00	; 0
    15a4:	34 e0       	ldi	r19, 0x04	; 4
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	3a 95       	dec	r19
    15ac:	e1 f7       	brne	.-8      	; 0x15a6 <_ZN12OrangutanLCD8sendDataEh+0x2e>
    15ae:	2f 77       	andi	r18, 0x7F	; 127
    15b0:	28 2b       	or	r18, r24
    15b2:	2b b9       	out	0x0b, r18	; 11
    15b4:	5c 9a       	sbi	0x0b, 4	; 11
    15b6:	0e 94 82 0a 	call	0x1504	; 0x1504 <delayMicroseconds.clone.0>
    15ba:	5c 98       	cbi	0x0b, 4	; 11
    15bc:	0e 94 82 0a 	call	0x1504	; 0x1504 <delayMicroseconds.clone.0>
    15c0:	08 95       	ret

000015c2 <_ZN12OrangutanLCD4sendEhhh>:
    15c2:	a2 e0       	ldi	r26, 0x02	; 2
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e7 ee       	ldi	r30, 0xE7	; 231
    15c8:	fa e0       	ldi	r31, 0x0A	; 10
    15ca:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <__prologue_saves__+0x16>
    15ce:	18 2f       	mov	r17, r24
    15d0:	4a 83       	std	Y+2, r20	; 0x02
    15d2:	69 83       	std	Y+1, r22	; 0x01
    15d4:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN12OrangutanLCD4initEv>
    15d8:	0e 94 8c 0a 	call	0x1518	; 0x1518 <_ZN12OrangutanLCD8busyWaitEv>
    15dc:	f4 b0       	in	r15, 0x04	; 4
    15de:	05 b1       	in	r16, 0x05	; 5
    15e0:	da b0       	in	r13, 0x0a	; 10
    15e2:	eb b0       	in	r14, 0x0b	; 11
    15e4:	28 98       	cbi	0x05, 0	; 5
    15e6:	69 81       	ldd	r22, Y+1	; 0x01
    15e8:	4a 81       	ldd	r20, Y+2	; 0x02
    15ea:	66 23       	and	r22, r22
    15ec:	11 f0       	breq	.+4      	; 0x15f2 <_ZN12OrangutanLCD4sendEhhh+0x30>
    15ee:	5a 9a       	sbi	0x0b, 2	; 11
    15f0:	01 c0       	rjmp	.+2      	; 0x15f4 <_ZN12OrangutanLCD4sendEhhh+0x32>
    15f2:	5a 98       	cbi	0x0b, 2	; 11
    15f4:	84 b1       	in	r24, 0x04	; 4
    15f6:	82 63       	ori	r24, 0x32	; 50
    15f8:	84 b9       	out	0x04, r24	; 4
    15fa:	57 9a       	sbi	0x0a, 7	; 10
    15fc:	41 30       	cpi	r20, 0x01	; 1
    15fe:	29 f0       	breq	.+10     	; 0x160a <_ZN12OrangutanLCD4sendEhhh+0x48>
    1600:	81 2f       	mov	r24, r17
    1602:	82 95       	swap	r24
    1604:	8f 70       	andi	r24, 0x0F	; 15
    1606:	0e 94 bc 0a 	call	0x1578	; 0x1578 <_ZN12OrangutanLCD8sendDataEh>
    160a:	81 2f       	mov	r24, r17
    160c:	8f 70       	andi	r24, 0x0F	; 15
    160e:	0e 94 bc 0a 	call	0x1578	; 0x1578 <_ZN12OrangutanLCD8sendDataEh>
    1612:	da b8       	out	0x0a, r13	; 10
    1614:	eb b8       	out	0x0b, r14	; 11
    1616:	f4 b8       	out	0x04, r15	; 4
    1618:	05 b9       	out	0x05, r16	; 5
    161a:	22 96       	adiw	r28, 0x02	; 2
    161c:	e7 e0       	ldi	r30, 0x07	; 7
    161e:	0c 94 dc 14 	jmp	0x29b8	; 0x29b8 <__epilogue_restores__+0x16>

00001622 <_ZN12OrangutanLCD8send_cmdEh>:
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	42 e0       	ldi	r20, 0x02	; 2
    1626:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <_ZN12OrangutanLCD4sendEhhh>
    162a:	08 95       	ret

0000162c <_ZN12OrangutanLCD9send_dataEh>:
    162c:	61 e0       	ldi	r22, 0x01	; 1
    162e:	42 e0       	ldi	r20, 0x02	; 2
    1630:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <_ZN12OrangutanLCD4sendEhhh>
    1634:	08 95       	ret

00001636 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    1636:	ef 92       	push	r14
    1638:	ff 92       	push	r15
    163a:	1f 93       	push	r17
    163c:	df 93       	push	r29
    163e:	cf 93       	push	r28
    1640:	0f 92       	push	r0
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	66 0f       	add	r22, r22
    1648:	66 0f       	add	r22, r22
    164a:	66 0f       	add	r22, r22
    164c:	48 2f       	mov	r20, r24
    164e:	59 2f       	mov	r21, r25
    1650:	7a 01       	movw	r14, r20
    1652:	10 e0       	ldi	r17, 0x00	; 0
    1654:	81 2f       	mov	r24, r17
    1656:	86 0f       	add	r24, r22
    1658:	80 64       	ori	r24, 0x40	; 64
    165a:	69 83       	std	Y+1, r22	; 0x01
    165c:	0e 94 11 0b 	call	0x1622	; 0x1622 <_ZN12OrangutanLCD8send_cmdEh>
    1660:	f7 01       	movw	r30, r14
    1662:	84 91       	lpm	r24, Z
    1664:	0e 94 16 0b 	call	0x162c	; 0x162c <_ZN12OrangutanLCD9send_dataEh>
    1668:	1f 5f       	subi	r17, 0xFF	; 255
    166a:	08 94       	sec
    166c:	e1 1c       	adc	r14, r1
    166e:	f1 1c       	adc	r15, r1
    1670:	69 81       	ldd	r22, Y+1	; 0x01
    1672:	18 30       	cpi	r17, 0x08	; 8
    1674:	79 f7       	brne	.-34     	; 0x1654 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x1e>
    1676:	0f 90       	pop	r0
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	1f 91       	pop	r17
    167e:	ff 90       	pop	r15
    1680:	ef 90       	pop	r14
    1682:	08 95       	ret

00001684 <lcd_load_custom_character>:
    1684:	0e 94 1b 0b 	call	0x1636	; 0x1636 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    1688:	08 95       	ret

0000168a <print_character>:
    168a:	0e 94 16 0b 	call	0x162c	; 0x162c <_ZN12OrangutanLCD9send_dataEh>
    168e:	08 95       	ret

00001690 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    1690:	60 e0       	ldi	r22, 0x00	; 0
    1692:	41 e0       	ldi	r20, 0x01	; 1
    1694:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <_ZN12OrangutanLCD4sendEhhh>
    1698:	08 95       	ret

0000169a <_ZN12OrangutanLCD5init2Ev>:
    169a:	80 e1       	ldi	r24, 0x10	; 16
    169c:	97 e2       	ldi	r25, 0x27	; 39
    169e:	a0 e0       	ldi	r26, 0x00	; 0
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	80 93 4d 01 	sts	0x014D, r24
    16a6:	90 93 4e 01 	sts	0x014E, r25
    16aa:	a0 93 4f 01 	sts	0x014F, r26
    16ae:	b0 93 50 01 	sts	0x0150, r27
    16b2:	52 9a       	sbi	0x0a, 2	; 10
    16b4:	20 9a       	sbi	0x04, 0	; 4
    16b6:	54 9a       	sbi	0x0a, 4	; 10
    16b8:	8e e1       	ldi	r24, 0x1E	; 30
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <delay_ms>
    16c0:	83 e0       	ldi	r24, 0x03	; 3
    16c2:	0e 94 48 0b 	call	0x1690	; 0x1690 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    16c6:	86 e0       	ldi	r24, 0x06	; 6
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <delay_ms>
    16ce:	83 e0       	ldi	r24, 0x03	; 3
    16d0:	0e 94 48 0b 	call	0x1690	; 0x1690 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    16d4:	82 e0       	ldi	r24, 0x02	; 2
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <delay_ms>
    16dc:	83 e0       	ldi	r24, 0x03	; 3
    16de:	0e 94 48 0b 	call	0x1690	; 0x1690 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    16e2:	82 e0       	ldi	r24, 0x02	; 2
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <delay_ms>
    16ea:	82 e0       	ldi	r24, 0x02	; 2
    16ec:	0e 94 48 0b 	call	0x1690	; 0x1690 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    16f0:	82 e0       	ldi	r24, 0x02	; 2
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <delay_ms>
    16f8:	88 e2       	ldi	r24, 0x28	; 40
    16fa:	0e 94 11 0b 	call	0x1622	; 0x1622 <_ZN12OrangutanLCD8send_cmdEh>
    16fe:	88 e0       	ldi	r24, 0x08	; 8
    1700:	0e 94 11 0b 	call	0x1622	; 0x1622 <_ZN12OrangutanLCD8send_cmdEh>
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	0e 94 11 0b 	call	0x1622	; 0x1622 <_ZN12OrangutanLCD8send_cmdEh>
    170a:	86 e0       	ldi	r24, 0x06	; 6
    170c:	0e 94 11 0b 	call	0x1622	; 0x1622 <_ZN12OrangutanLCD8send_cmdEh>
    1710:	8c e0       	ldi	r24, 0x0C	; 12
    1712:	0e 94 11 0b 	call	0x1622	; 0x1622 <_ZN12OrangutanLCD8send_cmdEh>
    1716:	08 95       	ret

00001718 <_ZN12OrangutanLCD4initEv>:
    1718:	80 91 51 01 	lds	r24, 0x0151
    171c:	88 23       	and	r24, r24
    171e:	29 f4       	brne	.+10     	; 0x172a <_ZN12OrangutanLCD4initEv+0x12>
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	80 93 51 01 	sts	0x0151, r24
    1726:	0e 94 4d 0b 	call	0x169a	; 0x169a <_ZN12OrangutanLCD5init2Ev>
    172a:	08 95       	ret

0000172c <_ZN12OrangutanLCD5clearEv>:
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	0e 94 11 0b 	call	0x1622	; 0x1622 <_ZN12OrangutanLCD8send_cmdEh>
    1732:	80 91 49 01 	lds	r24, 0x0149
    1736:	90 91 4a 01 	lds	r25, 0x014A
    173a:	00 97       	sbiw	r24, 0x00	; 0
    173c:	11 f1       	breq	.+68     	; 0x1782 <_ZN12OrangutanLCD5clearEv+0x56>
    173e:	a0 e0       	ldi	r26, 0x00	; 0
    1740:	b0 e2       	ldi	r27, 0x20	; 32
    1742:	08 c0       	rjmp	.+16     	; 0x1754 <_ZN12OrangutanLCD5clearEv+0x28>
    1744:	e0 91 49 01 	lds	r30, 0x0149
    1748:	f0 91 4a 01 	lds	r31, 0x014A
    174c:	e2 0f       	add	r30, r18
    174e:	f3 1f       	adc	r31, r19
    1750:	b0 83       	st	Z, r27
    1752:	af 5f       	subi	r26, 0xFF	; 255
    1754:	2a 2f       	mov	r18, r26
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	80 91 24 01 	lds	r24, 0x0124
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	60 91 25 01 	lds	r22, 0x0125
    1764:	70 e0       	ldi	r23, 0x00	; 0
    1766:	86 9f       	mul	r24, r22
    1768:	a0 01       	movw	r20, r0
    176a:	87 9f       	mul	r24, r23
    176c:	50 0d       	add	r21, r0
    176e:	96 9f       	mul	r25, r22
    1770:	50 0d       	add	r21, r0
    1772:	11 24       	eor	r1, r1
    1774:	24 17       	cp	r18, r20
    1776:	35 07       	cpc	r19, r21
    1778:	2c f3       	brlt	.-54     	; 0x1744 <_ZN12OrangutanLCD5clearEv+0x18>
    177a:	10 92 4c 01 	sts	0x014C, r1
    177e:	10 92 4b 01 	sts	0x014B, r1
    1782:	08 95       	ret

00001784 <clear>:
    1784:	0e 94 96 0b 	call	0x172c	; 0x172c <_ZN12OrangutanLCD5clearEv>
    1788:	08 95       	ret

0000178a <_ZN12OrangutanLCD5printEPKc>:
    178a:	ef 92       	push	r14
    178c:	ff 92       	push	r15
    178e:	cf 93       	push	r28
    1790:	df 93       	push	r29
    1792:	e8 2e       	mov	r14, r24
    1794:	e7 01       	movw	r28, r14
    1796:	7e 01       	movw	r14, r28
    1798:	f9 2e       	mov	r15, r25
    179a:	e7 01       	movw	r28, r14
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <_ZN12OrangutanLCD5printEPKc+0x18>
    179e:	0e 94 16 0b 	call	0x162c	; 0x162c <_ZN12OrangutanLCD9send_dataEh>
    17a2:	89 91       	ld	r24, Y+
    17a4:	88 23       	and	r24, r24
    17a6:	d9 f7       	brne	.-10     	; 0x179e <_ZN12OrangutanLCD5printEPKc+0x14>
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	ff 90       	pop	r15
    17ae:	ef 90       	pop	r14
    17b0:	08 95       	ret

000017b2 <print>:
    17b2:	0e 94 c5 0b 	call	0x178a	; 0x178a <_ZN12OrangutanLCD5printEPKc>
    17b6:	08 95       	ret

000017b8 <_ZN12OrangutanLCD5printEm>:
    17b8:	aa e0       	ldi	r26, 0x0A	; 10
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e2 ee       	ldi	r30, 0xE2	; 226
    17be:	fb e0       	ldi	r31, 0x0B	; 11
    17c0:	0c 94 bd 14 	jmp	0x297a	; 0x297a <__prologue_saves__+0x10>
    17c4:	9b 01       	movw	r18, r22
    17c6:	ac 01       	movw	r20, r24
    17c8:	1a e0       	ldi	r17, 0x0A	; 10
    17ca:	ea e0       	ldi	r30, 0x0A	; 10
    17cc:	ce 2e       	mov	r12, r30
    17ce:	d1 2c       	mov	r13, r1
    17d0:	e1 2c       	mov	r14, r1
    17d2:	f1 2c       	mov	r15, r1
    17d4:	5e 01       	movw	r10, r28
    17d6:	08 94       	sec
    17d8:	a1 1c       	adc	r10, r1
    17da:	b1 1c       	adc	r11, r1
    17dc:	02 2f       	mov	r16, r18
    17de:	ca 01       	movw	r24, r20
    17e0:	b9 01       	movw	r22, r18
    17e2:	a7 01       	movw	r20, r14
    17e4:	96 01       	movw	r18, r12
    17e6:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__udivmodsi4>
    17ea:	11 50       	subi	r17, 0x01	; 1
    17ec:	f5 01       	movw	r30, r10
    17ee:	e1 0f       	add	r30, r17
    17f0:	f1 1d       	adc	r31, r1
    17f2:	00 5d       	subi	r16, 0xD0	; 208
    17f4:	92 2f       	mov	r25, r18
    17f6:	99 0f       	add	r25, r25
    17f8:	89 2f       	mov	r24, r25
    17fa:	88 0f       	add	r24, r24
    17fc:	88 0f       	add	r24, r24
    17fe:	89 0f       	add	r24, r25
    1800:	08 1b       	sub	r16, r24
    1802:	00 83       	st	Z, r16
    1804:	21 15       	cp	r18, r1
    1806:	31 05       	cpc	r19, r1
    1808:	41 05       	cpc	r20, r1
    180a:	51 05       	cpc	r21, r1
    180c:	39 f7       	brne	.-50     	; 0x17dc <_ZN12OrangutanLCD5printEm+0x24>
    180e:	08 c0       	rjmp	.+16     	; 0x1820 <_ZN12OrangutanLCD5printEm+0x68>
    1810:	f6 01       	movw	r30, r12
    1812:	e1 0f       	add	r30, r17
    1814:	f1 1d       	adc	r31, r1
    1816:	80 81       	ld	r24, Z
    1818:	0e 94 16 0b 	call	0x162c	; 0x162c <_ZN12OrangutanLCD9send_dataEh>
    181c:	1f 5f       	subi	r17, 0xFF	; 255
    181e:	04 c0       	rjmp	.+8      	; 0x1828 <_ZN12OrangutanLCD5printEm+0x70>
    1820:	6e 01       	movw	r12, r28
    1822:	08 94       	sec
    1824:	c1 1c       	adc	r12, r1
    1826:	d1 1c       	adc	r13, r1
    1828:	1a 30       	cpi	r17, 0x0A	; 10
    182a:	90 f3       	brcs	.-28     	; 0x1810 <_ZN12OrangutanLCD5printEm+0x58>
    182c:	2a 96       	adiw	r28, 0x0a	; 10
    182e:	ea e0       	ldi	r30, 0x0A	; 10
    1830:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <__epilogue_restores__+0x10>

00001834 <_ZN12OrangutanLCD5printEl>:
    1834:	ef 92       	push	r14
    1836:	ff 92       	push	r15
    1838:	0f 93       	push	r16
    183a:	1f 93       	push	r17
    183c:	7b 01       	movw	r14, r22
    183e:	8c 01       	movw	r16, r24
    1840:	97 ff       	sbrs	r25, 7
    1842:	0b c0       	rjmp	.+22     	; 0x185a <_ZN12OrangutanLCD5printEl+0x26>
    1844:	10 95       	com	r17
    1846:	00 95       	com	r16
    1848:	f0 94       	com	r15
    184a:	e0 94       	com	r14
    184c:	e1 1c       	adc	r14, r1
    184e:	f1 1c       	adc	r15, r1
    1850:	01 1d       	adc	r16, r1
    1852:	11 1d       	adc	r17, r1
    1854:	8d e2       	ldi	r24, 0x2D	; 45
    1856:	0e 94 16 0b 	call	0x162c	; 0x162c <_ZN12OrangutanLCD9send_dataEh>
    185a:	c8 01       	movw	r24, r16
    185c:	b7 01       	movw	r22, r14
    185e:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <_ZN12OrangutanLCD5printEm>
    1862:	1f 91       	pop	r17
    1864:	0f 91       	pop	r16
    1866:	ff 90       	pop	r15
    1868:	ef 90       	pop	r14
    186a:	08 95       	ret

0000186c <print_long>:
    186c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <_ZN12OrangutanLCD5printEl>
    1870:	08 95       	ret

00001872 <_ZN12OrangutanLCD6gotoXYEhh>:
    1872:	a5 e0       	ldi	r26, 0x05	; 5
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	ef e3       	ldi	r30, 0x3F	; 63
    1878:	fc e0       	ldi	r31, 0x0C	; 12
    187a:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__prologue_saves__+0x1e>
    187e:	18 2f       	mov	r17, r24
    1880:	80 e8       	ldi	r24, 0x80	; 128
    1882:	89 83       	std	Y+1, r24	; 0x01
    1884:	80 ec       	ldi	r24, 0xC0	; 192
    1886:	8a 83       	std	Y+2, r24	; 0x02
    1888:	84 e9       	ldi	r24, 0x94	; 148
    188a:	8b 83       	std	Y+3, r24	; 0x03
    188c:	84 ed       	ldi	r24, 0xD4	; 212
    188e:	8c 83       	std	Y+4, r24	; 0x04
    1890:	fe 01       	movw	r30, r28
    1892:	e6 0f       	add	r30, r22
    1894:	f1 1d       	adc	r31, r1
    1896:	81 81       	ldd	r24, Z+1	; 0x01
    1898:	81 0f       	add	r24, r17
    189a:	6d 83       	std	Y+5, r22	; 0x05
    189c:	0e 94 11 0b 	call	0x1622	; 0x1622 <_ZN12OrangutanLCD8send_cmdEh>
    18a0:	10 93 4c 01 	sts	0x014C, r17
    18a4:	6d 81       	ldd	r22, Y+5	; 0x05
    18a6:	60 93 4b 01 	sts	0x014B, r22
    18aa:	25 96       	adiw	r28, 0x05	; 5
    18ac:	e3 e0       	ldi	r30, 0x03	; 3
    18ae:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__epilogue_restores__+0x1e>

000018b2 <lcd_goto_xy>:
    18b2:	0e 94 39 0c 	call	0x1872	; 0x1872 <_ZN12OrangutanLCD6gotoXYEhh>
    18b6:	08 95       	ret

000018b8 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    18b8:	fc 01       	movw	r30, r24
    18ba:	11 82       	std	Z+1, r1	; 0x01
    18bc:	10 82       	st	Z, r1
    18be:	13 82       	std	Z+3, r1	; 0x03
    18c0:	12 82       	std	Z+2, r1	; 0x02
    18c2:	15 82       	std	Z+5, r1	; 0x05
    18c4:	14 82       	std	Z+4, r1	; 0x04
    18c6:	16 82       	std	Z+6, r1	; 0x06
    18c8:	68 30       	cpi	r22, 0x08	; 8
    18ca:	68 f4       	brcc	.+26     	; 0x18e6 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    18cc:	89 e2       	ldi	r24, 0x29	; 41
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	91 83       	std	Z+1, r25	; 0x01
    18d2:	80 83       	st	Z, r24
    18d4:	8b e2       	ldi	r24, 0x2B	; 43
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	93 83       	std	Z+3, r25	; 0x03
    18da:	82 83       	std	Z+2, r24	; 0x02
    18dc:	8a e2       	ldi	r24, 0x2A	; 42
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	95 83       	std	Z+5, r25	; 0x05
    18e2:	84 83       	std	Z+4, r24	; 0x04
    18e4:	11 c0       	rjmp	.+34     	; 0x1908 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x50>
    18e6:	6e 30       	cpi	r22, 0x0E	; 14
    18e8:	c0 f4       	brcc	.+48     	; 0x191a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x62>
    18ea:	83 e2       	ldi	r24, 0x23	; 35
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	91 83       	std	Z+1, r25	; 0x01
    18f0:	80 83       	st	Z, r24
    18f2:	85 e2       	ldi	r24, 0x25	; 37
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	93 83       	std	Z+3, r25	; 0x03
    18f8:	82 83       	std	Z+2, r24	; 0x02
    18fa:	84 e2       	ldi	r24, 0x24	; 36
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	95 83       	std	Z+5, r25	; 0x05
    1900:	84 83       	std	Z+4, r24	; 0x04
    1902:	70 e0       	ldi	r23, 0x00	; 0
    1904:	68 50       	subi	r22, 0x08	; 8
    1906:	70 40       	sbci	r23, 0x00	; 0
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x5a>
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	6a 95       	dec	r22
    1914:	e2 f7       	brpl	.-8      	; 0x190e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x56>
    1916:	86 83       	std	Z+6, r24	; 0x06
    1918:	08 95       	ret
    191a:	65 31       	cpi	r22, 0x15	; 21
    191c:	b8 f4       	brcc	.+46     	; 0x194c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x94>
    191e:	86 e2       	ldi	r24, 0x26	; 38
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	91 83       	std	Z+1, r25	; 0x01
    1924:	80 83       	st	Z, r24
    1926:	88 e2       	ldi	r24, 0x28	; 40
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	93 83       	std	Z+3, r25	; 0x03
    192c:	82 83       	std	Z+2, r24	; 0x02
    192e:	87 e2       	ldi	r24, 0x27	; 39
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	95 83       	std	Z+5, r25	; 0x05
    1934:	84 83       	std	Z+4, r24	; 0x04
    1936:	70 e0       	ldi	r23, 0x00	; 0
    1938:	6e 50       	subi	r22, 0x0E	; 14
    193a:	70 40       	sbci	r23, 0x00	; 0
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x8e>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	6a 95       	dec	r22
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x8a>
    194a:	86 83       	std	Z+6, r24	; 0x06
    194c:	08 95       	ret

0000194e <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh>:
    194e:	fc 01       	movw	r30, r24
    1950:	a4 81       	ldd	r26, Z+4	; 0x04
    1952:	b5 81       	ldd	r27, Z+5	; 0x05
    1954:	86 81       	ldd	r24, Z+6	; 0x06
    1956:	66 23       	and	r22, r22
    1958:	21 f0       	breq	.+8      	; 0x1962 <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh+0x14>
    195a:	9c 91       	ld	r25, X
    195c:	98 2b       	or	r25, r24
    195e:	9c 93       	st	X, r25
    1960:	08 95       	ret
    1962:	9c 91       	ld	r25, X
    1964:	80 95       	com	r24
    1966:	89 23       	and	r24, r25
    1968:	8c 93       	st	X, r24
    196a:	08 95       	ret

0000196c <_ZN16OrangutanDigital14setOutputValueEP8IOStructh>:
    196c:	fc 01       	movw	r30, r24
    196e:	6f 3f       	cpi	r22, 0xFF	; 255
    1970:	31 f4       	brne	.+12     	; 0x197e <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x12>
    1972:	a2 81       	ldd	r26, Z+2	; 0x02
    1974:	b3 81       	ldd	r27, Z+3	; 0x03
    1976:	8c 91       	ld	r24, X
    1978:	96 81       	ldd	r25, Z+6	; 0x06
    197a:	89 27       	eor	r24, r25
    197c:	0c c0       	rjmp	.+24     	; 0x1996 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x2a>
    197e:	a2 81       	ldd	r26, Z+2	; 0x02
    1980:	b3 81       	ldd	r27, Z+3	; 0x03
    1982:	86 81       	ldd	r24, Z+6	; 0x06
    1984:	66 23       	and	r22, r22
    1986:	21 f0       	breq	.+8      	; 0x1990 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x24>
    1988:	9c 91       	ld	r25, X
    198a:	98 2b       	or	r25, r24
    198c:	9c 93       	st	X, r25
    198e:	08 95       	ret
    1990:	9c 91       	ld	r25, X
    1992:	80 95       	com	r24
    1994:	89 23       	and	r24, r25
    1996:	8c 93       	st	X, r24
    1998:	08 95       	ret

0000199a <_ZN16OrangutanDigital9setOutputEhh>:
    199a:	a7 e0       	ldi	r26, 0x07	; 7
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e3 ed       	ldi	r30, 0xD3	; 211
    19a0:	fc e0       	ldi	r31, 0x0C	; 12
    19a2:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <__prologue_saves__+0x1a>
    19a6:	28 2f       	mov	r18, r24
    19a8:	f6 2e       	mov	r15, r22
    19aa:	8e 01       	movw	r16, r28
    19ac:	0f 5f       	subi	r16, 0xFF	; 255
    19ae:	1f 4f       	sbci	r17, 0xFF	; 255
    19b0:	c8 01       	movw	r24, r16
    19b2:	62 2f       	mov	r22, r18
    19b4:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    19b8:	c8 01       	movw	r24, r16
    19ba:	6f 2d       	mov	r22, r15
    19bc:	0e 94 b6 0c 	call	0x196c	; 0x196c <_ZN16OrangutanDigital14setOutputValueEP8IOStructh>
    19c0:	c8 01       	movw	r24, r16
    19c2:	61 e0       	ldi	r22, 0x01	; 1
    19c4:	0e 94 a7 0c 	call	0x194e	; 0x194e <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh>
    19c8:	27 96       	adiw	r28, 0x07	; 7
    19ca:	e5 e0       	ldi	r30, 0x05	; 5
    19cc:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <__epilogue_restores__+0x1a>

000019d0 <_ZN15OrangutanMotors5init2Ev>:
    19d0:	e0 eb       	ldi	r30, 0xB0	; 176
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	83 ef       	ldi	r24, 0xF3	; 243
    19d6:	80 83       	st	Z, r24
    19d8:	80 81       	ld	r24, Z
    19da:	84 bd       	out	0x24, r24	; 36
    19dc:	e1 eb       	ldi	r30, 0xB1	; 177
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	82 e0       	ldi	r24, 0x02	; 2
    19e2:	80 83       	st	Z, r24
    19e4:	80 81       	ld	r24, Z
    19e6:	85 bd       	out	0x25, r24	; 37
    19e8:	e4 eb       	ldi	r30, 0xB4	; 180
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	10 82       	st	Z, r1
    19ee:	80 81       	ld	r24, Z
    19f0:	e3 eb       	ldi	r30, 0xB3	; 179
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 83       	st	Z, r24
    19f6:	80 81       	ld	r24, Z
    19f8:	88 bd       	out	0x28, r24	; 40
    19fa:	88 b5       	in	r24, 0x28	; 40
    19fc:	87 bd       	out	0x27, r24	; 39
    19fe:	86 e0       	ldi	r24, 0x06	; 6
    1a00:	60 e0       	ldi	r22, 0x00	; 0
    1a02:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZN16OrangutanDigital9setOutputEhh>
    1a06:	85 e0       	ldi	r24, 0x05	; 5
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZN16OrangutanDigital9setOutputEhh>
    1a0e:	8b e0       	ldi	r24, 0x0B	; 11
    1a10:	60 e0       	ldi	r22, 0x00	; 0
    1a12:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZN16OrangutanDigital9setOutputEhh>
    1a16:	83 e0       	ldi	r24, 0x03	; 3
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZN16OrangutanDigital9setOutputEhh>
    1a1e:	08 95       	ret

00001a20 <_ZN15OrangutanMotors4initEv>:
    1a20:	80 91 52 01 	lds	r24, 0x0152
    1a24:	88 23       	and	r24, r24
    1a26:	29 f4       	brne	.+10     	; 0x1a32 <_ZN15OrangutanMotors4initEv+0x12>
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	80 93 52 01 	sts	0x0152, r24
    1a2e:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN15OrangutanMotors5init2Ev>
    1a32:	08 95       	ret

00001a34 <_ZN15OrangutanMotors10setM1SpeedEi>:
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	ec 01       	movw	r28, r24
    1a3a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <_ZN15OrangutanMotors4initEv>
    1a3e:	d7 ff       	sbrs	r29, 7
    1a40:	05 c0       	rjmp	.+10     	; 0x1a4c <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    1a42:	d0 95       	com	r29
    1a44:	c1 95       	neg	r28
    1a46:	df 4f       	sbci	r29, 0xFF	; 255
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	01 c0       	rjmp	.+2      	; 0x1a4e <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	cf 3f       	cpi	r28, 0xFF	; 255
    1a50:	d1 05       	cpc	r29, r1
    1a52:	19 f0       	breq	.+6      	; 0x1a5a <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1a54:	14 f0       	brlt	.+4      	; 0x1a5a <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1a56:	cf ef       	ldi	r28, 0xFF	; 255
    1a58:	d0 e0       	ldi	r29, 0x00	; 0
    1a5a:	88 23       	and	r24, r24
    1a5c:	19 f0       	breq	.+6      	; 0x1a64 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    1a5e:	18 bc       	out	0x28, r1	; 40
    1a60:	c7 bd       	out	0x27, r28	; 39
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    1a64:	c8 bd       	out	0x28, r28	; 40
    1a66:	17 bc       	out	0x27, r1	; 39
    1a68:	df 91       	pop	r29
    1a6a:	cf 91       	pop	r28
    1a6c:	08 95       	ret

00001a6e <_ZN15OrangutanMotors10setM2SpeedEi>:
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
    1a72:	ec 01       	movw	r28, r24
    1a74:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <_ZN15OrangutanMotors4initEv>
    1a78:	d7 ff       	sbrs	r29, 7
    1a7a:	05 c0       	rjmp	.+10     	; 0x1a86 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    1a7c:	d0 95       	com	r29
    1a7e:	c1 95       	neg	r28
    1a80:	df 4f       	sbci	r29, 0xFF	; 255
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	01 c0       	rjmp	.+2      	; 0x1a88 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	cf 3f       	cpi	r28, 0xFF	; 255
    1a8a:	d1 05       	cpc	r29, r1
    1a8c:	19 f0       	breq	.+6      	; 0x1a94 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1a8e:	14 f0       	brlt	.+4      	; 0x1a94 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1a90:	cf ef       	ldi	r28, 0xFF	; 255
    1a92:	d0 e0       	ldi	r29, 0x00	; 0
    1a94:	88 23       	and	r24, r24
    1a96:	29 f0       	breq	.+10     	; 0x1aa2 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    1a98:	10 92 b4 00 	sts	0x00B4, r1
    1a9c:	c0 93 b3 00 	sts	0x00B3, r28
    1aa0:	04 c0       	rjmp	.+8      	; 0x1aaa <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    1aa2:	c0 93 b4 00 	sts	0x00B4, r28
    1aa6:	10 92 b3 00 	sts	0x00B3, r1
    1aaa:	df 91       	pop	r29
    1aac:	cf 91       	pop	r28
    1aae:	08 95       	ret

00001ab0 <_ZN15OrangutanMotors9setSpeedsEii>:
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
    1ab4:	eb 01       	movw	r28, r22
    1ab6:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <_ZN15OrangutanMotors10setM1SpeedEi>
    1aba:	ce 01       	movw	r24, r28
    1abc:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <_ZN15OrangutanMotors10setM2SpeedEi>
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	08 95       	ret

00001ac6 <set_motors>:
    1ac6:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN15OrangutanMotors9setSpeedsEii>
    1aca:	08 95       	ret

00001acc <_ZN20OrangutanPushbuttons5init2Ev>:
    1acc:	84 b1       	in	r24, 0x04	; 4
    1ace:	8d 7c       	andi	r24, 0xCD	; 205
    1ad0:	84 b9       	out	0x04, r24	; 4
    1ad2:	85 b1       	in	r24, 0x05	; 5
    1ad4:	82 63       	ori	r24, 0x32	; 50
    1ad6:	85 b9       	out	0x05, r24	; 5
    1ad8:	85 e0       	ldi	r24, 0x05	; 5
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	6f 93       	push	r22
    1ade:	64 e0       	ldi	r22, 0x04	; 4
    1ae0:	6a 95       	dec	r22
    1ae2:	f1 f7       	brne	.-4      	; 0x1ae0 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    1ae4:	6f 91       	pop	r22
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	c9 f7       	brne	.-14     	; 0x1adc <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    1aea:	08 95       	ret

00001aec <_ZN20OrangutanPushbuttons4initEv>:
    1aec:	80 91 53 01 	lds	r24, 0x0153
    1af0:	88 23       	and	r24, r24
    1af2:	29 f4       	brne	.+10     	; 0x1afe <_ZN20OrangutanPushbuttons4initEv+0x12>
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	80 93 53 01 	sts	0x0153, r24
    1afa:	0e 94 66 0d 	call	0x1acc	; 0x1acc <_ZN20OrangutanPushbuttons5init2Ev>
    1afe:	08 95       	ret

00001b00 <_ZN20OrangutanPushbuttons12waitForPressEh>:
    1b00:	1f 93       	push	r17
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	18 2f       	mov	r17, r24
    1b08:	0e 94 76 0d 	call	0x1aec	; 0x1aec <_ZN20OrangutanPushbuttons4initEv>
    1b0c:	c1 2f       	mov	r28, r17
    1b0e:	d0 e0       	ldi	r29, 0x00	; 0
    1b10:	23 b1       	in	r18, 0x03	; 3
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	20 95       	com	r18
    1b16:	30 95       	com	r19
    1b18:	2c 23       	and	r18, r28
    1b1a:	3d 23       	and	r19, r29
    1b1c:	21 15       	cp	r18, r1
    1b1e:	31 05       	cpc	r19, r1
    1b20:	b9 f3       	breq	.-18     	; 0x1b10 <_ZN20OrangutanPushbuttons12waitForPressEh+0x10>
    1b22:	8a e0       	ldi	r24, 0x0A	; 10
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <delay_ms>
    1b2a:	23 b1       	in	r18, 0x03	; 3
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	20 95       	com	r18
    1b30:	30 95       	com	r19
    1b32:	2c 23       	and	r18, r28
    1b34:	3d 23       	and	r19, r29
    1b36:	21 15       	cp	r18, r1
    1b38:	31 05       	cpc	r19, r1
    1b3a:	51 f3       	breq	.-44     	; 0x1b10 <_ZN20OrangutanPushbuttons12waitForPressEh+0x10>
    1b3c:	83 b1       	in	r24, 0x03	; 3
    1b3e:	80 95       	com	r24
    1b40:	81 23       	and	r24, r17
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	1f 91       	pop	r17
    1b48:	08 95       	ret

00001b4a <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    1b4a:	1f 93       	push	r17
    1b4c:	18 2f       	mov	r17, r24
    1b4e:	0e 94 76 0d 	call	0x1aec	; 0x1aec <_ZN20OrangutanPushbuttons4initEv>
    1b52:	83 b1       	in	r24, 0x03	; 3
    1b54:	81 23       	and	r24, r17
    1b56:	e9 f3       	breq	.-6      	; 0x1b52 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1b58:	8a e0       	ldi	r24, 0x0A	; 10
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <delay_ms>
    1b60:	83 b1       	in	r24, 0x03	; 3
    1b62:	81 23       	and	r24, r17
    1b64:	b1 f3       	breq	.-20     	; 0x1b52 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1b66:	83 b1       	in	r24, 0x03	; 3
    1b68:	81 23       	and	r24, r17
    1b6a:	1f 91       	pop	r17
    1b6c:	08 95       	ret

00001b6e <_ZN20OrangutanPushbuttons13waitForButtonEh>:
    1b6e:	1f 93       	push	r17
    1b70:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <_ZN20OrangutanPushbuttons12waitForPressEh>
    1b74:	18 2f       	mov	r17, r24
    1b76:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    1b7a:	81 2f       	mov	r24, r17
    1b7c:	1f 91       	pop	r17
    1b7e:	08 95       	ret

00001b80 <wait_for_button>:
    1b80:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN20OrangutanPushbuttons13waitForButtonEh>
    1b84:	08 95       	ret

00001b86 <_ZN20OrangutanPushbuttons9isPressedEh>:
    1b86:	a1 e0       	ldi	r26, 0x01	; 1
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e9 ec       	ldi	r30, 0xC9	; 201
    1b8c:	fd e0       	ldi	r31, 0x0D	; 13
    1b8e:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__prologue_saves__+0x20>
    1b92:	89 83       	std	Y+1, r24	; 0x01
    1b94:	0e 94 76 0d 	call	0x1aec	; 0x1aec <_ZN20OrangutanPushbuttons4initEv>
    1b98:	93 b1       	in	r25, 0x03	; 3
    1b9a:	90 95       	com	r25
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	89 23       	and	r24, r25
    1ba0:	21 96       	adiw	r28, 0x01	; 1
    1ba2:	e2 e0       	ldi	r30, 0x02	; 2
    1ba4:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <__epilogue_restores__+0x20>

00001ba8 <button_is_pressed>:
    1ba8:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_ZN20OrangutanPushbuttons9isPressedEh>
    1bac:	08 95       	ret

00001bae <_ZN18OrangutanResources10getFreeRAMEv>:
    1bae:	a2 e0       	ldi	r26, 0x02	; 2
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	ed ed       	ldi	r30, 0xDD	; 221
    1bb4:	fd e0       	ldi	r31, 0x0D	; 13
    1bb6:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__prologue_saves__+0x20>
    1bba:	80 91 bc 01 	lds	r24, 0x01BC
    1bbe:	90 91 bd 01 	lds	r25, 0x01BD
    1bc2:	9e 01       	movw	r18, r28
    1bc4:	2f 5f       	subi	r18, 0xFF	; 255
    1bc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc8:	00 97       	sbiw	r24, 0x00	; 0
    1bca:	19 f4       	brne	.+6      	; 0x1bd2 <_ZN18OrangutanResources10getFreeRAMEv+0x24>
    1bcc:	20 5c       	subi	r18, 0xC0	; 192
    1bce:	31 40       	sbci	r19, 0x01	; 1
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <_ZN18OrangutanResources10getFreeRAMEv+0x28>
    1bd2:	28 1b       	sub	r18, r24
    1bd4:	39 0b       	sbc	r19, r25
    1bd6:	3a 83       	std	Y+2, r19	; 0x02
    1bd8:	29 83       	std	Y+1, r18	; 0x01
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bde:	22 96       	adiw	r28, 0x02	; 2
    1be0:	e2 e0       	ldi	r30, 0x02	; 2
    1be2:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <__epilogue_restores__+0x20>

00001be6 <get_free_ram>:
    1be6:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <_ZN18OrangutanResources10getFreeRAMEv>
    1bea:	08 95       	ret

00001bec <_ZN13OrangutanTime17delayMicrosecondsEj>:
    1bec:	6f 93       	push	r22
    1bee:	64 e0       	ldi	r22, 0x04	; 4
    1bf0:	6a 95       	dec	r22
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <_ZN13OrangutanTime17delayMicrosecondsEj+0x4>
    1bf4:	6f 91       	pop	r22
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	c9 f7       	brne	.-14     	; 0x1bec <_ZN13OrangutanTime17delayMicrosecondsEj>
    1bfa:	08 95       	ret

00001bfc <__vector_9>:
    1bfc:	2f 92       	push	r2
    1bfe:	8f 93       	push	r24
    1c00:	9f 93       	push	r25
    1c02:	2f b6       	in	r2, 0x3f	; 63
    1c04:	80 91 61 01 	lds	r24, 0x0161
    1c08:	90 91 62 01 	lds	r25, 0x0162
    1c0c:	01 96       	adiw	r24, 0x01	; 1
    1c0e:	80 93 61 01 	sts	0x0161, r24
    1c12:	90 93 62 01 	sts	0x0162, r25
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	80 91 63 01 	lds	r24, 0x0163
    1c1c:	89 1f       	adc	r24, r25
    1c1e:	80 93 63 01 	sts	0x0163, r24
    1c22:	90 91 69 01 	lds	r25, 0x0169
    1c26:	9c 5f       	subi	r25, 0xFC	; 252
    1c28:	90 93 69 01 	sts	0x0169, r25
    1c2c:	80 91 68 01 	lds	r24, 0x0168
    1c30:	80 51       	subi	r24, 0x10	; 16
    1c32:	97 42       	sbci	r25, 0x27	; 39
    1c34:	c0 f0       	brcs	.+48     	; 0x1c66 <end>
    1c36:	90 93 69 01 	sts	0x0169, r25
    1c3a:	80 93 68 01 	sts	0x0168, r24
    1c3e:	80 91 64 01 	lds	r24, 0x0164
    1c42:	90 91 65 01 	lds	r25, 0x0165
    1c46:	01 96       	adiw	r24, 0x01	; 1
    1c48:	80 93 64 01 	sts	0x0164, r24
    1c4c:	90 93 65 01 	sts	0x0165, r25
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	80 91 66 01 	lds	r24, 0x0166
    1c56:	89 1f       	adc	r24, r25
    1c58:	80 93 66 01 	sts	0x0166, r24
    1c5c:	80 91 67 01 	lds	r24, 0x0167
    1c60:	89 1f       	adc	r24, r25
    1c62:	80 93 67 01 	sts	0x0167, r24

00001c66 <end>:
    1c66:	2f be       	out	0x3f, r2	; 63
    1c68:	9f 91       	pop	r25
    1c6a:	8f 91       	pop	r24
    1c6c:	2f 90       	pop	r2
    1c6e:	18 95       	reti

00001c70 <_ZN13OrangutanTime17delayMillisecondsEj>:
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
    1c74:	ec 01       	movw	r28, r24
    1c76:	05 c0       	rjmp	.+10     	; 0x1c82 <_ZN13OrangutanTime17delayMillisecondsEj+0x12>
    1c78:	88 ee       	ldi	r24, 0xE8	; 232
    1c7a:	93 e0       	ldi	r25, 0x03	; 3
    1c7c:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <_ZN13OrangutanTime17delayMicrosecondsEj>
    1c80:	21 97       	sbiw	r28, 0x01	; 1
    1c82:	20 97       	sbiw	r28, 0x00	; 0
    1c84:	c9 f7       	brne	.-14     	; 0x1c78 <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    1c86:	df 91       	pop	r29
    1c88:	cf 91       	pop	r28
    1c8a:	08 95       	ret

00001c8c <delay_ms>:
    1c8c:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <_ZN13OrangutanTime17delayMillisecondsEj>
    1c90:	08 95       	ret

00001c92 <_ZN13OrangutanTime5init2Ev>:
    1c92:	e0 e7       	ldi	r30, 0x70	; 112
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	8e 7f       	andi	r24, 0xFE	; 254
    1c9a:	80 83       	st	Z, r24
    1c9c:	a0 eb       	ldi	r26, 0xB0	; 176
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	8c 91       	ld	r24, X
    1ca2:	83 60       	ori	r24, 0x03	; 3
    1ca4:	8c 93       	st	X, r24
    1ca6:	a1 eb       	ldi	r26, 0xB1	; 177
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	8c 91       	ld	r24, X
    1cac:	80 7f       	andi	r24, 0xF0	; 240
    1cae:	8c 93       	st	X, r24
    1cb0:	8c 91       	ld	r24, X
    1cb2:	82 60       	ori	r24, 0x02	; 2
    1cb4:	8c 93       	st	X, r24
    1cb6:	b8 9a       	sbi	0x17, 0	; 23
    1cb8:	80 81       	ld	r24, Z
    1cba:	81 60       	ori	r24, 0x01	; 1
    1cbc:	80 83       	st	Z, r24
    1cbe:	78 94       	sei
    1cc0:	08 95       	ret

00001cc2 <_ZN13OrangutanTime4initEv>:
    1cc2:	80 91 6a 01 	lds	r24, 0x016A
    1cc6:	88 23       	and	r24, r24
    1cc8:	29 f4       	brne	.+10     	; 0x1cd4 <_ZN13OrangutanTime4initEv+0x12>
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	80 93 6a 01 	sts	0x016A, r24
    1cd0:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <_ZN13OrangutanTime5init2Ev>
    1cd4:	08 95       	ret

00001cd6 <_ZN13OrangutanTime2msEv>:
    1cd6:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <_ZN13OrangutanTime4initEv>
    1cda:	e0 e7       	ldi	r30, 0x70	; 112
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	8e 7f       	andi	r24, 0xFE	; 254
    1ce2:	80 83       	st	Z, r24
    1ce4:	20 91 64 01 	lds	r18, 0x0164
    1ce8:	30 91 65 01 	lds	r19, 0x0165
    1cec:	40 91 66 01 	lds	r20, 0x0166
    1cf0:	50 91 67 01 	lds	r21, 0x0167
    1cf4:	80 81       	ld	r24, Z
    1cf6:	81 60       	ori	r24, 0x01	; 1
    1cf8:	80 83       	st	Z, r24
    1cfa:	b9 01       	movw	r22, r18
    1cfc:	ca 01       	movw	r24, r20
    1cfe:	08 95       	ret

00001d00 <get_ms>:
    1d00:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <_ZN13OrangutanTime2msEv>
    1d04:	08 95       	ret

00001d06 <_ZN13OrangutanTime5resetEv>:
    1d06:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <_ZN13OrangutanTime4initEv>
    1d0a:	e0 e7       	ldi	r30, 0x70	; 112
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	8e 7f       	andi	r24, 0xFE	; 254
    1d12:	80 83       	st	Z, r24
    1d14:	10 92 64 01 	sts	0x0164, r1
    1d18:	10 92 65 01 	sts	0x0165, r1
    1d1c:	10 92 66 01 	sts	0x0166, r1
    1d20:	10 92 67 01 	sts	0x0167, r1
    1d24:	10 92 69 01 	sts	0x0169, r1
    1d28:	10 92 68 01 	sts	0x0168, r1
    1d2c:	80 81       	ld	r24, Z
    1d2e:	81 60       	ori	r24, 0x01	; 1
    1d30:	80 83       	st	Z, r24
    1d32:	08 95       	ret

00001d34 <calibrate_line_sensors>:
    1d34:	68 2f       	mov	r22, r24
    1d36:	8b e6       	ldi	r24, 0x6B	; 107
    1d38:	91 e0       	ldi	r25, 0x01	; 1
    1d3a:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <_ZN16PololuQTRSensors9calibrateEh>
    1d3e:	08 95       	ret

00001d40 <read_line>:
    1d40:	9c 01       	movw	r18, r24
    1d42:	46 2f       	mov	r20, r22
    1d44:	8b e6       	ldi	r24, 0x6B	; 107
    1d46:	91 e0       	ldi	r25, 0x01	; 1
    1d48:	b9 01       	movw	r22, r18
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	0e 94 32 12 	call	0x2464	; 0x2464 <_ZN16PololuQTRSensors8readLineEPjhh>
    1d50:	08 95       	ret

00001d52 <get_line_sensors_calibrated_minimum_on>:
    1d52:	80 91 6b 01 	lds	r24, 0x016B
    1d56:	90 91 6c 01 	lds	r25, 0x016C
    1d5a:	08 95       	ret

00001d5c <get_line_sensors_calibrated_maximum_on>:
    1d5c:	80 91 6d 01 	lds	r24, 0x016D
    1d60:	90 91 6e 01 	lds	r25, 0x016E
    1d64:	08 95       	ret

00001d66 <_ZN9Pololu3pi4initEjh>:
    1d66:	0f 93       	push	r16
    1d68:	df 93       	push	r29
    1d6a:	cf 93       	push	r28
    1d6c:	00 d0       	rcall	.+0      	; 0x1d6e <_ZN9Pololu3pi4initEjh+0x8>
    1d6e:	00 d0       	rcall	.+0      	; 0x1d70 <_ZN9Pololu3pi4initEjh+0xa>
    1d70:	0f 92       	push	r0
    1d72:	cd b7       	in	r28, 0x3d	; 61
    1d74:	de b7       	in	r29, 0x3e	; 62
    1d76:	9c 01       	movw	r18, r24
    1d78:	96 2f       	mov	r25, r22
    1d7a:	de 01       	movw	r26, r28
    1d7c:	11 96       	adiw	r26, 0x01	; 1
    1d7e:	e6 e2       	ldi	r30, 0x26	; 38
    1d80:	f1 e0       	ldi	r31, 0x01	; 1
    1d82:	85 e0       	ldi	r24, 0x05	; 5
    1d84:	01 90       	ld	r0, Z+
    1d86:	0d 92       	st	X+, r0
    1d88:	81 50       	subi	r24, 0x01	; 1
    1d8a:	e1 f7       	brne	.-8      	; 0x1d84 <_ZN9Pololu3pi4initEjh+0x1e>
    1d8c:	be 01       	movw	r22, r28
    1d8e:	6f 5f       	subi	r22, 0xFF	; 255
    1d90:	7f 4f       	sbci	r23, 0xFF	; 255
    1d92:	99 23       	and	r25, r25
    1d94:	29 f0       	breq	.+10     	; 0x1da0 <_ZN9Pololu3pi4initEjh+0x3a>
    1d96:	8b e6       	ldi	r24, 0x6B	; 107
    1d98:	91 e0       	ldi	r25, 0x01	; 1
    1d9a:	45 e0       	ldi	r20, 0x05	; 5
    1d9c:	0f ef       	ldi	r16, 0xFF	; 255
    1d9e:	04 c0       	rjmp	.+8      	; 0x1da8 <_ZN9Pololu3pi4initEjh+0x42>
    1da0:	8b e6       	ldi	r24, 0x6B	; 107
    1da2:	91 e0       	ldi	r25, 0x01	; 1
    1da4:	45 e0       	ldi	r20, 0x05	; 5
    1da6:	03 e1       	ldi	r16, 0x13	; 19
    1da8:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <_ZN18PololuQTRSensorsRC4initEPhhjh>
    1dac:	8b e6       	ldi	r24, 0x6B	; 107
    1dae:	91 e0       	ldi	r25, 0x01	; 1
    1db0:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <_ZN16PololuQTRSensors11emittersOffEv>
    1db4:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <_ZN13OrangutanTime5resetEv>
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	0f 90       	pop	r0
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	0f 91       	pop	r16
    1dc8:	08 95       	ret

00001dca <pololu_3pi_init>:
    1dca:	60 e0       	ldi	r22, 0x00	; 0
    1dcc:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <_ZN9Pololu3pi4initEjh>
    1dd0:	08 95       	ret

00001dd2 <_GLOBAL__I_pololu_3pi_init>:
    1dd2:	08 95       	ret

00001dd4 <_GLOBAL__D_pololu_3pi_init>:
    1dd4:	8b e6       	ldi	r24, 0x6B	; 107
    1dd6:	91 e0       	ldi	r25, 0x01	; 1
    1dd8:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <_ZN16PololuQTRSensorsD1Ev>
    1ddc:	08 95       	ret

00001dde <delayMicroseconds>:
    1dde:	6f 93       	push	r22
    1de0:	64 e0       	ldi	r22, 0x04	; 4
    1de2:	6a 95       	dec	r22
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <delayMicroseconds+0x4>
    1de6:	6f 91       	pop	r22
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	c9 f7       	brne	.-14     	; 0x1dde <delayMicroseconds>
    1dec:	08 95       	ret

00001dee <_ZN16PololuQTRSensors4initEhhh>:
    1dee:	a7 e0       	ldi	r26, 0x07	; 7
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	ed ef       	ldi	r30, 0xFD	; 253
    1df4:	fe e0       	ldi	r31, 0x0E	; 14
    1df6:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__prologue_saves__+0x1c>
    1dfa:	8c 01       	movw	r16, r24
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	11 82       	std	Z+1, r1	; 0x01
    1e00:	10 82       	st	Z, r1
    1e02:	13 82       	std	Z+3, r1	; 0x03
    1e04:	12 82       	std	Z+2, r1	; 0x02
    1e06:	15 82       	std	Z+5, r1	; 0x05
    1e08:	14 82       	std	Z+4, r1	; 0x04
    1e0a:	17 82       	std	Z+7, r1	; 0x07
    1e0c:	16 82       	std	Z+6, r1	; 0x06
    1e0e:	61 31       	cpi	r22, 0x11	; 17
    1e10:	18 f0       	brcs	.+6      	; 0x1e18 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    1e12:	80 e1       	ldi	r24, 0x10	; 16
    1e14:	80 87       	std	Z+8, r24	; 0x08
    1e16:	02 c0       	rjmp	.+4      	; 0x1e1c <_ZN16PololuQTRSensors4initEhhh+0x2e>
    1e18:	fc 01       	movw	r30, r24
    1e1a:	60 87       	std	Z+8, r22	; 0x08
    1e1c:	f8 01       	movw	r30, r16
    1e1e:	20 8b       	std	Z+16, r18	; 0x10
    1e20:	ce 01       	movw	r24, r28
    1e22:	01 96       	adiw	r24, 0x01	; 1
    1e24:	64 2f       	mov	r22, r20
    1e26:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1e2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e2c:	f8 01       	movw	r30, r16
    1e2e:	81 87       	std	Z+9, r24	; 0x09
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
    1e32:	9c 81       	ldd	r25, Y+4	; 0x04
    1e34:	93 87       	std	Z+11, r25	; 0x0b
    1e36:	82 87       	std	Z+10, r24	; 0x0a
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3c:	95 87       	std	Z+13, r25	; 0x0d
    1e3e:	84 87       	std	Z+12, r24	; 0x0c
    1e40:	27 96       	adiw	r28, 0x07	; 7
    1e42:	e4 e0       	ldi	r30, 0x04	; 4
    1e44:	0c 94 df 14 	jmp	0x29be	; 0x29be <__epilogue_restores__+0x1c>

00001e48 <_ZN16PololuQTRSensors11emittersOffEv>:
    1e48:	fc 01       	movw	r30, r24
    1e4a:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e4c:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e4e:	10 97       	sbiw	r26, 0x00	; 0
    1e50:	79 f0       	breq	.+30     	; 0x1e70 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    1e52:	8c 91       	ld	r24, X
    1e54:	91 85       	ldd	r25, Z+9	; 0x09
    1e56:	89 2b       	or	r24, r25
    1e58:	8c 93       	st	X, r24
    1e5a:	a2 85       	ldd	r26, Z+10	; 0x0a
    1e5c:	b3 85       	ldd	r27, Z+11	; 0x0b
    1e5e:	9c 91       	ld	r25, X
    1e60:	81 85       	ldd	r24, Z+9	; 0x09
    1e62:	80 95       	com	r24
    1e64:	89 23       	and	r24, r25
    1e66:	8c 93       	st	X, r24
    1e68:	88 ec       	ldi	r24, 0xC8	; 200
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <delayMicroseconds>
    1e70:	08 95       	ret

00001e72 <_ZN16PololuQTRSensors10emittersOnEv>:
    1e72:	fc 01       	movw	r30, r24
    1e74:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e76:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e78:	10 97       	sbiw	r26, 0x00	; 0
    1e7a:	71 f0       	breq	.+28     	; 0x1e98 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    1e7c:	8c 91       	ld	r24, X
    1e7e:	91 85       	ldd	r25, Z+9	; 0x09
    1e80:	89 2b       	or	r24, r25
    1e82:	8c 93       	st	X, r24
    1e84:	a2 85       	ldd	r26, Z+10	; 0x0a
    1e86:	b3 85       	ldd	r27, Z+11	; 0x0b
    1e88:	8c 91       	ld	r24, X
    1e8a:	91 85       	ldd	r25, Z+9	; 0x09
    1e8c:	89 2b       	or	r24, r25
    1e8e:	8c 93       	st	X, r24
    1e90:	88 ec       	ldi	r24, 0xC8	; 200
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <delayMicroseconds>
    1e98:	08 95       	ret

00001e9a <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    1e9a:	a7 e0       	ldi	r26, 0x07	; 7
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e3 e5       	ldi	r30, 0x53	; 83
    1ea0:	ff e0       	ldi	r31, 0x0F	; 15
    1ea2:	0c 94 b5 14 	jmp	0x296a	; 0x296a <__prologue_saves__>
    1ea6:	7c 01       	movw	r14, r24
    1ea8:	1b 01       	movw	r2, r22
    1eaa:	64 2f       	mov	r22, r20
    1eac:	39 01       	movw	r6, r18
    1eae:	40 2f       	mov	r20, r16
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <_ZN16PololuQTRSensors4initEhhh>
    1eb6:	97 01       	movw	r18, r14
    1eb8:	2f 5b       	subi	r18, 0xBF	; 191
    1eba:	3f 4f       	sbci	r19, 0xFF	; 255
    1ebc:	f9 01       	movw	r30, r18
    1ebe:	10 82       	st	Z, r1
    1ec0:	d7 01       	movw	r26, r14
    1ec2:	ae 5b       	subi	r26, 0xBE	; 190
    1ec4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ec6:	1c 92       	st	X, r1
    1ec8:	c7 01       	movw	r24, r14
    1eca:	8d 5b       	subi	r24, 0xBD	; 189
    1ecc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ece:	fc 01       	movw	r30, r24
    1ed0:	10 82       	st	Z, r1
    1ed2:	f7 01       	movw	r30, r14
    1ed4:	77 86       	std	Z+15, r7	; 0x0f
    1ed6:	66 86       	std	Z+14, r6	; 0x0e
    1ed8:	66 24       	eor	r6, r6
    1eda:	2e 01       	movw	r4, r28
    1edc:	08 94       	sec
    1ede:	41 1c       	adc	r4, r1
    1ee0:	51 1c       	adc	r5, r1
    1ee2:	6c 01       	movw	r12, r24
    1ee4:	5d 01       	movw	r10, r26
    1ee6:	49 01       	movw	r8, r18
    1ee8:	29 c0       	rjmp	.+82     	; 0x1f3c <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    1eea:	06 2d       	mov	r16, r6
    1eec:	10 e0       	ldi	r17, 0x00	; 0
    1eee:	f1 01       	movw	r30, r2
    1ef0:	e0 0f       	add	r30, r16
    1ef2:	f1 1f       	adc	r31, r17
    1ef4:	c2 01       	movw	r24, r4
    1ef6:	60 81       	ld	r22, Z
    1ef8:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1efc:	2f 81       	ldd	r18, Y+7	; 0x07
    1efe:	f7 01       	movw	r30, r14
    1f00:	e0 0f       	add	r30, r16
    1f02:	f1 1f       	adc	r31, r17
    1f04:	21 8b       	std	Z+17, r18	; 0x11
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0a:	f8 01       	movw	r30, r16
    1f0c:	ee 0f       	add	r30, r30
    1f0e:	ff 1f       	adc	r31, r31
    1f10:	ee 0d       	add	r30, r14
    1f12:	ff 1d       	adc	r31, r15
    1f14:	92 a3       	std	Z+34, r25	; 0x22
    1f16:	81 a3       	std	Z+33, r24	; 0x21
    1f18:	83 32       	cpi	r24, 0x23	; 35
    1f1a:	91 05       	cpc	r25, r1
    1f1c:	11 f4       	brne	.+4      	; 0x1f22 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    1f1e:	f4 01       	movw	r30, r8
    1f20:	09 c0       	rjmp	.+18     	; 0x1f34 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9a>
    1f22:	86 32       	cpi	r24, 0x26	; 38
    1f24:	91 05       	cpc	r25, r1
    1f26:	11 f4       	brne	.+4      	; 0x1f2c <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    1f28:	f5 01       	movw	r30, r10
    1f2a:	04 c0       	rjmp	.+8      	; 0x1f34 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9a>
    1f2c:	89 32       	cpi	r24, 0x29	; 41
    1f2e:	91 05       	cpc	r25, r1
    1f30:	21 f4       	brne	.+8      	; 0x1f3a <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa0>
    1f32:	f6 01       	movw	r30, r12
    1f34:	80 81       	ld	r24, Z
    1f36:	82 2b       	or	r24, r18
    1f38:	80 83       	st	Z, r24
    1f3a:	63 94       	inc	r6
    1f3c:	f7 01       	movw	r30, r14
    1f3e:	80 85       	ldd	r24, Z+8	; 0x08
    1f40:	68 16       	cp	r6, r24
    1f42:	98 f2       	brcs	.-90     	; 0x1eea <_ZN18PololuQTRSensorsRC4initEPhhjh+0x50>
    1f44:	27 96       	adiw	r28, 0x07	; 7
    1f46:	e2 e1       	ldi	r30, 0x12	; 18
    1f48:	0c 94 d1 14 	jmp	0x29a2	; 0x29a2 <__epilogue_restores__>

00001f4c <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    1f4c:	a0 e0       	ldi	r26, 0x00	; 0
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	ec ea       	ldi	r30, 0xAC	; 172
    1f52:	ff e0       	ldi	r31, 0x0F	; 15
    1f54:	0c 94 ba 14 	jmp	0x2974	; 0x2974 <__prologue_saves__+0xa>
    1f58:	ec 01       	movw	r28, r24
    1f5a:	5b 01       	movw	r10, r22
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	ef 5b       	subi	r30, 0xBF	; 191
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	90 80       	ld	r9, Z
    1f64:	fc 01       	movw	r30, r24
    1f66:	ee 5b       	subi	r30, 0xBE	; 190
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	80 80       	ld	r8, Z
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	ed 5b       	subi	r30, 0xBD	; 189
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	70 80       	ld	r7, Z
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	09 c0       	rjmp	.+18     	; 0x1f8a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x3e>
    1f78:	e8 2f       	mov	r30, r24
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	ee 0f       	add	r30, r30
    1f7e:	ff 1f       	adc	r31, r31
    1f80:	ea 0d       	add	r30, r10
    1f82:	fb 1d       	adc	r31, r11
    1f84:	11 82       	std	Z+1, r1	; 0x01
    1f86:	10 82       	st	Z, r1
    1f88:	8f 5f       	subi	r24, 0xFF	; 255
    1f8a:	98 85       	ldd	r25, Y+8	; 0x08
    1f8c:	89 17       	cp	r24, r25
    1f8e:	a0 f3       	brcs	.-24     	; 0x1f78 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x2c>
    1f90:	84 b1       	in	r24, 0x04	; 4
    1f92:	21 e4       	ldi	r18, 0x41	; 65
    1f94:	e2 2e       	mov	r14, r18
    1f96:	f1 2c       	mov	r15, r1
    1f98:	ec 0e       	add	r14, r28
    1f9a:	fd 1e       	adc	r15, r29
    1f9c:	d7 01       	movw	r26, r14
    1f9e:	9c 91       	ld	r25, X
    1fa0:	89 2b       	or	r24, r25
    1fa2:	84 b9       	out	0x04, r24	; 4
    1fa4:	87 b1       	in	r24, 0x07	; 7
    1fa6:	8e 01       	movw	r16, r28
    1fa8:	0e 5b       	subi	r16, 0xBE	; 190
    1faa:	1f 4f       	sbci	r17, 0xFF	; 255
    1fac:	f8 01       	movw	r30, r16
    1fae:	90 81       	ld	r25, Z
    1fb0:	89 2b       	or	r24, r25
    1fb2:	87 b9       	out	0x07, r24	; 7
    1fb4:	8a b1       	in	r24, 0x0a	; 10
    1fb6:	93 e4       	ldi	r25, 0x43	; 67
    1fb8:	c9 2e       	mov	r12, r25
    1fba:	d1 2c       	mov	r13, r1
    1fbc:	cc 0e       	add	r12, r28
    1fbe:	dd 1e       	adc	r13, r29
    1fc0:	d6 01       	movw	r26, r12
    1fc2:	9c 91       	ld	r25, X
    1fc4:	89 2b       	or	r24, r25
    1fc6:	8a b9       	out	0x0a, r24	; 10
    1fc8:	85 b1       	in	r24, 0x05	; 5
    1fca:	f7 01       	movw	r30, r14
    1fcc:	90 81       	ld	r25, Z
    1fce:	89 2b       	or	r24, r25
    1fd0:	85 b9       	out	0x05, r24	; 5
    1fd2:	88 b1       	in	r24, 0x08	; 8
    1fd4:	d8 01       	movw	r26, r16
    1fd6:	9c 91       	ld	r25, X
    1fd8:	89 2b       	or	r24, r25
    1fda:	88 b9       	out	0x08, r24	; 8
    1fdc:	8b b1       	in	r24, 0x0b	; 11
    1fde:	f6 01       	movw	r30, r12
    1fe0:	90 81       	ld	r25, Z
    1fe2:	89 2b       	or	r24, r25
    1fe4:	8b b9       	out	0x0b, r24	; 11
    1fe6:	8a e0       	ldi	r24, 0x0A	; 10
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <delayMicroseconds>
    1fee:	94 b1       	in	r25, 0x04	; 4
    1ff0:	d7 01       	movw	r26, r14
    1ff2:	8c 91       	ld	r24, X
    1ff4:	80 95       	com	r24
    1ff6:	89 23       	and	r24, r25
    1ff8:	84 b9       	out	0x04, r24	; 4
    1ffa:	97 b1       	in	r25, 0x07	; 7
    1ffc:	f8 01       	movw	r30, r16
    1ffe:	80 81       	ld	r24, Z
    2000:	80 95       	com	r24
    2002:	89 23       	and	r24, r25
    2004:	87 b9       	out	0x07, r24	; 7
    2006:	9a b1       	in	r25, 0x0a	; 10
    2008:	d6 01       	movw	r26, r12
    200a:	8c 91       	ld	r24, X
    200c:	80 95       	com	r24
    200e:	89 23       	and	r24, r25
    2010:	8a b9       	out	0x0a, r24	; 10
    2012:	95 b1       	in	r25, 0x05	; 5
    2014:	f7 01       	movw	r30, r14
    2016:	80 81       	ld	r24, Z
    2018:	80 95       	com	r24
    201a:	89 23       	and	r24, r25
    201c:	85 b9       	out	0x05, r24	; 5
    201e:	98 b1       	in	r25, 0x08	; 8
    2020:	d8 01       	movw	r26, r16
    2022:	8c 91       	ld	r24, X
    2024:	80 95       	com	r24
    2026:	89 23       	and	r24, r25
    2028:	88 b9       	out	0x08, r24	; 8
    202a:	9b b1       	in	r25, 0x0b	; 11
    202c:	f6 01       	movw	r30, r12
    202e:	80 81       	ld	r24, Z
    2030:	80 95       	com	r24
    2032:	89 23       	and	r24, r25
    2034:	8b b9       	out	0x0b, r24	; 11
    2036:	c0 90 b0 00 	lds	r12, 0x00B0
    203a:	e0 90 b1 00 	lds	r14, 0x00B1
    203e:	80 91 b0 00 	lds	r24, 0x00B0
    2042:	83 60       	ori	r24, 0x03	; 3
    2044:	80 93 b0 00 	sts	0x00B0, r24
    2048:	82 e0       	ldi	r24, 0x02	; 2
    204a:	80 93 b1 00 	sts	0x00B1, r24
    204e:	00 91 b2 00 	lds	r16, 0x00B2
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	39 c0       	rjmp	.+114    	; 0x20ca <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x17e>
    2058:	20 91 b2 00 	lds	r18, 0x00B2
    205c:	20 1b       	sub	r18, r16
    205e:	82 0f       	add	r24, r18
    2060:	91 1d       	adc	r25, r1
    2062:	02 0f       	add	r16, r18
    2064:	f3 b0       	in	r15, 0x03	; 3
    2066:	f9 14       	cp	r15, r9
    2068:	09 f0       	breq	.+2      	; 0x206c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x120>
    206a:	4d c0       	rjmp	.+154    	; 0x2106 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    206c:	96 b0       	in	r9, 0x06	; 6
    206e:	98 14       	cp	r9, r8
    2070:	09 f0       	breq	.+2      	; 0x2074 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x128>
    2072:	49 c0       	rjmp	.+146    	; 0x2106 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    2074:	29 b1       	in	r18, 0x09	; 9
    2076:	27 15       	cp	r18, r7
    2078:	09 f0       	breq	.+2      	; 0x207c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x130>
    207a:	45 c0       	rjmp	.+138    	; 0x2106 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    207c:	24 c0       	rjmp	.+72     	; 0x20c6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x17a>
    207e:	21 2f       	mov	r18, r17
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	a9 01       	movw	r20, r18
    2084:	44 0f       	add	r20, r20
    2086:	55 1f       	adc	r21, r21
    2088:	f5 01       	movw	r30, r10
    208a:	e4 0f       	add	r30, r20
    208c:	f5 1f       	adc	r31, r21
    208e:	60 81       	ld	r22, Z
    2090:	71 81       	ldd	r23, Z+1	; 0x01
    2092:	61 15       	cp	r22, r1
    2094:	71 05       	cpc	r23, r1
    2096:	99 f4       	brne	.+38     	; 0x20be <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x172>
    2098:	4c 0f       	add	r20, r28
    209a:	5d 1f       	adc	r21, r29
    209c:	da 01       	movw	r26, r20
    209e:	91 96       	adiw	r26, 0x21	; 33
    20a0:	4d 91       	ld	r20, X+
    20a2:	5c 91       	ld	r21, X
    20a4:	92 97       	sbiw	r26, 0x22	; 34
    20a6:	da 01       	movw	r26, r20
    20a8:	4c 91       	ld	r20, X
    20aa:	2c 0f       	add	r18, r28
    20ac:	3d 1f       	adc	r19, r29
    20ae:	d9 01       	movw	r26, r18
    20b0:	51 96       	adiw	r26, 0x11	; 17
    20b2:	2c 91       	ld	r18, X
    20b4:	51 97       	sbiw	r26, 0x11	; 17
    20b6:	42 23       	and	r20, r18
    20b8:	11 f4       	brne	.+4      	; 0x20be <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x172>
    20ba:	91 83       	std	Z+1, r25	; 0x01
    20bc:	80 83       	st	Z, r24
    20be:	1f 5f       	subi	r17, 0xFF	; 255
    20c0:	28 85       	ldd	r18, Y+8	; 0x08
    20c2:	12 17       	cp	r17, r18
    20c4:	e0 f2       	brcs	.-72     	; 0x207e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x132>
    20c6:	89 2c       	mov	r8, r9
    20c8:	9f 2c       	mov	r9, r15
    20ca:	2e 85       	ldd	r18, Y+14	; 0x0e
    20cc:	3f 85       	ldd	r19, Y+15	; 0x0f
    20ce:	82 17       	cp	r24, r18
    20d0:	93 07       	cpc	r25, r19
    20d2:	10 f2       	brcs	.-124    	; 0x2058 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x10c>
    20d4:	c0 92 b0 00 	sts	0x00B0, r12
    20d8:	e0 92 b1 00 	sts	0x00B1, r14
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	0f c0       	rjmp	.+30     	; 0x20fe <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1b2>
    20e0:	e2 2f       	mov	r30, r18
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	ee 0f       	add	r30, r30
    20e6:	ff 1f       	adc	r31, r31
    20e8:	ea 0d       	add	r30, r10
    20ea:	fb 1d       	adc	r31, r11
    20ec:	80 81       	ld	r24, Z
    20ee:	91 81       	ldd	r25, Z+1	; 0x01
    20f0:	00 97       	sbiw	r24, 0x00	; 0
    20f2:	21 f4       	brne	.+8      	; 0x20fc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1b0>
    20f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    20f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    20f8:	91 83       	std	Z+1, r25	; 0x01
    20fa:	80 83       	st	Z, r24
    20fc:	2f 5f       	subi	r18, 0xFF	; 255
    20fe:	88 85       	ldd	r24, Y+8	; 0x08
    2100:	28 17       	cp	r18, r24
    2102:	70 f3       	brcs	.-36     	; 0x20e0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x194>
    2104:	05 c0       	rjmp	.+10     	; 0x2110 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1c4>
    2106:	f3 b0       	in	r15, 0x03	; 3
    2108:	96 b0       	in	r9, 0x06	; 6
    210a:	79 b0       	in	r7, 0x09	; 9
    210c:	10 e0       	ldi	r17, 0x00	; 0
    210e:	d8 cf       	rjmp	.-80     	; 0x20c0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    2114:	ed e0       	ldi	r30, 0x0D	; 13
    2116:	0c 94 d6 14 	jmp	0x29ac	; 0x29ac <__epilogue_restores__+0xa>

0000211a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    211a:	ef 92       	push	r14
    211c:	ff 92       	push	r15
    211e:	0f 93       	push	r16
    2120:	1f 93       	push	r17
    2122:	cf 93       	push	r28
    2124:	df 93       	push	r29
    2126:	fc 01       	movw	r30, r24
    2128:	9b 01       	movw	r18, r22
    212a:	00 91 7c 00 	lds	r16, 0x007C
    212e:	10 91 7a 00 	lds	r17, 0x007A
    2132:	e7 b0       	in	r14, 0x07	; 7
    2134:	f8 b0       	in	r15, 0x08	; 8
    2136:	80 91 7a 00 	lds	r24, 0x007A
    213a:	86 fd       	sbrc	r24, 6
    213c:	fc cf       	rjmp	.-8      	; 0x2136 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	0a c0       	rjmp	.+20     	; 0x2156 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3c>
    2142:	a8 2f       	mov	r26, r24
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	aa 0f       	add	r26, r26
    2148:	bb 1f       	adc	r27, r27
    214a:	a2 0f       	add	r26, r18
    214c:	b3 1f       	adc	r27, r19
    214e:	11 96       	adiw	r26, 0x01	; 1
    2150:	1c 92       	st	X, r1
    2152:	1e 92       	st	-X, r1
    2154:	8f 5f       	subi	r24, 0xFF	; 255
    2156:	90 85       	ldd	r25, Z+8	; 0x08
    2158:	89 17       	cp	r24, r25
    215a:	98 f3       	brcs	.-26     	; 0x2142 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x28>
    215c:	97 b1       	in	r25, 0x07	; 7
    215e:	82 a1       	ldd	r24, Z+34	; 0x22
    2160:	80 95       	com	r24
    2162:	89 23       	and	r24, r25
    2164:	87 b9       	out	0x07, r24	; 7
    2166:	98 b1       	in	r25, 0x08	; 8
    2168:	82 a1       	ldd	r24, Z+34	; 0x22
    216a:	80 95       	com	r24
    216c:	89 23       	and	r24, r25
    216e:	88 b9       	out	0x08, r24	; 8
    2170:	87 e8       	ldi	r24, 0x87	; 135
    2172:	80 93 7a 00 	sts	0x007A, r24
    2176:	70 e0       	ldi	r23, 0x00	; 0
    2178:	29 c0       	rjmp	.+82     	; 0x21cc <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    217a:	df 01       	movw	r26, r30
    217c:	a6 0f       	add	r26, r22
    217e:	b1 1d       	adc	r27, r1
    2180:	51 96       	adiw	r26, 0x11	; 17
    2182:	8c 91       	ld	r24, X
    2184:	51 97       	sbiw	r26, 0x11	; 17
    2186:	80 64       	ori	r24, 0x40	; 64
    2188:	80 93 7c 00 	sts	0x007C, r24
    218c:	80 91 7a 00 	lds	r24, 0x007A
    2190:	80 64       	ori	r24, 0x40	; 64
    2192:	80 93 7a 00 	sts	0x007A, r24
    2196:	80 91 7a 00 	lds	r24, 0x007A
    219a:	86 fd       	sbrc	r24, 6
    219c:	fc cf       	rjmp	.-8      	; 0x2196 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x7c>
    219e:	a6 2f       	mov	r26, r22
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	aa 0f       	add	r26, r26
    21a4:	bb 1f       	adc	r27, r27
    21a6:	a2 0f       	add	r26, r18
    21a8:	b3 1f       	adc	r27, r19
    21aa:	40 91 78 00 	lds	r20, 0x0078
    21ae:	50 91 79 00 	lds	r21, 0x0079
    21b2:	8d 91       	ld	r24, X+
    21b4:	9c 91       	ld	r25, X
    21b6:	11 97       	sbiw	r26, 0x01	; 1
    21b8:	84 0f       	add	r24, r20
    21ba:	95 1f       	adc	r25, r21
    21bc:	11 96       	adiw	r26, 0x01	; 1
    21be:	9c 93       	st	X, r25
    21c0:	8e 93       	st	-X, r24
    21c2:	6f 5f       	subi	r22, 0xFF	; 255
    21c4:	80 85       	ldd	r24, Z+8	; 0x08
    21c6:	68 17       	cp	r22, r24
    21c8:	c0 f2       	brcs	.-80     	; 0x217a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x60>
    21ca:	7f 5f       	subi	r23, 0xFF	; 255
    21cc:	81 a1       	ldd	r24, Z+33	; 0x21
    21ce:	78 17       	cp	r23, r24
    21d0:	10 f4       	brcc	.+4      	; 0x21d6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xbc>
    21d2:	60 e0       	ldi	r22, 0x00	; 0
    21d4:	f7 cf       	rjmp	.-18     	; 0x21c4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xaa>
    21d6:	40 e0       	ldi	r20, 0x00	; 0
    21d8:	14 c0       	rjmp	.+40     	; 0x2202 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe8>
    21da:	c4 2f       	mov	r28, r20
    21dc:	d0 e0       	ldi	r29, 0x00	; 0
    21de:	cc 0f       	add	r28, r28
    21e0:	dd 1f       	adc	r29, r29
    21e2:	c2 0f       	add	r28, r18
    21e4:	d3 1f       	adc	r29, r19
    21e6:	61 a1       	ldd	r22, Z+33	; 0x21
    21e8:	70 e0       	ldi	r23, 0x00	; 0
    21ea:	cb 01       	movw	r24, r22
    21ec:	95 95       	asr	r25
    21ee:	87 95       	ror	r24
    21f0:	a8 81       	ld	r26, Y
    21f2:	b9 81       	ldd	r27, Y+1	; 0x01
    21f4:	8a 0f       	add	r24, r26
    21f6:	9b 1f       	adc	r25, r27
    21f8:	0e 94 32 14 	call	0x2864	; 0x2864 <__udivmodhi4>
    21fc:	79 83       	std	Y+1, r23	; 0x01
    21fe:	68 83       	st	Y, r22
    2200:	4f 5f       	subi	r20, 0xFF	; 255
    2202:	80 85       	ldd	r24, Z+8	; 0x08
    2204:	48 17       	cp	r20, r24
    2206:	48 f3       	brcs	.-46     	; 0x21da <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xc0>
    2208:	00 93 7c 00 	sts	0x007C, r16
    220c:	10 93 7a 00 	sts	0x007A, r17
    2210:	f8 b8       	out	0x08, r15	; 8
    2212:	e7 b8       	out	0x07, r14	; 7
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
    2218:	e6 e0       	ldi	r30, 0x06	; 6
    221a:	0c 94 dd 14 	jmp	0x29ba	; 0x29ba <__epilogue_restores__+0x18>

0000221e <_ZN16PololuQTRSensors4readEPjh>:
    221e:	a0 e2       	ldi	r26, 0x20	; 32
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	e5 e1       	ldi	r30, 0x15	; 21
    2224:	f1 e1       	ldi	r31, 0x11	; 17
    2226:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <__prologue_saves__+0x16>
    222a:	8c 01       	movw	r16, r24
    222c:	7b 01       	movw	r14, r22
    222e:	d4 2e       	mov	r13, r20
    2230:	84 2f       	mov	r24, r20
    2232:	81 50       	subi	r24, 0x01	; 1
    2234:	82 30       	cpi	r24, 0x02	; 2
    2236:	18 f4       	brcc	.+6      	; 0x223e <_ZN16PololuQTRSensors4readEPjh+0x20>
    2238:	c8 01       	movw	r24, r16
    223a:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_ZN16PololuQTRSensors10emittersOnEv>
    223e:	d8 01       	movw	r26, r16
    2240:	50 96       	adiw	r26, 0x10	; 16
    2242:	8c 91       	ld	r24, X
    2244:	50 97       	sbiw	r26, 0x10	; 16
    2246:	88 23       	and	r24, r24
    2248:	89 f4       	brne	.+34     	; 0x226c <_ZN16PololuQTRSensors4readEPjh+0x4e>
    224a:	c8 01       	movw	r24, r16
    224c:	b7 01       	movw	r22, r14
    224e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2252:	c8 01       	movw	r24, r16
    2254:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <_ZN16PololuQTRSensors11emittersOffEv>
    2258:	bd 2d       	mov	r27, r13
    225a:	b2 30       	cpi	r27, 0x02	; 2
    225c:	d9 f5       	brne	.+118    	; 0x22d4 <_ZN16PololuQTRSensors4readEPjh+0xb6>
    225e:	c8 01       	movw	r24, r16
    2260:	be 01       	movw	r22, r28
    2262:	6f 5f       	subi	r22, 0xFF	; 255
    2264:	7f 4f       	sbci	r23, 0xFF	; 255
    2266:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    226a:	10 c0       	rjmp	.+32     	; 0x228c <_ZN16PololuQTRSensors4readEPjh+0x6e>
    226c:	c8 01       	movw	r24, r16
    226e:	b7 01       	movw	r22, r14
    2270:	0e 94 8d 10 	call	0x211a	; 0x211a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2274:	c8 01       	movw	r24, r16
    2276:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <_ZN16PololuQTRSensors11emittersOffEv>
    227a:	ed 2d       	mov	r30, r13
    227c:	e2 30       	cpi	r30, 0x02	; 2
    227e:	51 f5       	brne	.+84     	; 0x22d4 <_ZN16PololuQTRSensors4readEPjh+0xb6>
    2280:	c8 01       	movw	r24, r16
    2282:	be 01       	movw	r22, r28
    2284:	6f 5f       	subi	r22, 0xFF	; 255
    2286:	7f 4f       	sbci	r23, 0xFF	; 255
    2288:	0e 94 8d 10 	call	0x211a	; 0x211a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    228c:	60 e0       	ldi	r22, 0x00	; 0
    228e:	ae 01       	movw	r20, r28
    2290:	4f 5f       	subi	r20, 0xFF	; 255
    2292:	5f 4f       	sbci	r21, 0xFF	; 255
    2294:	1b c0       	rjmp	.+54     	; 0x22cc <_ZN16PololuQTRSensors4readEPjh+0xae>
    2296:	86 2f       	mov	r24, r22
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	88 0f       	add	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	f7 01       	movw	r30, r14
    22a0:	e8 0f       	add	r30, r24
    22a2:	f9 1f       	adc	r31, r25
    22a4:	84 0f       	add	r24, r20
    22a6:	95 1f       	adc	r25, r21
    22a8:	d8 01       	movw	r26, r16
    22aa:	1e 96       	adiw	r26, 0x0e	; 14
    22ac:	2d 91       	ld	r18, X+
    22ae:	3c 91       	ld	r19, X
    22b0:	1f 97       	sbiw	r26, 0x0f	; 15
    22b2:	dc 01       	movw	r26, r24
    22b4:	8d 91       	ld	r24, X+
    22b6:	9c 91       	ld	r25, X
    22b8:	11 97       	sbiw	r26, 0x01	; 1
    22ba:	28 1b       	sub	r18, r24
    22bc:	39 0b       	sbc	r19, r25
    22be:	80 81       	ld	r24, Z
    22c0:	91 81       	ldd	r25, Z+1	; 0x01
    22c2:	82 0f       	add	r24, r18
    22c4:	93 1f       	adc	r25, r19
    22c6:	91 83       	std	Z+1, r25	; 0x01
    22c8:	80 83       	st	Z, r24
    22ca:	6f 5f       	subi	r22, 0xFF	; 255
    22cc:	f8 01       	movw	r30, r16
    22ce:	80 85       	ldd	r24, Z+8	; 0x08
    22d0:	68 17       	cp	r22, r24
    22d2:	08 f3       	brcs	.-62     	; 0x2296 <_ZN16PololuQTRSensors4readEPjh+0x78>
    22d4:	a0 96       	adiw	r28, 0x20	; 32
    22d6:	e7 e0       	ldi	r30, 0x07	; 7
    22d8:	0c 94 dc 14 	jmp	0x29b8	; 0x29b8 <__epilogue_restores__+0x16>

000022dc <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    22dc:	8f 92       	push	r8
    22de:	9f 92       	push	r9
    22e0:	af 92       	push	r10
    22e2:	bf 92       	push	r11
    22e4:	cf 92       	push	r12
    22e6:	df 92       	push	r13
    22e8:	ff 92       	push	r15
    22ea:	0f 93       	push	r16
    22ec:	1f 93       	push	r17
    22ee:	cf 93       	push	r28
    22f0:	df 93       	push	r29
    22f2:	ec 01       	movw	r28, r24
    22f4:	c6 2e       	mov	r12, r22
    22f6:	07 2f       	mov	r16, r23
    22f8:	f4 2e       	mov	r15, r20
    22fa:	42 30       	cpi	r20, 0x02	; 2
    22fc:	11 f0       	breq	.+4      	; 0x2302 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x26>
    22fe:	ff 20       	and	r15, r15
    2300:	51 f4       	brne	.+20     	; 0x2316 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3a>
    2302:	8c 81       	ldd	r24, Y+4	; 0x04
    2304:	9d 81       	ldd	r25, Y+5	; 0x05
    2306:	00 97       	sbiw	r24, 0x00	; 0
    2308:	09 f4       	brne	.+2      	; 0x230c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x30>
    230a:	a0 c0       	rjmp	.+320    	; 0x244c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    230c:	8e 81       	ldd	r24, Y+6	; 0x06
    230e:	9f 81       	ldd	r25, Y+7	; 0x07
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	09 f4       	brne	.+2      	; 0x2316 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3a>
    2314:	9b c0       	rjmp	.+310    	; 0x244c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    2316:	8f 2d       	mov	r24, r15
    2318:	81 50       	subi	r24, 0x01	; 1
    231a:	82 30       	cpi	r24, 0x02	; 2
    231c:	50 f4       	brcc	.+20     	; 0x2332 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x56>
    231e:	88 81       	ld	r24, Y
    2320:	99 81       	ldd	r25, Y+1	; 0x01
    2322:	00 97       	sbiw	r24, 0x00	; 0
    2324:	09 f4       	brne	.+2      	; 0x2328 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x4c>
    2326:	92 c0       	rjmp	.+292    	; 0x244c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    2328:	8a 81       	ldd	r24, Y+2	; 0x02
    232a:	9b 81       	ldd	r25, Y+3	; 0x03
    232c:	00 97       	sbiw	r24, 0x00	; 0
    232e:	09 f4       	brne	.+2      	; 0x2332 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x56>
    2330:	8d c0       	rjmp	.+282    	; 0x244c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    2332:	ce 01       	movw	r24, r28
    2334:	6c 2d       	mov	r22, r12
    2336:	70 2f       	mov	r23, r16
    2338:	4f 2d       	mov	r20, r15
    233a:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZN16PololuQTRSensors4readEPjh>
    233e:	ac 2c       	mov	r10, r12
    2340:	b0 2e       	mov	r11, r16
    2342:	00 e0       	ldi	r16, 0x00	; 0
    2344:	10 e0       	ldi	r17, 0x00	; 0
    2346:	88 24       	eor	r8, r8
    2348:	99 24       	eor	r9, r9
    234a:	7a c0       	rjmp	.+244    	; 0x2440 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x164>
    234c:	8f 2d       	mov	r24, r15
    234e:	81 30       	cpi	r24, 0x01	; 1
    2350:	59 f4       	brne	.+22     	; 0x2368 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x8c>
    2352:	ea 81       	ldd	r30, Y+2	; 0x02
    2354:	fb 81       	ldd	r31, Y+3	; 0x03
    2356:	e0 0f       	add	r30, r16
    2358:	f1 1f       	adc	r31, r17
    235a:	c0 80       	ld	r12, Z
    235c:	d1 80       	ldd	r13, Z+1	; 0x01
    235e:	e8 81       	ld	r30, Y
    2360:	f9 81       	ldd	r31, Y+1	; 0x01
    2362:	e0 0f       	add	r30, r16
    2364:	f1 1f       	adc	r31, r17
    2366:	0d c0       	rjmp	.+26     	; 0x2382 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    2368:	8c 81       	ldd	r24, Y+4	; 0x04
    236a:	9d 81       	ldd	r25, Y+5	; 0x05
    236c:	ff 20       	and	r15, r15
    236e:	61 f4       	brne	.+24     	; 0x2388 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xac>
    2370:	ee 81       	ldd	r30, Y+6	; 0x06
    2372:	ff 81       	ldd	r31, Y+7	; 0x07
    2374:	e0 0f       	add	r30, r16
    2376:	f1 1f       	adc	r31, r17
    2378:	c0 80       	ld	r12, Z
    237a:	d1 80       	ldd	r13, Z+1	; 0x01
    237c:	80 0f       	add	r24, r16
    237e:	91 1f       	adc	r25, r17
    2380:	fc 01       	movw	r30, r24
    2382:	40 81       	ld	r20, Z
    2384:	51 81       	ldd	r21, Z+1	; 0x01
    2386:	2b c0       	rjmp	.+86     	; 0x23de <_ZN16PololuQTRSensors14readCalibratedEPjh+0x102>
    2388:	80 0f       	add	r24, r16
    238a:	91 1f       	adc	r25, r17
    238c:	fc 01       	movw	r30, r24
    238e:	80 81       	ld	r24, Z
    2390:	91 81       	ldd	r25, Z+1	; 0x01
    2392:	e8 81       	ld	r30, Y
    2394:	f9 81       	ldd	r31, Y+1	; 0x01
    2396:	e0 0f       	add	r30, r16
    2398:	f1 1f       	adc	r31, r17
    239a:	40 81       	ld	r20, Z
    239c:	51 81       	ldd	r21, Z+1	; 0x01
    239e:	ce 84       	ldd	r12, Y+14	; 0x0e
    23a0:	df 84       	ldd	r13, Y+15	; 0x0f
    23a2:	84 17       	cp	r24, r20
    23a4:	95 07       	cpc	r25, r21
    23a6:	10 f4       	brcc	.+4      	; 0x23ac <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd0>
    23a8:	a6 01       	movw	r20, r12
    23aa:	04 c0       	rjmp	.+8      	; 0x23b4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd8>
    23ac:	4c 0d       	add	r20, r12
    23ae:	5d 1d       	adc	r21, r13
    23b0:	48 1b       	sub	r20, r24
    23b2:	59 0b       	sbc	r21, r25
    23b4:	ee 81       	ldd	r30, Y+6	; 0x06
    23b6:	ff 81       	ldd	r31, Y+7	; 0x07
    23b8:	e0 0f       	add	r30, r16
    23ba:	f1 1f       	adc	r31, r17
    23bc:	80 81       	ld	r24, Z
    23be:	91 81       	ldd	r25, Z+1	; 0x01
    23c0:	ea 81       	ldd	r30, Y+2	; 0x02
    23c2:	fb 81       	ldd	r31, Y+3	; 0x03
    23c4:	e0 0f       	add	r30, r16
    23c6:	f1 1f       	adc	r31, r17
    23c8:	20 81       	ld	r18, Z
    23ca:	31 81       	ldd	r19, Z+1	; 0x01
    23cc:	ce 84       	ldd	r12, Y+14	; 0x0e
    23ce:	df 84       	ldd	r13, Y+15	; 0x0f
    23d0:	82 17       	cp	r24, r18
    23d2:	93 07       	cpc	r25, r19
    23d4:	20 f0       	brcs	.+8      	; 0x23de <_ZN16PololuQTRSensors14readCalibratedEPjh+0x102>
    23d6:	c2 0e       	add	r12, r18
    23d8:	d3 1e       	adc	r13, r19
    23da:	c8 1a       	sub	r12, r24
    23dc:	d9 0a       	sbc	r13, r25
    23de:	c4 1a       	sub	r12, r20
    23e0:	d5 0a       	sbc	r13, r21
    23e2:	d1 f0       	breq	.+52     	; 0x2418 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    23e4:	f5 01       	movw	r30, r10
    23e6:	60 81       	ld	r22, Z
    23e8:	71 81       	ldd	r23, Z+1	; 0x01
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	9a 01       	movw	r18, r20
    23f0:	40 e0       	ldi	r20, 0x00	; 0
    23f2:	50 e0       	ldi	r21, 0x00	; 0
    23f4:	62 1b       	sub	r22, r18
    23f6:	73 0b       	sbc	r23, r19
    23f8:	84 0b       	sbc	r24, r20
    23fa:	95 0b       	sbc	r25, r21
    23fc:	28 ee       	ldi	r18, 0xE8	; 232
    23fe:	33 e0       	ldi	r19, 0x03	; 3
    2400:	40 e0       	ldi	r20, 0x00	; 0
    2402:	50 e0       	ldi	r21, 0x00	; 0
    2404:	0e 94 16 14 	call	0x282c	; 0x282c <__mulsi3>
    2408:	96 01       	movw	r18, r12
    240a:	40 e0       	ldi	r20, 0x00	; 0
    240c:	50 e0       	ldi	r21, 0x00	; 0
    240e:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <__divmodsi4>
    2412:	37 fd       	sbrc	r19, 7
    2414:	0a c0       	rjmp	.+20     	; 0x242a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x14e>
    2416:	02 c0       	rjmp	.+4      	; 0x241c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x140>
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	f3 e0       	ldi	r31, 0x03	; 3
    241e:	29 3e       	cpi	r18, 0xE9	; 233
    2420:	3f 07       	cpc	r19, r31
    2422:	2c f0       	brlt	.+10     	; 0x242e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x152>
    2424:	28 ee       	ldi	r18, 0xE8	; 232
    2426:	33 e0       	ldi	r19, 0x03	; 3
    2428:	02 c0       	rjmp	.+4      	; 0x242e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x152>
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	f5 01       	movw	r30, r10
    2430:	21 93       	st	Z+, r18
    2432:	31 93       	st	Z+, r19
    2434:	5f 01       	movw	r10, r30
    2436:	08 94       	sec
    2438:	81 1c       	adc	r8, r1
    243a:	91 1c       	adc	r9, r1
    243c:	0e 5f       	subi	r16, 0xFE	; 254
    243e:	1f 4f       	sbci	r17, 0xFF	; 255
    2440:	88 85       	ldd	r24, Y+8	; 0x08
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	88 16       	cp	r8, r24
    2446:	99 06       	cpc	r9, r25
    2448:	0c f4       	brge	.+2      	; 0x244c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    244a:	80 cf       	rjmp	.-256    	; 0x234c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x70>
    244c:	df 91       	pop	r29
    244e:	cf 91       	pop	r28
    2450:	1f 91       	pop	r17
    2452:	0f 91       	pop	r16
    2454:	ff 90       	pop	r15
    2456:	df 90       	pop	r13
    2458:	cf 90       	pop	r12
    245a:	bf 90       	pop	r11
    245c:	af 90       	pop	r10
    245e:	9f 90       	pop	r9
    2460:	8f 90       	pop	r8
    2462:	08 95       	ret

00002464 <_ZN16PololuQTRSensors8readLineEPjhh>:
    2464:	a5 e0       	ldi	r26, 0x05	; 5
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	e8 e3       	ldi	r30, 0x38	; 56
    246a:	f2 e1       	ldi	r31, 0x12	; 18
    246c:	0c 94 b5 14 	jmp	0x296a	; 0x296a <__prologue_saves__>
    2470:	4c 01       	movw	r8, r24
    2472:	c6 2e       	mov	r12, r22
    2474:	e7 2e       	mov	r14, r23
    2476:	2d 83       	std	Y+5, r18	; 0x05
    2478:	0e 94 6e 11 	call	0x22dc	; 0x22dc <_ZN16PololuQTRSensors14readCalibratedEPjh>
    247c:	d4 01       	movw	r26, r8
    247e:	18 96       	adiw	r26, 0x08	; 8
    2480:	4c 90       	ld	r4, X
    2482:	18 97       	sbiw	r26, 0x08	; 8
    2484:	de 2c       	mov	r13, r14
    2486:	64 2d       	mov	r22, r4
    2488:	70 e0       	ldi	r23, 0x00	; 0
    248a:	80 e0       	ldi	r24, 0x00	; 0
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	28 ee       	ldi	r18, 0xE8	; 232
    2490:	33 e0       	ldi	r19, 0x03	; 3
    2492:	40 e0       	ldi	r20, 0x00	; 0
    2494:	50 e0       	ldi	r21, 0x00	; 0
    2496:	0e 94 16 14 	call	0x282c	; 0x282c <__mulsi3>
    249a:	69 83       	std	Y+1, r22	; 0x01
    249c:	7a 83       	std	Y+2, r23	; 0x02
    249e:	8b 83       	std	Y+3, r24	; 0x03
    24a0:	9c 83       	std	Y+4, r25	; 0x04
    24a2:	ee 24       	eor	r14, r14
    24a4:	ff 24       	eor	r15, r15
    24a6:	87 01       	movw	r16, r14
    24a8:	66 24       	eor	r6, r6
    24aa:	77 24       	eor	r7, r7
    24ac:	88 24       	eor	r8, r8
    24ae:	99 24       	eor	r9, r9
    24b0:	54 01       	movw	r10, r8
    24b2:	55 24       	eor	r5, r5
    24b4:	36 c0       	rjmp	.+108    	; 0x2522 <_ZN16PololuQTRSensors8readLineEPjhh+0xbe>
    24b6:	f6 01       	movw	r30, r12
    24b8:	30 81       	ld	r19, Z
    24ba:	21 81       	ldd	r18, Z+1	; 0x01
    24bc:	42 e0       	ldi	r20, 0x02	; 2
    24be:	24 2e       	mov	r2, r20
    24c0:	31 2c       	mov	r3, r1
    24c2:	c2 0c       	add	r12, r2
    24c4:	d3 1c       	adc	r13, r3
    24c6:	c9 01       	movw	r24, r18
    24c8:	49 2f       	mov	r20, r25
    24ca:	58 2f       	mov	r21, r24
    24cc:	1a 01       	movw	r2, r20
    24ce:	2d 81       	ldd	r18, Y+5	; 0x05
    24d0:	22 23       	and	r18, r18
    24d2:	29 f0       	breq	.+10     	; 0x24de <_ZN16PololuQTRSensors8readLineEPjhh+0x7a>
    24d4:	88 ee       	ldi	r24, 0xE8	; 232
    24d6:	93 e0       	ldi	r25, 0x03	; 3
    24d8:	82 19       	sub	r24, r2
    24da:	93 09       	sbc	r25, r3
    24dc:	1c 01       	movw	r2, r24
    24de:	99 ec       	ldi	r25, 0xC9	; 201
    24e0:	29 16       	cp	r2, r25
    24e2:	31 04       	cpc	r3, r1
    24e4:	2c f4       	brge	.+10     	; 0x24f0 <_ZN16PololuQTRSensors8readLineEPjhh+0x8c>
    24e6:	a3 e3       	ldi	r26, 0x33	; 51
    24e8:	2a 16       	cp	r2, r26
    24ea:	31 04       	cpc	r3, r1
    24ec:	94 f0       	brlt	.+36     	; 0x2512 <_ZN16PololuQTRSensors8readLineEPjhh+0xae>
    24ee:	02 c0       	rjmp	.+4      	; 0x24f4 <_ZN16PololuQTRSensors8readLineEPjhh+0x90>
    24f0:	55 24       	eor	r5, r5
    24f2:	53 94       	inc	r5
    24f4:	b1 01       	movw	r22, r2
    24f6:	88 27       	eor	r24, r24
    24f8:	77 fd       	sbrc	r23, 7
    24fa:	80 95       	com	r24
    24fc:	98 2f       	mov	r25, r24
    24fe:	a8 01       	movw	r20, r16
    2500:	97 01       	movw	r18, r14
    2502:	0e 94 16 14 	call	0x282c	; 0x282c <__mulsi3>
    2506:	86 0e       	add	r8, r22
    2508:	97 1e       	adc	r9, r23
    250a:	a8 1e       	adc	r10, r24
    250c:	b9 1e       	adc	r11, r25
    250e:	62 0c       	add	r6, r2
    2510:	73 1c       	adc	r7, r3
    2512:	88 ee       	ldi	r24, 0xE8	; 232
    2514:	93 e0       	ldi	r25, 0x03	; 3
    2516:	a0 e0       	ldi	r26, 0x00	; 0
    2518:	b0 e0       	ldi	r27, 0x00	; 0
    251a:	e8 0e       	add	r14, r24
    251c:	f9 1e       	adc	r15, r25
    251e:	0a 1f       	adc	r16, r26
    2520:	1b 1f       	adc	r17, r27
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	9a 81       	ldd	r25, Y+2	; 0x02
    2526:	ab 81       	ldd	r26, Y+3	; 0x03
    2528:	bc 81       	ldd	r27, Y+4	; 0x04
    252a:	e8 16       	cp	r14, r24
    252c:	f9 06       	cpc	r15, r25
    252e:	0a 07       	cpc	r16, r26
    2530:	1b 07       	cpc	r17, r27
    2532:	09 f6       	brne	.-126    	; 0x24b6 <_ZN16PololuQTRSensors8readLineEPjhh+0x52>
    2534:	55 20       	and	r5, r5
    2536:	f1 f4       	brne	.+60     	; 0x2574 <_ZN16PololuQTRSensors8readLineEPjhh+0x110>
    2538:	55 24       	eor	r5, r5
    253a:	08 94       	sec
    253c:	41 08       	sbc	r4, r1
    253e:	51 08       	sbc	r5, r1
    2540:	24 ef       	ldi	r18, 0xF4	; 244
    2542:	31 e0       	ldi	r19, 0x01	; 1
    2544:	42 9e       	mul	r4, r18
    2546:	c0 01       	movw	r24, r0
    2548:	43 9e       	mul	r4, r19
    254a:	90 0d       	add	r25, r0
    254c:	52 9e       	mul	r5, r18
    254e:	90 0d       	add	r25, r0
    2550:	11 24       	eor	r1, r1
    2552:	20 91 af 01 	lds	r18, 0x01AF
    2556:	30 91 b0 01 	lds	r19, 0x01B0
    255a:	28 17       	cp	r18, r24
    255c:	39 07       	cpc	r19, r25
    255e:	b4 f0       	brlt	.+44     	; 0x258c <_ZN16PololuQTRSensors8readLineEPjhh+0x128>
    2560:	88 ee       	ldi	r24, 0xE8	; 232
    2562:	93 e0       	ldi	r25, 0x03	; 3
    2564:	48 9e       	mul	r4, r24
    2566:	90 01       	movw	r18, r0
    2568:	49 9e       	mul	r4, r25
    256a:	30 0d       	add	r19, r0
    256c:	58 9e       	mul	r5, r24
    256e:	30 0d       	add	r19, r0
    2570:	11 24       	eor	r1, r1
    2572:	0e c0       	rjmp	.+28     	; 0x2590 <_ZN16PololuQTRSensors8readLineEPjhh+0x12c>
    2574:	93 01       	movw	r18, r6
    2576:	40 e0       	ldi	r20, 0x00	; 0
    2578:	50 e0       	ldi	r21, 0x00	; 0
    257a:	c5 01       	movw	r24, r10
    257c:	b4 01       	movw	r22, r8
    257e:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__udivmodsi4>
    2582:	20 93 af 01 	sts	0x01AF, r18
    2586:	30 93 b0 01 	sts	0x01B0, r19
    258a:	02 c0       	rjmp	.+4      	; 0x2590 <_ZN16PololuQTRSensors8readLineEPjhh+0x12c>
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	c9 01       	movw	r24, r18
    2592:	25 96       	adiw	r28, 0x05	; 5
    2594:	e2 e1       	ldi	r30, 0x12	; 18
    2596:	0c 94 d1 14 	jmp	0x29a2	; 0x29a2 <__epilogue_restores__>

0000259a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    259a:	a7 e6       	ldi	r26, 0x67	; 103
    259c:	b0 e0       	ldi	r27, 0x00	; 0
    259e:	e3 ed       	ldi	r30, 0xD3	; 211
    25a0:	f2 e1       	ldi	r31, 0x12	; 18
    25a2:	0c 94 b5 14 	jmp	0x296a	; 0x296a <__prologue_saves__>
    25a6:	8c 01       	movw	r16, r24
    25a8:	4b 01       	movw	r8, r22
    25aa:	6a 01       	movw	r12, r20
    25ac:	a6 96       	adiw	r28, 0x26	; 38
    25ae:	2f af       	std	Y+63, r18	; 0x3f
    25b0:	a6 97       	sbiw	r28, 0x26	; 38
    25b2:	da 01       	movw	r26, r20
    25b4:	8d 91       	ld	r24, X+
    25b6:	9c 91       	ld	r25, X
    25b8:	11 97       	sbiw	r26, 0x01	; 1
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	e9 f4       	brne	.+58     	; 0x25f8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x5e>
    25be:	f8 01       	movw	r30, r16
    25c0:	80 85       	ldd	r24, Z+8	; 0x08
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	88 0f       	add	r24, r24
    25c6:	99 1f       	adc	r25, r25
    25c8:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <malloc>
    25cc:	d6 01       	movw	r26, r12
    25ce:	11 96       	adiw	r26, 0x01	; 1
    25d0:	9c 93       	st	X, r25
    25d2:	8e 93       	st	-X, r24
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	09 f4       	brne	.+2      	; 0x25da <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x40>
    25d8:	e2 c0       	rjmp	.+452    	; 0x279e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x204>
    25da:	fc 01       	movw	r30, r24
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	03 c0       	rjmp	.+6      	; 0x25e8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x4e>
    25e2:	11 92       	st	Z+, r1
    25e4:	11 92       	st	Z+, r1
    25e6:	01 96       	adiw	r24, 0x01	; 1
    25e8:	d8 01       	movw	r26, r16
    25ea:	18 96       	adiw	r26, 0x08	; 8
    25ec:	2c 91       	ld	r18, X
    25ee:	18 97       	sbiw	r26, 0x08	; 8
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	82 17       	cp	r24, r18
    25f4:	93 07       	cpc	r25, r19
    25f6:	ac f3       	brlt	.-22     	; 0x25e2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x48>
    25f8:	f4 01       	movw	r30, r8
    25fa:	80 81       	ld	r24, Z
    25fc:	91 81       	ldd	r25, Z+1	; 0x01
    25fe:	00 97       	sbiw	r24, 0x00	; 0
    2600:	89 f0       	breq	.+34     	; 0x2624 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8a>
    2602:	ee 24       	eor	r14, r14
    2604:	ff 24       	eor	r15, r15
    2606:	5e 01       	movw	r10, r28
    2608:	08 94       	sec
    260a:	a1 1c       	adc	r10, r1
    260c:	b1 1c       	adc	r11, r1
    260e:	b1 e4       	ldi	r27, 0x41	; 65
    2610:	6b 2e       	mov	r6, r27
    2612:	71 2c       	mov	r7, r1
    2614:	6c 0e       	add	r6, r28
    2616:	7d 1e       	adc	r7, r29
    2618:	a1 e2       	ldi	r26, 0x21	; 33
    261a:	4a 2e       	mov	r4, r26
    261c:	51 2c       	mov	r5, r1
    261e:	4c 0e       	add	r4, r28
    2620:	5d 1e       	adc	r5, r29
    2622:	23 c0       	rjmp	.+70     	; 0x266a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xd0>
    2624:	d8 01       	movw	r26, r16
    2626:	18 96       	adiw	r26, 0x08	; 8
    2628:	8c 91       	ld	r24, X
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	88 0f       	add	r24, r24
    262e:	99 1f       	adc	r25, r25
    2630:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <malloc>
    2634:	f4 01       	movw	r30, r8
    2636:	91 83       	std	Z+1, r25	; 0x01
    2638:	80 83       	st	Z, r24
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	09 f4       	brne	.+2      	; 0x2640 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xa6>
    263e:	af c0       	rjmp	.+350    	; 0x279e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x204>
    2640:	fc 01       	movw	r30, r24
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	d8 01       	movw	r26, r16
    2648:	07 c0       	rjmp	.+14     	; 0x2658 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xbe>
    264a:	1e 96       	adiw	r26, 0x0e	; 14
    264c:	2d 91       	ld	r18, X+
    264e:	3c 91       	ld	r19, X
    2650:	1f 97       	sbiw	r26, 0x0f	; 15
    2652:	21 93       	st	Z+, r18
    2654:	31 93       	st	Z+, r19
    2656:	01 96       	adiw	r24, 0x01	; 1
    2658:	18 96       	adiw	r26, 0x08	; 8
    265a:	2c 91       	ld	r18, X
    265c:	18 97       	sbiw	r26, 0x08	; 8
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	82 17       	cp	r24, r18
    2662:	93 07       	cpc	r25, r19
    2664:	94 f3       	brlt	.-28     	; 0x264a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb0>
    2666:	8d 01       	movw	r16, r26
    2668:	cc cf       	rjmp	.-104    	; 0x2602 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x68>
    266a:	c8 01       	movw	r24, r16
    266c:	b5 01       	movw	r22, r10
    266e:	a6 96       	adiw	r28, 0x26	; 38
    2670:	4f ad       	ldd	r20, Y+63	; 0x3f
    2672:	a6 97       	sbiw	r28, 0x26	; 38
    2674:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZN16PololuQTRSensors4readEPjh>
    2678:	d8 01       	movw	r26, r16
    267a:	18 96       	adiw	r26, 0x08	; 8
    267c:	8c 91       	ld	r24, X
    267e:	18 97       	sbiw	r26, 0x08	; 8
    2680:	e8 2f       	mov	r30, r24
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	a5 96       	adiw	r28, 0x25	; 37
    2686:	ff af       	std	Y+63, r31	; 0x3f
    2688:	ee af       	std	Y+62, r30	; 0x3e
    268a:	a5 97       	sbiw	r28, 0x25	; 37
    268c:	13 01       	movw	r2, r6
    268e:	f5 01       	movw	r30, r10
    2690:	a3 96       	adiw	r28, 0x23	; 35
    2692:	5f ae       	std	Y+63, r5	; 0x3f
    2694:	4e ae       	std	Y+62, r4	; 0x3e
    2696:	a3 97       	sbiw	r28, 0x23	; 35
    2698:	93 01       	movw	r18, r6
    269a:	40 e0       	ldi	r20, 0x00	; 0
    269c:	50 e0       	ldi	r21, 0x00	; 0
    269e:	a8 96       	adiw	r28, 0x28	; 40
    26a0:	5f ae       	std	Y+63, r5	; 0x3f
    26a2:	4e ae       	std	Y+62, r4	; 0x3e
    26a4:	a8 97       	sbiw	r28, 0x28	; 40
    26a6:	37 c0       	rjmp	.+110    	; 0x2716 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17c>
    26a8:	e1 14       	cp	r14, r1
    26aa:	f1 04       	cpc	r15, r1
    26ac:	61 f0       	breq	.+24     	; 0x26c6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x12c>
    26ae:	a8 96       	adiw	r28, 0x28	; 40
    26b0:	ae ad       	ldd	r26, Y+62	; 0x3e
    26b2:	bf ad       	ldd	r27, Y+63	; 0x3f
    26b4:	a8 97       	sbiw	r28, 0x28	; 40
    26b6:	6d 91       	ld	r22, X+
    26b8:	7c 91       	ld	r23, X
    26ba:	11 97       	sbiw	r26, 0x01	; 1
    26bc:	80 81       	ld	r24, Z
    26be:	91 81       	ldd	r25, Z+1	; 0x01
    26c0:	68 17       	cp	r22, r24
    26c2:	79 07       	cpc	r23, r25
    26c4:	60 f4       	brcc	.+24     	; 0x26de <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x144>
    26c6:	80 81       	ld	r24, Z
    26c8:	91 81       	ldd	r25, Z+1	; 0x01
    26ca:	a8 96       	adiw	r28, 0x28	; 40
    26cc:	ae ad       	ldd	r26, Y+62	; 0x3e
    26ce:	bf ad       	ldd	r27, Y+63	; 0x3f
    26d0:	a8 97       	sbiw	r28, 0x28	; 40
    26d2:	11 96       	adiw	r26, 0x01	; 1
    26d4:	9c 93       	st	X, r25
    26d6:	8e 93       	st	-X, r24
    26d8:	e1 14       	cp	r14, r1
    26da:	f1 04       	cpc	r15, r1
    26dc:	49 f0       	breq	.+18     	; 0x26f0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x156>
    26de:	d9 01       	movw	r26, r18
    26e0:	6d 91       	ld	r22, X+
    26e2:	7c 91       	ld	r23, X
    26e4:	11 97       	sbiw	r26, 0x01	; 1
    26e6:	80 81       	ld	r24, Z
    26e8:	91 81       	ldd	r25, Z+1	; 0x01
    26ea:	86 17       	cp	r24, r22
    26ec:	97 07       	cpc	r25, r23
    26ee:	28 f4       	brcc	.+10     	; 0x26fa <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x160>
    26f0:	80 81       	ld	r24, Z
    26f2:	91 81       	ldd	r25, Z+1	; 0x01
    26f4:	d9 01       	movw	r26, r18
    26f6:	8d 93       	st	X+, r24
    26f8:	9c 93       	st	X, r25
    26fa:	4f 5f       	subi	r20, 0xFF	; 255
    26fc:	5f 4f       	sbci	r21, 0xFF	; 255
    26fe:	2e 5f       	subi	r18, 0xFE	; 254
    2700:	3f 4f       	sbci	r19, 0xFF	; 255
    2702:	32 96       	adiw	r30, 0x02	; 2
    2704:	a8 96       	adiw	r28, 0x28	; 40
    2706:	8e ad       	ldd	r24, Y+62	; 0x3e
    2708:	9f ad       	ldd	r25, Y+63	; 0x3f
    270a:	a8 97       	sbiw	r28, 0x28	; 40
    270c:	02 96       	adiw	r24, 0x02	; 2
    270e:	a8 96       	adiw	r28, 0x28	; 40
    2710:	9f af       	std	Y+63, r25	; 0x3f
    2712:	8e af       	std	Y+62, r24	; 0x3e
    2714:	a8 97       	sbiw	r28, 0x28	; 40
    2716:	a5 96       	adiw	r28, 0x25	; 37
    2718:	ae ad       	ldd	r26, Y+62	; 0x3e
    271a:	bf ad       	ldd	r27, Y+63	; 0x3f
    271c:	a5 97       	sbiw	r28, 0x25	; 37
    271e:	4a 17       	cp	r20, r26
    2720:	5b 07       	cpc	r21, r27
    2722:	14 f2       	brlt	.-124    	; 0x26a8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x10e>
    2724:	08 94       	sec
    2726:	e1 1c       	adc	r14, r1
    2728:	f1 1c       	adc	r15, r1
    272a:	ba e0       	ldi	r27, 0x0A	; 10
    272c:	eb 16       	cp	r14, r27
    272e:	f1 04       	cpc	r15, r1
    2730:	09 f0       	breq	.+2      	; 0x2734 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x19a>
    2732:	9b cf       	rjmp	.-202    	; 0x266a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xd0>
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	2c c0       	rjmp	.+88     	; 0x2792 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1f8>
    273a:	f1 01       	movw	r30, r2
    273c:	41 91       	ld	r20, Z+
    273e:	51 91       	ld	r21, Z+
    2740:	1f 01       	movw	r2, r30
    2742:	bc 01       	movw	r22, r24
    2744:	66 0f       	add	r22, r22
    2746:	77 1f       	adc	r23, r23
    2748:	d6 01       	movw	r26, r12
    274a:	ed 91       	ld	r30, X+
    274c:	fc 91       	ld	r31, X
    274e:	11 97       	sbiw	r26, 0x01	; 1
    2750:	e6 0f       	add	r30, r22
    2752:	f7 1f       	adc	r31, r23
    2754:	20 81       	ld	r18, Z
    2756:	31 81       	ldd	r19, Z+1	; 0x01
    2758:	24 17       	cp	r18, r20
    275a:	35 07       	cpc	r19, r21
    275c:	10 f4       	brcc	.+4      	; 0x2762 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1c8>
    275e:	51 83       	std	Z+1, r21	; 0x01
    2760:	40 83       	st	Z, r20
    2762:	a3 96       	adiw	r28, 0x23	; 35
    2764:	ee ad       	ldd	r30, Y+62	; 0x3e
    2766:	ff ad       	ldd	r31, Y+63	; 0x3f
    2768:	a3 97       	sbiw	r28, 0x23	; 35
    276a:	41 91       	ld	r20, Z+
    276c:	51 91       	ld	r21, Z+
    276e:	a3 96       	adiw	r28, 0x23	; 35
    2770:	ff af       	std	Y+63, r31	; 0x3f
    2772:	ee af       	std	Y+62, r30	; 0x3e
    2774:	a3 97       	sbiw	r28, 0x23	; 35
    2776:	d4 01       	movw	r26, r8
    2778:	ed 91       	ld	r30, X+
    277a:	fc 91       	ld	r31, X
    277c:	11 97       	sbiw	r26, 0x01	; 1
    277e:	e6 0f       	add	r30, r22
    2780:	f7 1f       	adc	r31, r23
    2782:	20 81       	ld	r18, Z
    2784:	31 81       	ldd	r19, Z+1	; 0x01
    2786:	42 17       	cp	r20, r18
    2788:	53 07       	cpc	r21, r19
    278a:	10 f4       	brcc	.+4      	; 0x2790 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1f6>
    278c:	51 83       	std	Z+1, r21	; 0x01
    278e:	40 83       	st	Z, r20
    2790:	01 96       	adiw	r24, 0x01	; 1
    2792:	f8 01       	movw	r30, r16
    2794:	20 85       	ldd	r18, Z+8	; 0x08
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	82 17       	cp	r24, r18
    279a:	93 07       	cpc	r25, r19
    279c:	74 f2       	brlt	.-100    	; 0x273a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1a0>
    279e:	c9 59       	subi	r28, 0x99	; 153
    27a0:	df 4f       	sbci	r29, 0xFF	; 255
    27a2:	e2 e1       	ldi	r30, 0x12	; 18
    27a4:	0c 94 d1 14 	jmp	0x29a2	; 0x29a2 <__epilogue_restores__>

000027a8 <_ZN16PololuQTRSensors9calibrateEh>:
    27a8:	1f 93       	push	r17
    27aa:	cf 93       	push	r28
    27ac:	df 93       	push	r29
    27ae:	ec 01       	movw	r28, r24
    27b0:	16 2f       	mov	r17, r22
    27b2:	86 2f       	mov	r24, r22
    27b4:	81 50       	subi	r24, 0x01	; 1
    27b6:	82 30       	cpi	r24, 0x02	; 2
    27b8:	58 f4       	brcc	.+22     	; 0x27d0 <_ZN16PololuQTRSensors9calibrateEh+0x28>
    27ba:	ae 01       	movw	r20, r28
    27bc:	4e 5f       	subi	r20, 0xFE	; 254
    27be:	5f 4f       	sbci	r21, 0xFF	; 255
    27c0:	ce 01       	movw	r24, r28
    27c2:	be 01       	movw	r22, r28
    27c4:	21 e0       	ldi	r18, 0x01	; 1
    27c6:	0e 94 cd 12 	call	0x259a	; 0x259a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    27ca:	12 30       	cpi	r17, 0x02	; 2
    27cc:	19 f0       	breq	.+6      	; 0x27d4 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    27ce:	0c c0       	rjmp	.+24     	; 0x27e8 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    27d0:	66 23       	and	r22, r22
    27d2:	51 f4       	brne	.+20     	; 0x27e8 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    27d4:	be 01       	movw	r22, r28
    27d6:	6c 5f       	subi	r22, 0xFC	; 252
    27d8:	7f 4f       	sbci	r23, 0xFF	; 255
    27da:	ae 01       	movw	r20, r28
    27dc:	4a 5f       	subi	r20, 0xFA	; 250
    27de:	5f 4f       	sbci	r21, 0xFF	; 255
    27e0:	ce 01       	movw	r24, r28
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	0e 94 cd 12 	call	0x259a	; 0x259a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    27e8:	df 91       	pop	r29
    27ea:	cf 91       	pop	r28
    27ec:	1f 91       	pop	r17
    27ee:	08 95       	ret

000027f0 <_ZN16PololuQTRSensorsD1Ev>:
    27f0:	cf 93       	push	r28
    27f2:	df 93       	push	r29
    27f4:	ec 01       	movw	r28, r24
    27f6:	8a 81       	ldd	r24, Y+2	; 0x02
    27f8:	9b 81       	ldd	r25, Y+3	; 0x03
    27fa:	00 97       	sbiw	r24, 0x00	; 0
    27fc:	11 f0       	breq	.+4      	; 0x2802 <_ZN16PololuQTRSensorsD1Ev+0x12>
    27fe:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <free>
    2802:	8e 81       	ldd	r24, Y+6	; 0x06
    2804:	9f 81       	ldd	r25, Y+7	; 0x07
    2806:	00 97       	sbiw	r24, 0x00	; 0
    2808:	11 f0       	breq	.+4      	; 0x280e <_ZN16PololuQTRSensorsD1Ev+0x1e>
    280a:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <free>
    280e:	88 81       	ld	r24, Y
    2810:	99 81       	ldd	r25, Y+1	; 0x01
    2812:	00 97       	sbiw	r24, 0x00	; 0
    2814:	11 f0       	breq	.+4      	; 0x281a <_ZN16PololuQTRSensorsD1Ev+0x2a>
    2816:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <free>
    281a:	8c 81       	ldd	r24, Y+4	; 0x04
    281c:	9d 81       	ldd	r25, Y+5	; 0x05
    281e:	00 97       	sbiw	r24, 0x00	; 0
    2820:	11 f0       	breq	.+4      	; 0x2826 <_ZN16PololuQTRSensorsD1Ev+0x36>
    2822:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <free>
    2826:	df 91       	pop	r29
    2828:	cf 91       	pop	r28
    282a:	08 95       	ret

0000282c <__mulsi3>:
    282c:	db 01       	movw	r26, r22
    282e:	8f 93       	push	r24
    2830:	9f 93       	push	r25
    2832:	0e 94 aa 14 	call	0x2954	; 0x2954 <__muluhisi3>
    2836:	bf 91       	pop	r27
    2838:	af 91       	pop	r26
    283a:	a2 9f       	mul	r26, r18
    283c:	80 0d       	add	r24, r0
    283e:	91 1d       	adc	r25, r1
    2840:	a3 9f       	mul	r26, r19
    2842:	90 0d       	add	r25, r0
    2844:	b2 9f       	mul	r27, r18
    2846:	90 0d       	add	r25, r0
    2848:	11 24       	eor	r1, r1
    284a:	08 95       	ret

0000284c <__udivmodqi4>:
    284c:	99 1b       	sub	r25, r25
    284e:	79 e0       	ldi	r23, 0x09	; 9
    2850:	04 c0       	rjmp	.+8      	; 0x285a <__udivmodqi4_ep>

00002852 <__udivmodqi4_loop>:
    2852:	99 1f       	adc	r25, r25
    2854:	96 17       	cp	r25, r22
    2856:	08 f0       	brcs	.+2      	; 0x285a <__udivmodqi4_ep>
    2858:	96 1b       	sub	r25, r22

0000285a <__udivmodqi4_ep>:
    285a:	88 1f       	adc	r24, r24
    285c:	7a 95       	dec	r23
    285e:	c9 f7       	brne	.-14     	; 0x2852 <__udivmodqi4_loop>
    2860:	80 95       	com	r24
    2862:	08 95       	ret

00002864 <__udivmodhi4>:
    2864:	aa 1b       	sub	r26, r26
    2866:	bb 1b       	sub	r27, r27
    2868:	51 e1       	ldi	r21, 0x11	; 17
    286a:	07 c0       	rjmp	.+14     	; 0x287a <__udivmodhi4_ep>

0000286c <__udivmodhi4_loop>:
    286c:	aa 1f       	adc	r26, r26
    286e:	bb 1f       	adc	r27, r27
    2870:	a6 17       	cp	r26, r22
    2872:	b7 07       	cpc	r27, r23
    2874:	10 f0       	brcs	.+4      	; 0x287a <__udivmodhi4_ep>
    2876:	a6 1b       	sub	r26, r22
    2878:	b7 0b       	sbc	r27, r23

0000287a <__udivmodhi4_ep>:
    287a:	88 1f       	adc	r24, r24
    287c:	99 1f       	adc	r25, r25
    287e:	5a 95       	dec	r21
    2880:	a9 f7       	brne	.-22     	; 0x286c <__udivmodhi4_loop>
    2882:	80 95       	com	r24
    2884:	90 95       	com	r25
    2886:	bc 01       	movw	r22, r24
    2888:	cd 01       	movw	r24, r26
    288a:	08 95       	ret

0000288c <__divmodhi4>:
    288c:	97 fb       	bst	r25, 7
    288e:	07 2e       	mov	r0, r23
    2890:	16 f4       	brtc	.+4      	; 0x2896 <__divmodhi4+0xa>
    2892:	00 94       	com	r0
    2894:	07 d0       	rcall	.+14     	; 0x28a4 <__divmodhi4_neg1>
    2896:	77 fd       	sbrc	r23, 7
    2898:	09 d0       	rcall	.+18     	; 0x28ac <__divmodhi4_neg2>
    289a:	0e 94 32 14 	call	0x2864	; 0x2864 <__udivmodhi4>
    289e:	07 fc       	sbrc	r0, 7
    28a0:	05 d0       	rcall	.+10     	; 0x28ac <__divmodhi4_neg2>
    28a2:	3e f4       	brtc	.+14     	; 0x28b2 <__divmodhi4_exit>

000028a4 <__divmodhi4_neg1>:
    28a4:	90 95       	com	r25
    28a6:	81 95       	neg	r24
    28a8:	9f 4f       	sbci	r25, 0xFF	; 255
    28aa:	08 95       	ret

000028ac <__divmodhi4_neg2>:
    28ac:	70 95       	com	r23
    28ae:	61 95       	neg	r22
    28b0:	7f 4f       	sbci	r23, 0xFF	; 255

000028b2 <__divmodhi4_exit>:
    28b2:	08 95       	ret

000028b4 <__udivmodsi4>:
    28b4:	a1 e2       	ldi	r26, 0x21	; 33
    28b6:	1a 2e       	mov	r1, r26
    28b8:	aa 1b       	sub	r26, r26
    28ba:	bb 1b       	sub	r27, r27
    28bc:	fd 01       	movw	r30, r26
    28be:	0d c0       	rjmp	.+26     	; 0x28da <__udivmodsi4_ep>

000028c0 <__udivmodsi4_loop>:
    28c0:	aa 1f       	adc	r26, r26
    28c2:	bb 1f       	adc	r27, r27
    28c4:	ee 1f       	adc	r30, r30
    28c6:	ff 1f       	adc	r31, r31
    28c8:	a2 17       	cp	r26, r18
    28ca:	b3 07       	cpc	r27, r19
    28cc:	e4 07       	cpc	r30, r20
    28ce:	f5 07       	cpc	r31, r21
    28d0:	20 f0       	brcs	.+8      	; 0x28da <__udivmodsi4_ep>
    28d2:	a2 1b       	sub	r26, r18
    28d4:	b3 0b       	sbc	r27, r19
    28d6:	e4 0b       	sbc	r30, r20
    28d8:	f5 0b       	sbc	r31, r21

000028da <__udivmodsi4_ep>:
    28da:	66 1f       	adc	r22, r22
    28dc:	77 1f       	adc	r23, r23
    28de:	88 1f       	adc	r24, r24
    28e0:	99 1f       	adc	r25, r25
    28e2:	1a 94       	dec	r1
    28e4:	69 f7       	brne	.-38     	; 0x28c0 <__udivmodsi4_loop>
    28e6:	60 95       	com	r22
    28e8:	70 95       	com	r23
    28ea:	80 95       	com	r24
    28ec:	90 95       	com	r25
    28ee:	9b 01       	movw	r18, r22
    28f0:	ac 01       	movw	r20, r24
    28f2:	bd 01       	movw	r22, r26
    28f4:	cf 01       	movw	r24, r30
    28f6:	08 95       	ret

000028f8 <__divmodsi4>:
    28f8:	05 2e       	mov	r0, r21
    28fa:	97 fb       	bst	r25, 7
    28fc:	1e f4       	brtc	.+6      	; 0x2904 <__divmodsi4+0xc>
    28fe:	00 94       	com	r0
    2900:	0e 94 93 14 	call	0x2926	; 0x2926 <__negsi2>
    2904:	57 fd       	sbrc	r21, 7
    2906:	07 d0       	rcall	.+14     	; 0x2916 <__divmodsi4_neg2>
    2908:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__udivmodsi4>
    290c:	07 fc       	sbrc	r0, 7
    290e:	03 d0       	rcall	.+6      	; 0x2916 <__divmodsi4_neg2>
    2910:	4e f4       	brtc	.+18     	; 0x2924 <__divmodsi4_exit>
    2912:	0c 94 93 14 	jmp	0x2926	; 0x2926 <__negsi2>

00002916 <__divmodsi4_neg2>:
    2916:	50 95       	com	r21
    2918:	40 95       	com	r20
    291a:	30 95       	com	r19
    291c:	21 95       	neg	r18
    291e:	3f 4f       	sbci	r19, 0xFF	; 255
    2920:	4f 4f       	sbci	r20, 0xFF	; 255
    2922:	5f 4f       	sbci	r21, 0xFF	; 255

00002924 <__divmodsi4_exit>:
    2924:	08 95       	ret

00002926 <__negsi2>:
    2926:	90 95       	com	r25
    2928:	80 95       	com	r24
    292a:	70 95       	com	r23
    292c:	61 95       	neg	r22
    292e:	7f 4f       	sbci	r23, 0xFF	; 255
    2930:	8f 4f       	sbci	r24, 0xFF	; 255
    2932:	9f 4f       	sbci	r25, 0xFF	; 255
    2934:	08 95       	ret

00002936 <__umulhisi3>:
    2936:	a2 9f       	mul	r26, r18
    2938:	b0 01       	movw	r22, r0
    293a:	b3 9f       	mul	r27, r19
    293c:	c0 01       	movw	r24, r0
    293e:	a3 9f       	mul	r26, r19
    2940:	70 0d       	add	r23, r0
    2942:	81 1d       	adc	r24, r1
    2944:	11 24       	eor	r1, r1
    2946:	91 1d       	adc	r25, r1
    2948:	b2 9f       	mul	r27, r18
    294a:	70 0d       	add	r23, r0
    294c:	81 1d       	adc	r24, r1
    294e:	11 24       	eor	r1, r1
    2950:	91 1d       	adc	r25, r1
    2952:	08 95       	ret

00002954 <__muluhisi3>:
    2954:	0e 94 9b 14 	call	0x2936	; 0x2936 <__umulhisi3>
    2958:	a5 9f       	mul	r26, r21
    295a:	90 0d       	add	r25, r0
    295c:	b4 9f       	mul	r27, r20
    295e:	90 0d       	add	r25, r0
    2960:	a4 9f       	mul	r26, r20
    2962:	80 0d       	add	r24, r0
    2964:	91 1d       	adc	r25, r1
    2966:	11 24       	eor	r1, r1
    2968:	08 95       	ret

0000296a <__prologue_saves__>:
    296a:	2f 92       	push	r2
    296c:	3f 92       	push	r3
    296e:	4f 92       	push	r4
    2970:	5f 92       	push	r5
    2972:	6f 92       	push	r6
    2974:	7f 92       	push	r7
    2976:	8f 92       	push	r8
    2978:	9f 92       	push	r9
    297a:	af 92       	push	r10
    297c:	bf 92       	push	r11
    297e:	cf 92       	push	r12
    2980:	df 92       	push	r13
    2982:	ef 92       	push	r14
    2984:	ff 92       	push	r15
    2986:	0f 93       	push	r16
    2988:	1f 93       	push	r17
    298a:	cf 93       	push	r28
    298c:	df 93       	push	r29
    298e:	cd b7       	in	r28, 0x3d	; 61
    2990:	de b7       	in	r29, 0x3e	; 62
    2992:	ca 1b       	sub	r28, r26
    2994:	db 0b       	sbc	r29, r27
    2996:	0f b6       	in	r0, 0x3f	; 63
    2998:	f8 94       	cli
    299a:	de bf       	out	0x3e, r29	; 62
    299c:	0f be       	out	0x3f, r0	; 63
    299e:	cd bf       	out	0x3d, r28	; 61
    29a0:	09 94       	ijmp

000029a2 <__epilogue_restores__>:
    29a2:	2a 88       	ldd	r2, Y+18	; 0x12
    29a4:	39 88       	ldd	r3, Y+17	; 0x11
    29a6:	48 88       	ldd	r4, Y+16	; 0x10
    29a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    29aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    29ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    29ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    29b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    29b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    29b4:	b9 84       	ldd	r11, Y+9	; 0x09
    29b6:	c8 84       	ldd	r12, Y+8	; 0x08
    29b8:	df 80       	ldd	r13, Y+7	; 0x07
    29ba:	ee 80       	ldd	r14, Y+6	; 0x06
    29bc:	fd 80       	ldd	r15, Y+5	; 0x05
    29be:	0c 81       	ldd	r16, Y+4	; 0x04
    29c0:	1b 81       	ldd	r17, Y+3	; 0x03
    29c2:	aa 81       	ldd	r26, Y+2	; 0x02
    29c4:	b9 81       	ldd	r27, Y+1	; 0x01
    29c6:	ce 0f       	add	r28, r30
    29c8:	d1 1d       	adc	r29, r1
    29ca:	0f b6       	in	r0, 0x3f	; 63
    29cc:	f8 94       	cli
    29ce:	de bf       	out	0x3e, r29	; 62
    29d0:	0f be       	out	0x3f, r0	; 63
    29d2:	cd bf       	out	0x3d, r28	; 61
    29d4:	ed 01       	movw	r28, r26
    29d6:	08 95       	ret

000029d8 <__tablejump2__>:
    29d8:	ee 0f       	add	r30, r30
    29da:	ff 1f       	adc	r31, r31

000029dc <__tablejump__>:
    29dc:	05 90       	lpm	r0, Z+
    29de:	f4 91       	lpm	r31, Z
    29e0:	e0 2d       	mov	r30, r0
    29e2:	09 94       	ijmp

000029e4 <malloc>:
    29e4:	cf 93       	push	r28
    29e6:	df 93       	push	r29
    29e8:	82 30       	cpi	r24, 0x02	; 2
    29ea:	91 05       	cpc	r25, r1
    29ec:	10 f4       	brcc	.+4      	; 0x29f2 <malloc+0xe>
    29ee:	82 e0       	ldi	r24, 0x02	; 2
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	e0 91 be 01 	lds	r30, 0x01BE
    29f6:	f0 91 bf 01 	lds	r31, 0x01BF
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	a0 e0       	ldi	r26, 0x00	; 0
    2a00:	b0 e0       	ldi	r27, 0x00	; 0
    2a02:	30 97       	sbiw	r30, 0x00	; 0
    2a04:	39 f1       	breq	.+78     	; 0x2a54 <malloc+0x70>
    2a06:	40 81       	ld	r20, Z
    2a08:	51 81       	ldd	r21, Z+1	; 0x01
    2a0a:	48 17       	cp	r20, r24
    2a0c:	59 07       	cpc	r21, r25
    2a0e:	b8 f0       	brcs	.+46     	; 0x2a3e <malloc+0x5a>
    2a10:	48 17       	cp	r20, r24
    2a12:	59 07       	cpc	r21, r25
    2a14:	71 f4       	brne	.+28     	; 0x2a32 <malloc+0x4e>
    2a16:	82 81       	ldd	r24, Z+2	; 0x02
    2a18:	93 81       	ldd	r25, Z+3	; 0x03
    2a1a:	10 97       	sbiw	r26, 0x00	; 0
    2a1c:	29 f0       	breq	.+10     	; 0x2a28 <malloc+0x44>
    2a1e:	13 96       	adiw	r26, 0x03	; 3
    2a20:	9c 93       	st	X, r25
    2a22:	8e 93       	st	-X, r24
    2a24:	12 97       	sbiw	r26, 0x02	; 2
    2a26:	2c c0       	rjmp	.+88     	; 0x2a80 <malloc+0x9c>
    2a28:	90 93 bf 01 	sts	0x01BF, r25
    2a2c:	80 93 be 01 	sts	0x01BE, r24
    2a30:	27 c0       	rjmp	.+78     	; 0x2a80 <malloc+0x9c>
    2a32:	21 15       	cp	r18, r1
    2a34:	31 05       	cpc	r19, r1
    2a36:	31 f0       	breq	.+12     	; 0x2a44 <malloc+0x60>
    2a38:	42 17       	cp	r20, r18
    2a3a:	53 07       	cpc	r21, r19
    2a3c:	18 f0       	brcs	.+6      	; 0x2a44 <malloc+0x60>
    2a3e:	a9 01       	movw	r20, r18
    2a40:	db 01       	movw	r26, r22
    2a42:	01 c0       	rjmp	.+2      	; 0x2a46 <malloc+0x62>
    2a44:	ef 01       	movw	r28, r30
    2a46:	9a 01       	movw	r18, r20
    2a48:	bd 01       	movw	r22, r26
    2a4a:	df 01       	movw	r26, r30
    2a4c:	02 80       	ldd	r0, Z+2	; 0x02
    2a4e:	f3 81       	ldd	r31, Z+3	; 0x03
    2a50:	e0 2d       	mov	r30, r0
    2a52:	d7 cf       	rjmp	.-82     	; 0x2a02 <malloc+0x1e>
    2a54:	21 15       	cp	r18, r1
    2a56:	31 05       	cpc	r19, r1
    2a58:	f9 f0       	breq	.+62     	; 0x2a98 <malloc+0xb4>
    2a5a:	28 1b       	sub	r18, r24
    2a5c:	39 0b       	sbc	r19, r25
    2a5e:	24 30       	cpi	r18, 0x04	; 4
    2a60:	31 05       	cpc	r19, r1
    2a62:	80 f4       	brcc	.+32     	; 0x2a84 <malloc+0xa0>
    2a64:	8a 81       	ldd	r24, Y+2	; 0x02
    2a66:	9b 81       	ldd	r25, Y+3	; 0x03
    2a68:	61 15       	cp	r22, r1
    2a6a:	71 05       	cpc	r23, r1
    2a6c:	21 f0       	breq	.+8      	; 0x2a76 <malloc+0x92>
    2a6e:	fb 01       	movw	r30, r22
    2a70:	93 83       	std	Z+3, r25	; 0x03
    2a72:	82 83       	std	Z+2, r24	; 0x02
    2a74:	04 c0       	rjmp	.+8      	; 0x2a7e <malloc+0x9a>
    2a76:	90 93 bf 01 	sts	0x01BF, r25
    2a7a:	80 93 be 01 	sts	0x01BE, r24
    2a7e:	fe 01       	movw	r30, r28
    2a80:	32 96       	adiw	r30, 0x02	; 2
    2a82:	44 c0       	rjmp	.+136    	; 0x2b0c <malloc+0x128>
    2a84:	fe 01       	movw	r30, r28
    2a86:	e2 0f       	add	r30, r18
    2a88:	f3 1f       	adc	r31, r19
    2a8a:	81 93       	st	Z+, r24
    2a8c:	91 93       	st	Z+, r25
    2a8e:	22 50       	subi	r18, 0x02	; 2
    2a90:	31 09       	sbc	r19, r1
    2a92:	39 83       	std	Y+1, r19	; 0x01
    2a94:	28 83       	st	Y, r18
    2a96:	3a c0       	rjmp	.+116    	; 0x2b0c <malloc+0x128>
    2a98:	20 91 bc 01 	lds	r18, 0x01BC
    2a9c:	30 91 bd 01 	lds	r19, 0x01BD
    2aa0:	23 2b       	or	r18, r19
    2aa2:	41 f4       	brne	.+16     	; 0x2ab4 <malloc+0xd0>
    2aa4:	20 91 2d 01 	lds	r18, 0x012D
    2aa8:	30 91 2e 01 	lds	r19, 0x012E
    2aac:	30 93 bd 01 	sts	0x01BD, r19
    2ab0:	20 93 bc 01 	sts	0x01BC, r18
    2ab4:	20 91 2b 01 	lds	r18, 0x012B
    2ab8:	30 91 2c 01 	lds	r19, 0x012C
    2abc:	21 15       	cp	r18, r1
    2abe:	31 05       	cpc	r19, r1
    2ac0:	41 f4       	brne	.+16     	; 0x2ad2 <malloc+0xee>
    2ac2:	2d b7       	in	r18, 0x3d	; 61
    2ac4:	3e b7       	in	r19, 0x3e	; 62
    2ac6:	40 91 2f 01 	lds	r20, 0x012F
    2aca:	50 91 30 01 	lds	r21, 0x0130
    2ace:	24 1b       	sub	r18, r20
    2ad0:	35 0b       	sbc	r19, r21
    2ad2:	e0 91 bc 01 	lds	r30, 0x01BC
    2ad6:	f0 91 bd 01 	lds	r31, 0x01BD
    2ada:	e2 17       	cp	r30, r18
    2adc:	f3 07       	cpc	r31, r19
    2ade:	a0 f4       	brcc	.+40     	; 0x2b08 <malloc+0x124>
    2ae0:	2e 1b       	sub	r18, r30
    2ae2:	3f 0b       	sbc	r19, r31
    2ae4:	28 17       	cp	r18, r24
    2ae6:	39 07       	cpc	r19, r25
    2ae8:	78 f0       	brcs	.+30     	; 0x2b08 <malloc+0x124>
    2aea:	ac 01       	movw	r20, r24
    2aec:	4e 5f       	subi	r20, 0xFE	; 254
    2aee:	5f 4f       	sbci	r21, 0xFF	; 255
    2af0:	24 17       	cp	r18, r20
    2af2:	35 07       	cpc	r19, r21
    2af4:	48 f0       	brcs	.+18     	; 0x2b08 <malloc+0x124>
    2af6:	4e 0f       	add	r20, r30
    2af8:	5f 1f       	adc	r21, r31
    2afa:	50 93 bd 01 	sts	0x01BD, r21
    2afe:	40 93 bc 01 	sts	0x01BC, r20
    2b02:	81 93       	st	Z+, r24
    2b04:	91 93       	st	Z+, r25
    2b06:	02 c0       	rjmp	.+4      	; 0x2b0c <malloc+0x128>
    2b08:	e0 e0       	ldi	r30, 0x00	; 0
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	cf 01       	movw	r24, r30
    2b0e:	df 91       	pop	r29
    2b10:	cf 91       	pop	r28
    2b12:	08 95       	ret

00002b14 <free>:
    2b14:	cf 93       	push	r28
    2b16:	df 93       	push	r29
    2b18:	00 97       	sbiw	r24, 0x00	; 0
    2b1a:	09 f4       	brne	.+2      	; 0x2b1e <free+0xa>
    2b1c:	87 c0       	rjmp	.+270    	; 0x2c2c <free+0x118>
    2b1e:	fc 01       	movw	r30, r24
    2b20:	32 97       	sbiw	r30, 0x02	; 2
    2b22:	13 82       	std	Z+3, r1	; 0x03
    2b24:	12 82       	std	Z+2, r1	; 0x02
    2b26:	c0 91 be 01 	lds	r28, 0x01BE
    2b2a:	d0 91 bf 01 	lds	r29, 0x01BF
    2b2e:	20 97       	sbiw	r28, 0x00	; 0
    2b30:	81 f4       	brne	.+32     	; 0x2b52 <free+0x3e>
    2b32:	20 81       	ld	r18, Z
    2b34:	31 81       	ldd	r19, Z+1	; 0x01
    2b36:	28 0f       	add	r18, r24
    2b38:	39 1f       	adc	r19, r25
    2b3a:	80 91 bc 01 	lds	r24, 0x01BC
    2b3e:	90 91 bd 01 	lds	r25, 0x01BD
    2b42:	82 17       	cp	r24, r18
    2b44:	93 07       	cpc	r25, r19
    2b46:	79 f5       	brne	.+94     	; 0x2ba6 <free+0x92>
    2b48:	f0 93 bd 01 	sts	0x01BD, r31
    2b4c:	e0 93 bc 01 	sts	0x01BC, r30
    2b50:	6d c0       	rjmp	.+218    	; 0x2c2c <free+0x118>
    2b52:	de 01       	movw	r26, r28
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	ae 17       	cp	r26, r30
    2b5a:	bf 07       	cpc	r27, r31
    2b5c:	50 f4       	brcc	.+20     	; 0x2b72 <free+0x5e>
    2b5e:	12 96       	adiw	r26, 0x02	; 2
    2b60:	4d 91       	ld	r20, X+
    2b62:	5c 91       	ld	r21, X
    2b64:	13 97       	sbiw	r26, 0x03	; 3
    2b66:	9d 01       	movw	r18, r26
    2b68:	41 15       	cp	r20, r1
    2b6a:	51 05       	cpc	r21, r1
    2b6c:	09 f1       	breq	.+66     	; 0x2bb0 <free+0x9c>
    2b6e:	da 01       	movw	r26, r20
    2b70:	f3 cf       	rjmp	.-26     	; 0x2b58 <free+0x44>
    2b72:	b3 83       	std	Z+3, r27	; 0x03
    2b74:	a2 83       	std	Z+2, r26	; 0x02
    2b76:	40 81       	ld	r20, Z
    2b78:	51 81       	ldd	r21, Z+1	; 0x01
    2b7a:	84 0f       	add	r24, r20
    2b7c:	95 1f       	adc	r25, r21
    2b7e:	8a 17       	cp	r24, r26
    2b80:	9b 07       	cpc	r25, r27
    2b82:	71 f4       	brne	.+28     	; 0x2ba0 <free+0x8c>
    2b84:	8d 91       	ld	r24, X+
    2b86:	9c 91       	ld	r25, X
    2b88:	11 97       	sbiw	r26, 0x01	; 1
    2b8a:	84 0f       	add	r24, r20
    2b8c:	95 1f       	adc	r25, r21
    2b8e:	02 96       	adiw	r24, 0x02	; 2
    2b90:	91 83       	std	Z+1, r25	; 0x01
    2b92:	80 83       	st	Z, r24
    2b94:	12 96       	adiw	r26, 0x02	; 2
    2b96:	8d 91       	ld	r24, X+
    2b98:	9c 91       	ld	r25, X
    2b9a:	13 97       	sbiw	r26, 0x03	; 3
    2b9c:	93 83       	std	Z+3, r25	; 0x03
    2b9e:	82 83       	std	Z+2, r24	; 0x02
    2ba0:	21 15       	cp	r18, r1
    2ba2:	31 05       	cpc	r19, r1
    2ba4:	29 f4       	brne	.+10     	; 0x2bb0 <free+0x9c>
    2ba6:	f0 93 bf 01 	sts	0x01BF, r31
    2baa:	e0 93 be 01 	sts	0x01BE, r30
    2bae:	3e c0       	rjmp	.+124    	; 0x2c2c <free+0x118>
    2bb0:	d9 01       	movw	r26, r18
    2bb2:	13 96       	adiw	r26, 0x03	; 3
    2bb4:	fc 93       	st	X, r31
    2bb6:	ee 93       	st	-X, r30
    2bb8:	12 97       	sbiw	r26, 0x02	; 2
    2bba:	4d 91       	ld	r20, X+
    2bbc:	5d 91       	ld	r21, X+
    2bbe:	a4 0f       	add	r26, r20
    2bc0:	b5 1f       	adc	r27, r21
    2bc2:	ea 17       	cp	r30, r26
    2bc4:	fb 07       	cpc	r31, r27
    2bc6:	79 f4       	brne	.+30     	; 0x2be6 <free+0xd2>
    2bc8:	80 81       	ld	r24, Z
    2bca:	91 81       	ldd	r25, Z+1	; 0x01
    2bcc:	84 0f       	add	r24, r20
    2bce:	95 1f       	adc	r25, r21
    2bd0:	02 96       	adiw	r24, 0x02	; 2
    2bd2:	d9 01       	movw	r26, r18
    2bd4:	11 96       	adiw	r26, 0x01	; 1
    2bd6:	9c 93       	st	X, r25
    2bd8:	8e 93       	st	-X, r24
    2bda:	82 81       	ldd	r24, Z+2	; 0x02
    2bdc:	93 81       	ldd	r25, Z+3	; 0x03
    2bde:	13 96       	adiw	r26, 0x03	; 3
    2be0:	9c 93       	st	X, r25
    2be2:	8e 93       	st	-X, r24
    2be4:	12 97       	sbiw	r26, 0x02	; 2
    2be6:	e0 e0       	ldi	r30, 0x00	; 0
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	8a 81       	ldd	r24, Y+2	; 0x02
    2bec:	9b 81       	ldd	r25, Y+3	; 0x03
    2bee:	00 97       	sbiw	r24, 0x00	; 0
    2bf0:	19 f0       	breq	.+6      	; 0x2bf8 <free+0xe4>
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	ec 01       	movw	r28, r24
    2bf6:	f9 cf       	rjmp	.-14     	; 0x2bea <free+0xd6>
    2bf8:	ce 01       	movw	r24, r28
    2bfa:	02 96       	adiw	r24, 0x02	; 2
    2bfc:	28 81       	ld	r18, Y
    2bfe:	39 81       	ldd	r19, Y+1	; 0x01
    2c00:	82 0f       	add	r24, r18
    2c02:	93 1f       	adc	r25, r19
    2c04:	20 91 bc 01 	lds	r18, 0x01BC
    2c08:	30 91 bd 01 	lds	r19, 0x01BD
    2c0c:	28 17       	cp	r18, r24
    2c0e:	39 07       	cpc	r19, r25
    2c10:	69 f4       	brne	.+26     	; 0x2c2c <free+0x118>
    2c12:	30 97       	sbiw	r30, 0x00	; 0
    2c14:	29 f4       	brne	.+10     	; 0x2c20 <free+0x10c>
    2c16:	10 92 bf 01 	sts	0x01BF, r1
    2c1a:	10 92 be 01 	sts	0x01BE, r1
    2c1e:	02 c0       	rjmp	.+4      	; 0x2c24 <free+0x110>
    2c20:	13 82       	std	Z+3, r1	; 0x03
    2c22:	12 82       	std	Z+2, r1	; 0x02
    2c24:	d0 93 bd 01 	sts	0x01BD, r29
    2c28:	c0 93 bc 01 	sts	0x01BC, r28
    2c2c:	df 91       	pop	r29
    2c2e:	cf 91       	pop	r28
    2c30:	08 95       	ret

00002c32 <__eerd_word_m328p>:
    2c32:	a8 e1       	ldi	r26, 0x18	; 24
    2c34:	b0 e0       	ldi	r27, 0x00	; 0
    2c36:	42 e0       	ldi	r20, 0x02	; 2
    2c38:	50 e0       	ldi	r21, 0x00	; 0
    2c3a:	0c 94 21 16 	jmp	0x2c42	; 0x2c42 <__eerd_blraw_m328p>

00002c3e <__eerd_block_m328p>:
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22

00002c42 <__eerd_blraw_m328p>:
    2c42:	fc 01       	movw	r30, r24
    2c44:	f9 99       	sbic	0x1f, 1	; 31
    2c46:	fe cf       	rjmp	.-4      	; 0x2c44 <__eerd_blraw_m328p+0x2>
    2c48:	06 c0       	rjmp	.+12     	; 0x2c56 <__eerd_blraw_m328p+0x14>
    2c4a:	f2 bd       	out	0x22, r31	; 34
    2c4c:	e1 bd       	out	0x21, r30	; 33
    2c4e:	f8 9a       	sbi	0x1f, 0	; 31
    2c50:	31 96       	adiw	r30, 0x01	; 1
    2c52:	00 b4       	in	r0, 0x20	; 32
    2c54:	0d 92       	st	X+, r0
    2c56:	41 50       	subi	r20, 0x01	; 1
    2c58:	50 40       	sbci	r21, 0x00	; 0
    2c5a:	b8 f7       	brcc	.-18     	; 0x2c4a <__eerd_blraw_m328p+0x8>
    2c5c:	08 95       	ret

00002c5e <__do_global_dtors>:
    2c5e:	10 e0       	ldi	r17, 0x00	; 0
    2c60:	c4 e8       	ldi	r28, 0x84	; 132
    2c62:	d0 e0       	ldi	r29, 0x00	; 0
    2c64:	04 c0       	rjmp	.+8      	; 0x2c6e <__do_global_dtors+0x10>
    2c66:	fe 01       	movw	r30, r28
    2c68:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__tablejump__>
    2c6c:	22 96       	adiw	r28, 0x02	; 2
    2c6e:	c8 38       	cpi	r28, 0x88	; 136
    2c70:	d1 07       	cpc	r29, r17
    2c72:	c9 f7       	brne	.-14     	; 0x2c66 <__do_global_dtors+0x8>
    2c74:	f8 94       	cli

00002c76 <__stop_program>:
    2c76:	ff cf       	rjmp	.-2      	; 0x2c76 <__stop_program>
