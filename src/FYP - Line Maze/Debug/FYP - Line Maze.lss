
FYP - Line Maze.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00002fc2  00003076  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002fc2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  00800150  00800150  000030c6  2**0
                  ALLOC
  3 .eeprom       00000014  00810000  00810000  000030c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00006b94  00000000  00000000  000030dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00008e23  00000000  00000000  00009c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000030  00000000  00000000  00012a93  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000110  00000000  00000000  00012ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002bb2  00000000  00000000  00012bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000715  00000000  00000000  00015785  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000d38  00000000  00000000  00015e9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000400  00000000  00000000  00016bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000d20  00000000  00000000  00016fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001761  00000000  00000000  00017cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000240  00000000  00000000  00019455  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 44 00 	jmp	0x88	; 0x88 <__dtors_end>
       4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <__vector_9>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__vector_13>
      38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 1f       	adc	r16, r16
      70:	1f 1f       	adc	r17, r31
      72:	1f 1f       	adc	r17, r31
      74:	1f 1f       	adc	r17, r31

00000076 <_ZL5bloop>:
      76:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

00000080 <__ctors_start>:
      80:	de 07       	cpc	r29, r30
      82:	7b 10       	cpse	r7, r11

00000084 <__ctors_end>:
      84:	e3 07       	cpc	r30, r19
      86:	7c 10       	cpse	r7, r12

00000088 <__dtors_end>:
      88:	11 24       	eor	r1, r1
      8a:	1f be       	out	0x3f, r1	; 63
      8c:	cf ef       	ldi	r28, 0xFF	; 255
      8e:	d8 e0       	ldi	r29, 0x08	; 8
      90:	de bf       	out	0x3e, r29	; 62
      92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
      94:	11 e0       	ldi	r17, 0x01	; 1
      96:	a0 e0       	ldi	r26, 0x00	; 0
      98:	b1 e0       	ldi	r27, 0x01	; 1
      9a:	e2 ec       	ldi	r30, 0xC2	; 194
      9c:	ff e2       	ldi	r31, 0x2F	; 47
      9e:	02 c0       	rjmp	.+4      	; 0xa4 <__do_copy_data+0x10>
      a0:	05 90       	lpm	r0, Z+
      a2:	0d 92       	st	X+, r0
      a4:	a0 35       	cpi	r26, 0x50	; 80
      a6:	b1 07       	cpc	r27, r17
      a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0xc>

000000aa <__do_clear_bss>:
      aa:	21 e0       	ldi	r18, 0x01	; 1
      ac:	a0 e5       	ldi	r26, 0x50	; 80
      ae:	b1 e0       	ldi	r27, 0x01	; 1
      b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
      b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
      b4:	a6 3d       	cpi	r26, 0xD6	; 214
      b6:	b2 07       	cpc	r27, r18
      b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>

000000ba <__do_global_ctors>:
      ba:	10 e0       	ldi	r17, 0x00	; 0
      bc:	c4 e8       	ldi	r28, 0x84	; 132
      be:	d0 e0       	ldi	r29, 0x00	; 0
      c0:	04 c0       	rjmp	.+8      	; 0xca <__do_global_ctors+0x10>
      c2:	22 97       	sbiw	r28, 0x02	; 2
      c4:	fe 01       	movw	r30, r28
      c6:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <__tablejump__>
      ca:	c0 38       	cpi	r28, 0x80	; 128
      cc:	d1 07       	cpc	r29, r17
      ce:	c9 f7       	brne	.-14     	; 0xc2 <__do_global_ctors+0x8>
      d0:	0e 94 68 07 	call	0xed0	; 0xed0 <main>
      d4:	0c 94 d4 17 	jmp	0x2fa8	; 0x2fa8 <__do_global_dtors>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <_ZN10cDirection11getOppositeEv>:
			faceInt = 4;
		}
		return static_cast<Direction>(faceInt - 1);
	}
	Direction getOpposite(){
		int faceInt = dir;
      dc:	fc 01       	movw	r30, r24
      de:	80 81       	ld	r24, Z
      e0:	90 e0       	ldi	r25, 0x00	; 0
		if (faceInt >= 3) {
      e2:	83 30       	cpi	r24, 0x03	; 3
      e4:	91 05       	cpc	r25, r1
      e6:	14 f0       	brlt	.+4      	; 0xec <_ZN10cDirection11getOppositeEv+0x10>
			faceInt = -1;
      e8:	8f ef       	ldi	r24, 0xFF	; 255
      ea:	9f ef       	ldi	r25, 0xFF	; 255
		}
		Direction temp = static_cast<Direction>(faceInt + 1);
      ec:	8f 5f       	subi	r24, 0xFF	; 255
		faceInt = temp;
      ee:	90 e0       	ldi	r25, 0x00	; 0
		if (faceInt >= 3) {
      f0:	83 30       	cpi	r24, 0x03	; 3
      f2:	91 05       	cpc	r25, r1
      f4:	11 f4       	brne	.+4      	; 0xfa <_ZN10cDirection11getOppositeEv+0x1e>
			faceInt = -1;
      f6:	8f ef       	ldi	r24, 0xFF	; 255
      f8:	9f ef       	ldi	r25, 0xFF	; 255
		}
		return static_cast<Direction>(faceInt + 1);
	}
      fa:	8f 5f       	subi	r24, 0xFF	; 255
      fc:	08 95       	ret

000000fe <_ZN4nodeC1Ev>:
	node* connections[4]; // 0 = South (where mouse came from), 1 = West, 2 = North, 3 = East
	int8_t costs[4];
	int8_t gCost;
	node* parent;

	node(){
      fe:	fc 01       	movw	r30, r24
		this->visited = false;
     100:	12 82       	std	Z+2, r1	; 0x02
		for (int i=0; i<4; i++){
			this->connections[i] = NULL;
     102:	14 82       	std	Z+4, r1	; 0x04
     104:	13 82       	std	Z+3, r1	; 0x03
			this->costs[i] = -1;
     106:	8f ef       	ldi	r24, 0xFF	; 255
     108:	83 87       	std	Z+11, r24	; 0x0b
	node* parent;

	node(){
		this->visited = false;
		for (int i=0; i<4; i++){
			this->connections[i] = NULL;
     10a:	16 82       	std	Z+6, r1	; 0x06
     10c:	15 82       	std	Z+5, r1	; 0x05
			this->costs[i] = -1;
     10e:	84 87       	std	Z+12, r24	; 0x0c
	node* parent;

	node(){
		this->visited = false;
		for (int i=0; i<4; i++){
			this->connections[i] = NULL;
     110:	10 86       	std	Z+8, r1	; 0x08
     112:	17 82       	std	Z+7, r1	; 0x07
			this->costs[i] = -1;
     114:	85 87       	std	Z+13, r24	; 0x0d
	node* parent;

	node(){
		this->visited = false;
		for (int i=0; i<4; i++){
			this->connections[i] = NULL;
     116:	12 86       	std	Z+10, r1	; 0x0a
     118:	11 86       	std	Z+9, r1	; 0x09
			this->costs[i] = -1;
     11a:	86 87       	std	Z+14, r24	; 0x0e
     11c:	87 87       	std	Z+15, r24	; 0x0f
     11e:	11 8a       	std	Z+17, r1	; 0x11
     120:	10 8a       	std	Z+16, r1	; 0x10
     122:	08 95       	ret

00000124 <_ZN4nodeD1Ev>:
			this->gCost = -1;
			this->parent = NULL;
		}
	}
	~node(){
     124:	ef 92       	push	r14
     126:	ff 92       	push	r15
     128:	0f 93       	push	r16
     12a:	1f 93       	push	r17
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	7c 01       	movw	r14, r24
     132:	c0 e0       	ldi	r28, 0x00	; 0
     134:	d0 e0       	ldi	r29, 0x00	; 0
     136:	f7 01       	movw	r30, r14
     138:	ec 0f       	add	r30, r28
     13a:	fd 1f       	adc	r31, r29
		for (int i=0; i<4; i++){
			delete connections[i];
     13c:	03 81       	ldd	r16, Z+3	; 0x03
     13e:	14 81       	ldd	r17, Z+4	; 0x04
     140:	01 15       	cp	r16, r1
     142:	11 05       	cpc	r17, r1
     144:	31 f0       	breq	.+12     	; 0x152 <_ZN4nodeD1Ev+0x2e>
     146:	c8 01       	movw	r24, r16
     148:	0e 94 92 00 	call	0x124	; 0x124 <_ZN4nodeD1Ev>
void* operator new(size_t objsize) {
	return malloc(objsize);
}

void operator delete(void* obj) {
	free(obj);
     14c:	c8 01       	movw	r24, r16
     14e:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <free>
     152:	22 96       	adiw	r28, 0x02	; 2
			this->gCost = -1;
			this->parent = NULL;
		}
	}
	~node(){
		for (int i=0; i<4; i++){
     154:	c8 30       	cpi	r28, 0x08	; 8
     156:	d1 05       	cpc	r29, r1
     158:	71 f7       	brne	.-36     	; 0x136 <_ZN4nodeD1Ev+0x12>
			delete connections[i];
		}
	}
     15a:	df 91       	pop	r29
     15c:	cf 91       	pop	r28
     15e:	1f 91       	pop	r17
     160:	0f 91       	pop	r16
     162:	ff 90       	pop	r15
     164:	ef 90       	pop	r14
     166:	08 95       	ret

00000168 <_ZN9NodeStack4pushEP4node9Direction>:
	
	StackNode* _getNodeByPosition(StackNode* n, position p);
	StackNode* _getNodeWithUnvisitedConnections(StackNode* n);
};

void NodeStack::push(node* n, Direction d) {
     168:	ef 92       	push	r14
     16a:	ff 92       	push	r15
     16c:	0f 93       	push	r16
     16e:	1f 93       	push	r17
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	1f 92       	push	r1
     176:	cd b7       	in	r28, 0x3d	; 61
     178:	de b7       	in	r29, 0x3e	; 62
     17a:	7c 01       	movw	r14, r24
     17c:	8b 01       	movw	r16, r22
#define UTILITY_H_

#include <stdlib.h>

void* operator new(size_t objsize) {
	return malloc(objsize);
     17e:	85 e0       	ldi	r24, 0x05	; 5
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	49 83       	std	Y+1, r20	; 0x01
     184:	0e 94 84 16 	call	0x2d08	; 0x2d08 <malloc>
     188:	fc 01       	movw	r30, r24
	top = new StackNode(n, top, d);
     18a:	d7 01       	movw	r26, r14
     18c:	8d 91       	ld	r24, X+
     18e:	9c 91       	ld	r25, X
     190:	11 97       	sbiw	r26, 0x01	; 1
	struct StackNode {
		node* data;
		StackNode* next;
		Direction enteredFrom;

		StackNode(node* newData, StackNode* nextNode, Direction d) : data(newData), next(nextNode), enteredFrom(d) {}
     192:	11 83       	std	Z+1, r17	; 0x01
     194:	00 83       	st	Z, r16
     196:	93 83       	std	Z+3, r25	; 0x03
     198:	82 83       	std	Z+2, r24	; 0x02
     19a:	49 81       	ldd	r20, Y+1	; 0x01
     19c:	44 83       	std	Z+4, r20	; 0x04
	StackNode* _getNodeByPosition(StackNode* n, position p);
	StackNode* _getNodeWithUnvisitedConnections(StackNode* n);
};

void NodeStack::push(node* n, Direction d) {
	top = new StackNode(n, top, d);
     19e:	ed 93       	st	X+, r30
     1a0:	fc 93       	st	X, r31
}
     1a2:	0f 90       	pop	r0
     1a4:	df 91       	pop	r29
     1a6:	cf 91       	pop	r28
     1a8:	1f 91       	pop	r17
     1aa:	0f 91       	pop	r16
     1ac:	ff 90       	pop	r15
     1ae:	ef 90       	pop	r14
     1b0:	08 95       	ret

000001b2 <_ZN9NodeStack3popEv>:

Direction NodeStack::pop() {
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
	}
	return NULL;
}

bool NodeStack::isEmpty() {
	if (top == 0) {
     1b6:	fc 01       	movw	r30, r24
     1b8:	c0 81       	ld	r28, Z
     1ba:	d1 81       	ldd	r29, Z+1	; 0x01
     1bc:	20 97       	sbiw	r28, 0x00	; 0
     1be:	11 f4       	brne	.+4      	; 0x1c4 <_ZN9NodeStack3popEv+0x12>
		delete topNode;
		Direction d = topNode->enteredFrom;
		return d;
		//return data;
	}
	return NORTH;
     1c0:	82 e0       	ldi	r24, 0x02	; 2
     1c2:	09 c0       	rjmp	.+18     	; 0x1d6 <_ZN9NodeStack3popEv+0x24>
}

Direction NodeStack::pop() {
	if ( !isEmpty() ) {
		StackNode *topNode = top;
		top = top->next;
     1c4:	2a 81       	ldd	r18, Y+2	; 0x02
     1c6:	3b 81       	ldd	r19, Y+3	; 0x03
     1c8:	fc 01       	movw	r30, r24
     1ca:	31 83       	std	Z+1, r19	; 0x01
     1cc:	20 83       	st	Z, r18
}

void operator delete(void* obj) {
	free(obj);
     1ce:	ce 01       	movw	r24, r28
     1d0:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <free>
		//node* data = topNode->data;
		delete topNode;
		Direction d = topNode->enteredFrom;
     1d4:	8c 81       	ldd	r24, Y+4	; 0x04
		return d;
		//return data;
	}
	return NORTH;
}
     1d6:	df 91       	pop	r29
     1d8:	cf 91       	pop	r28
     1da:	08 95       	ret

000001dc <_ZN9NodeStack6getTopEv>:
	}
	return NULL;
}

bool NodeStack::isEmpty() {
	if (top == 0) {
     1dc:	dc 01       	movw	r26, r24
     1de:	ed 91       	ld	r30, X+
     1e0:	fc 91       	ld	r31, X
     1e2:	30 97       	sbiw	r30, 0x00	; 0
     1e4:	19 f4       	brne	.+6      	; 0x1ec <_ZN9NodeStack6getTopEv+0x10>

node* NodeStack::getTop() {
	if ( !isEmpty() ) {
		return top->data;
	}
	return NULL;
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	08 95       	ret
	return NORTH;
}

node* NodeStack::getTop() {
	if ( !isEmpty() ) {
		return top->data;
     1ec:	80 81       	ld	r24, Z
     1ee:	91 81       	ldd	r25, Z+1	; 0x01
	}
	return NULL;
}
     1f0:	08 95       	ret

000001f2 <_Z22load_custom_charactersv>:
	
	speed = 60;
}

void load_custom_characters(){
	lcd_load_custom_character(levels+0,0); // no offset, e.g. one bar
     1f2:	60 e0       	ldi	r22, 0x00	; 0
     1f4:	88 e6       	ldi	r24, 0x68	; 104
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <lcd_load_custom_character>
	lcd_load_custom_character(levels+1,1); // two bars
     1fc:	61 e0       	ldi	r22, 0x01	; 1
     1fe:	89 e6       	ldi	r24, 0x69	; 105
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <lcd_load_custom_character>
	lcd_load_custom_character(levels+2,2); // etc...
     206:	62 e0       	ldi	r22, 0x02	; 2
     208:	8a e6       	ldi	r24, 0x6A	; 106
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <lcd_load_custom_character>
	lcd_load_custom_character(levels+3,3);
     210:	63 e0       	ldi	r22, 0x03	; 3
     212:	8b e6       	ldi	r24, 0x6B	; 107
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <lcd_load_custom_character>
	lcd_load_custom_character(levels+4,4);
     21a:	64 e0       	ldi	r22, 0x04	; 4
     21c:	8c e6       	ldi	r24, 0x6C	; 108
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <lcd_load_custom_character>
	lcd_load_custom_character(levels+5,5);
     224:	65 e0       	ldi	r22, 0x05	; 5
     226:	8d e6       	ldi	r24, 0x6D	; 109
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <lcd_load_custom_character>
	lcd_load_custom_character(levels+6,6);
     22e:	66 e0       	ldi	r22, 0x06	; 6
     230:	8e e6       	ldi	r24, 0x6E	; 110
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <lcd_load_custom_character>
	clear();
     238:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <clear>

0000023c <_Z16display_readingsPKj>:
}

void display_readings(const unsigned int *calibrated_values){
     23c:	cf 92       	push	r12
     23e:	df 92       	push	r13
     240:	ef 92       	push	r14
     242:	ff 92       	push	r15
     244:	0f 93       	push	r16
     246:	1f 93       	push	r17
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
     24c:	cd b7       	in	r28, 0x3d	; 61
     24e:	de b7       	in	r29, 0x3e	; 62
     250:	2a 97       	sbiw	r28, 0x0a	; 10
     252:	0f b6       	in	r0, 0x3f	; 63
     254:	f8 94       	cli
     256:	de bf       	out	0x3e, r29	; 62
     258:	0f be       	out	0x3f, r0	; 63
     25a:	cd bf       	out	0x3d, r28	; 61
     25c:	7c 01       	movw	r14, r24
	print(" ");
     25e:	8b e3       	ldi	r24, 0x3B	; 59
     260:	91 e0       	ldi	r25, 0x01	; 1
     262:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <print>
     266:	87 01       	movw	r16, r14
	unsigned char i;
	for(i=0;i<5;i++) {
     268:	d1 2c       	mov	r13, r1
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     26a:	8a e0       	ldi	r24, 0x0A	; 10
     26c:	c8 2e       	mov	r12, r24
		char c = display_characters[calibrated_values[i]/101];
     26e:	95 e6       	ldi	r25, 0x65	; 101
     270:	e9 2e       	mov	r14, r25
     272:	f1 2c       	mov	r15, r1

void display_readings(const unsigned int *calibrated_values){
	print(" ");
	unsigned char i;
	for(i=0;i<5;i++) {
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     274:	e1 e3       	ldi	r30, 0x31	; 49
     276:	f1 e0       	ldi	r31, 0x01	; 1
     278:	de 01       	movw	r26, r28
     27a:	11 96       	adiw	r26, 0x01	; 1
     27c:	8c 2d       	mov	r24, r12
     27e:	01 90       	ld	r0, Z+
     280:	0d 92       	st	X+, r0
     282:	8a 95       	dec	r24
     284:	e1 f7       	brne	.-8      	; 0x27e <_Z16display_readingsPKj+0x42>
		char c = display_characters[calibrated_values[i]/101];
     286:	f8 01       	movw	r30, r16
     288:	81 91       	ld	r24, Z+
     28a:	91 91       	ld	r25, Z+
     28c:	8f 01       	movw	r16, r30
     28e:	b7 01       	movw	r22, r14
     290:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <__udivmodhi4>
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	8c 0f       	add	r24, r28
     29a:	9d 1f       	adc	r25, r29
     29c:	68 0f       	add	r22, r24
     29e:	79 1f       	adc	r23, r25
		print_character(c);
     2a0:	fb 01       	movw	r30, r22
     2a2:	80 81       	ld	r24, Z
     2a4:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <print_character>
}

void display_readings(const unsigned int *calibrated_values){
	print(" ");
	unsigned char i;
	for(i=0;i<5;i++) {
     2a8:	d3 94       	inc	r13
     2aa:	f5 e0       	ldi	r31, 0x05	; 5
     2ac:	df 12       	cpse	r13, r31
     2ae:	e2 cf       	rjmp	.-60     	; 0x274 <_Z16display_readingsPKj+0x38>
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
		char c = display_characters[calibrated_values[i]/101];
		print_character(c);
	}
}
     2b0:	2a 96       	adiw	r28, 0x0a	; 10
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	f8 94       	cli
     2b6:	de bf       	out	0x3e, r29	; 62
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	cd bf       	out	0x3d, r28	; 61
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	1f 91       	pop	r17
     2c2:	0f 91       	pop	r16
     2c4:	ff 90       	pop	r15
     2c6:	ef 90       	pop	r14
     2c8:	df 90       	pop	r13
     2ca:	cf 90       	pop	r12
     2cc:	08 95       	ret

000002ce <_Z5hCostP4nodeS0_>:
		return (top == 0);
	}
	node* operator[] (int8_t i) { return nodes[i]; }
};

int8_t hCost(node* a, node* b){
     2ce:	fc 01       	movw	r30, r24
	int8_t x1 = a->pos.x,
     2d0:	80 81       	ld	r24, Z
	x2 = b->pos.x,
     2d2:	db 01       	movw	r26, r22
     2d4:	3c 91       	ld	r19, X
	y1 = a->pos.y,
     2d6:	91 81       	ldd	r25, Z+1	; 0x01
	y2 = b->pos.y;
     2d8:	11 96       	adiw	r26, 0x01	; 1
     2da:	2c 91       	ld	r18, X

	int8_t xDiff = (x1 > x2) ? x1 - x2 : x2 - x1;
     2dc:	38 17       	cp	r19, r24
     2de:	14 f4       	brge	.+4      	; 0x2e4 <_Z5hCostP4nodeS0_+0x16>
     2e0:	83 1b       	sub	r24, r19
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <_Z5hCostP4nodeS0_+0x1a>
     2e4:	38 1b       	sub	r19, r24
     2e6:	83 2f       	mov	r24, r19
	int8_t yDiff = (y1 > y2) ? y1 - y2 : y2 - y1;
     2e8:	29 17       	cp	r18, r25
     2ea:	14 f4       	brge	.+4      	; 0x2f0 <_Z5hCostP4nodeS0_+0x22>
     2ec:	92 1b       	sub	r25, r18
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <_Z5hCostP4nodeS0_+0x26>
     2f0:	29 1b       	sub	r18, r25
     2f2:	92 2f       	mov	r25, r18
	int8_t totalDiff = xDiff + yDiff;

	return totalDiff;
}
     2f4:	89 0f       	add	r24, r25
     2f6:	08 95       	ret

000002f8 <_Z15saveCalibrationv>:
	}
	
	return costCounter;
}

void saveCalibration(){
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	c0 e0       	ldi	r28, 0x00	; 0
     2fe:	d0 e0       	ldi	r29, 0x00	; 0
	int i;
	for(i=0;i<5;i++){
		eeprom_write_word(
		&calibrated_minimum_on[i],
		get_line_sensors_calibrated_minimum_on()[i]
     300:	0e 94 3b 10 	call	0x2076	; 0x2076 <get_line_sensors_calibrated_minimum_on>
		);
     304:	8c 0f       	add	r24, r28
     306:	9d 1f       	adc	r25, r29
     308:	fc 01       	movw	r30, r24
     30a:	60 81       	ld	r22, Z
     30c:	71 81       	ldd	r23, Z+1	; 0x01
     30e:	ce 01       	movw	r24, r28
     310:	80 50       	subi	r24, 0x00	; 0
     312:	90 40       	sbci	r25, 0x00	; 0
     314:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <__eewr_word_m328p>

		eeprom_write_word(
		&calibrated_maximum_on[i],
		get_line_sensors_calibrated_maximum_on()[i]
     318:	0e 94 40 10 	call	0x2080	; 0x2080 <get_line_sensors_calibrated_maximum_on>
		);
     31c:	8c 0f       	add	r24, r28
     31e:	9d 1f       	adc	r25, r29
     320:	fc 01       	movw	r30, r24
     322:	60 81       	ld	r22, Z
     324:	71 81       	ldd	r23, Z+1	; 0x01
     326:	ce 01       	movw	r24, r28
     328:	86 5f       	subi	r24, 0xF6	; 246
     32a:	9f 4f       	sbci	r25, 0xFF	; 255
     32c:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <__eewr_word_m328p>
     330:	22 96       	adiw	r28, 0x02	; 2
	return costCounter;
}

void saveCalibration(){
	int i;
	for(i=0;i<5;i++){
     332:	ca 30       	cpi	r28, 0x0A	; 10
     334:	d1 05       	cpc	r29, r1
     336:	21 f7       	brne	.-56     	; 0x300 <_Z15saveCalibrationv+0x8>
		eeprom_write_word(
		&calibrated_maximum_on[i],
		get_line_sensors_calibrated_maximum_on()[i]
		);
	}
}
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	08 95       	ret

0000033e <_Z9calibratev>:
		char c = display_characters[calibrated_values[i]/101];
		print_character(c);
	}
}

void calibrate(){
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
	unsigned int counter;
	delay_ms(1000);
     342:	88 ee       	ldi	r24, 0xE8	; 232
     344:	93 e0       	ldi	r25, 0x03	; 3
     346:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <delay_ms>
     34a:	cc ee       	ldi	r28, 0xEC	; 236
     34c:	df ef       	ldi	r29, 0xFF	; 255
	for(counter=0;counter<80;counter++){
		if(counter < 20 || counter >= 60){
     34e:	c8 32       	cpi	r28, 0x28	; 40
     350:	d1 05       	cpc	r29, r1
     352:	28 f0       	brcs	.+10     	; 0x35e <_Z9calibratev+0x20>
			set_motors(40,-40);
     354:	68 ed       	ldi	r22, 0xD8	; 216
     356:	7f ef       	ldi	r23, 0xFF	; 255
     358:	88 e2       	ldi	r24, 0x28	; 40
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	04 c0       	rjmp	.+8      	; 0x366 <_Z9calibratev+0x28>
			} else {
			set_motors(-40,40);
     35e:	68 e2       	ldi	r22, 0x28	; 40
     360:	70 e0       	ldi	r23, 0x00	; 0
     362:	88 ed       	ldi	r24, 0xD8	; 216
     364:	9f ef       	ldi	r25, 0xFF	; 255
     366:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <set_motors>
		}
		calibrate_line_sensors(IR_EMITTERS_ON);
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	0e 94 2c 10 	call	0x2058	; 0x2058 <calibrate_line_sensors>
		delay_ms(20);
     370:	84 e1       	ldi	r24, 0x14	; 20
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <delay_ms>
     378:	21 96       	adiw	r28, 0x01	; 1
}

void calibrate(){
	unsigned int counter;
	delay_ms(1000);
	for(counter=0;counter<80;counter++){
     37a:	cc 33       	cpi	r28, 0x3C	; 60
     37c:	d1 05       	cpc	r29, r1
     37e:	39 f7       	brne	.-50     	; 0x34e <_Z9calibratev+0x10>
			set_motors(-40,40);
		}
		calibrate_line_sensors(IR_EMITTERS_ON);
		delay_ms(20);
	}
	set_motors(0,0);
     380:	60 e0       	ldi	r22, 0x00	; 0
     382:	70 e0       	ldi	r23, 0x00	; 0
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <set_motors>
	
	saveCalibration();
}
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
		calibrate_line_sensors(IR_EMITTERS_ON);
		delay_ms(20);
	}
	set_motors(0,0);
	
	saveCalibration();
     390:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <_Z15saveCalibrationv>

00000394 <_Z15loadCalibrationv>:
		get_line_sensors_calibrated_maximum_on()[i]
		);
	}
}

void loadCalibration(){
     394:	0f 93       	push	r16
     396:	1f 93       	push	r17
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
	calibrate_line_sensors(IR_EMITTERS_ON); // need to do this to allocate the arrays
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	0e 94 2c 10 	call	0x2058	; 0x2058 <calibrate_line_sensors>
     3a2:	c0 e0       	ldi	r28, 0x00	; 0
     3a4:	d0 e0       	ldi	r29, 0x00	; 0
	int i;
	for(i=0;i<5;i++){
		get_line_sensors_calibrated_minimum_on()[i] =
     3a6:	0e 94 3b 10 	call	0x2076	; 0x2076 <get_line_sensors_calibrated_minimum_on>
     3aa:	8c 01       	movw	r16, r24
     3ac:	0c 0f       	add	r16, r28
     3ae:	1d 1f       	adc	r17, r29
		eeprom_read_word(&calibrated_minimum_on[i]);
     3b0:	ce 01       	movw	r24, r28
     3b2:	80 50       	subi	r24, 0x00	; 0
     3b4:	90 40       	sbci	r25, 0x00	; 0
     3b6:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <__eerd_word_m328p>
     3ba:	f8 01       	movw	r30, r16
     3bc:	91 83       	std	Z+1, r25	; 0x01
     3be:	80 83       	st	Z, r24

		get_line_sensors_calibrated_maximum_on()[i] =
     3c0:	0e 94 40 10 	call	0x2080	; 0x2080 <get_line_sensors_calibrated_maximum_on>
     3c4:	8c 01       	movw	r16, r24
     3c6:	0c 0f       	add	r16, r28
     3c8:	1d 1f       	adc	r17, r29
		eeprom_read_word(&calibrated_maximum_on[i]);
     3ca:	ce 01       	movw	r24, r28
     3cc:	86 5f       	subi	r24, 0xF6	; 246
     3ce:	9f 4f       	sbci	r25, 0xFF	; 255
     3d0:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <__eerd_word_m328p>
     3d4:	f8 01       	movw	r30, r16
     3d6:	91 83       	std	Z+1, r25	; 0x01
     3d8:	80 83       	st	Z, r24
     3da:	22 96       	adiw	r28, 0x02	; 2
}

void loadCalibration(){
	calibrate_line_sensors(IR_EMITTERS_ON); // need to do this to allocate the arrays
	int i;
	for(i=0;i<5;i++){
     3dc:	ca 30       	cpi	r28, 0x0A	; 10
     3de:	d1 05       	cpc	r29, r1
     3e0:	11 f7       	brne	.-60     	; 0x3a6 <_Z15loadCalibrationv+0x12>
		eeprom_read_word(&calibrated_minimum_on[i]);

		get_line_sensors_calibrated_maximum_on()[i] =
		eeprom_read_word(&calibrated_maximum_on[i]);
	}
}
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	08 95       	ret

000003ec <_Z10initialisev>:
#include "lineMaze.h"

void initialise(){
	pololu_3pi_init(2000);
     3ec:	80 ed       	ldi	r24, 0xD0	; 208
     3ee:	97 e0       	ldi	r25, 0x07	; 7
     3f0:	0e 94 77 10 	call	0x20ee	; 0x20ee <pololu_3pi_init>
	load_custom_characters();
     3f4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_Z22load_custom_charactersv>
	load_custom_characters();
     3f8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_Z22load_custom_charactersv>
	loadCalibration();
     3fc:	0e 94 ca 01 	call	0x394	; 0x394 <_Z15loadCalibrationv>
	play_from_program_space(bloop);
     400:	86 e7       	ldi	r24, 0x76	; 118
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 11 0c 	call	0x1822	; 0x1822 <play_from_program_space>
	
	foundFinish = false;
     408:	10 92 ce 01 	sts	0x01CE, r1
	isLeft = false;
     40c:	10 92 d0 01 	sts	0x01D0, r1
	isRight = false;
     410:	10 92 cf 01 	sts	0x01CF, r1
	isForward = false;
     414:	10 92 d1 01 	sts	0x01D1, r1
	
	currentDir.dir = NORTH;
     418:	82 e0       	ldi	r24, 0x02	; 2
     41a:	80 93 cd 01 	sts	0x01CD, r24
	currentPos.x = 0;
     41e:	10 92 cb 01 	sts	0x01CB, r1
	currentPos.y = 0;
     422:	10 92 cc 01 	sts	0x01CC, r1
	
	costCounter = 0;
     426:	10 92 c4 01 	sts	0x01C4, r1
	
	speed = 60;
     42a:	8c e3       	ldi	r24, 0x3C	; 60
     42c:	80 93 c3 01 	sts	0x01C3, r24
     430:	08 95       	ret

00000432 <_Z4stopv>:
	}
	stop();
}

void stop(){
	set_motors(0, 0);
     432:	60 e0       	ldi	r22, 0x00	; 0
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <set_motors>

0000043e <_Z4turn4Turn>:
		get_line_sensors_calibrated_maximum_on()[i] =
		eeprom_read_word(&calibrated_maximum_on[i]);
	}
}

void turn(Turn t){
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
     446:	2a 97       	sbiw	r28, 0x0a	; 10
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	f8 94       	cli
     44c:	de bf       	out	0x3e, r29	; 62
     44e:	0f be       	out	0x3f, r0	; 63
     450:	cd bf       	out	0x3d, r28	; 61
	unsigned int sensors[5];
	unsigned int turnCalibration = 500;
	
	switch(t){
     452:	81 30       	cpi	r24, 0x01	; 1
     454:	61 f1       	breq	.+88     	; 0x4ae <_Z4turn4Turn+0x70>
     456:	70 f0       	brcs	.+28     	; 0x474 <_Z4turn4Turn+0x36>
     458:	82 30       	cpi	r24, 0x02	; 2
     45a:	09 f0       	breq	.+2      	; 0x45e <_Z4turn4Turn+0x20>
     45c:	5d c0       	rjmp	.+186    	; 0x518 <_Z4turn4Turn+0xda>
			read_line(sensors,IR_EMITTERS_ON);
		}
		currentDir.next();
		break;
		case BACK:
		set_motors(40, -40);
     45e:	68 ed       	ldi	r22, 0xD8	; 216
     460:	7f ef       	ldi	r23, 0xFF	; 255
     462:	88 e2       	ldi	r24, 0x28	; 40
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <set_motors>
		delay_ms(700);
     46a:	8c eb       	ldi	r24, 0xBC	; 188
     46c:	92 e0       	ldi	r25, 0x02	; 2
     46e:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <delay_ms>
     472:	34 c0       	rjmp	.+104    	; 0x4dc <_Z4turn4Turn+0x9e>
	unsigned int sensors[5];
	unsigned int turnCalibration = 500;
	
	switch(t){
		case LEFT:
		set_motors(-40, 40);
     474:	68 e2       	ldi	r22, 0x28	; 40
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	88 ed       	ldi	r24, 0xD8	; 216
     47a:	9f ef       	ldi	r25, 0xFF	; 255
     47c:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <set_motors>
		delay_ms(100);
     480:	84 e6       	ldi	r24, 0x64	; 100
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <delay_ms>
		read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] < turnCalibration){
			read_line(sensors,IR_EMITTERS_ON);
     488:	61 e0       	ldi	r22, 0x01	; 1
     48a:	ce 01       	movw	r24, r28
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	0e 94 32 10 	call	0x2064	; 0x2064 <read_line>
	switch(t){
		case LEFT:
		set_motors(-40, 40);
		delay_ms(100);
		read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] < turnCalibration){
     492:	8d 81       	ldd	r24, Y+5	; 0x05
     494:	9e 81       	ldd	r25, Y+6	; 0x06
     496:	84 3f       	cpi	r24, 0xF4	; 244
     498:	91 40       	sbci	r25, 0x01	; 1
     49a:	b0 f3       	brcs	.-20     	; 0x488 <_Z4turn4Turn+0x4a>
			faceInt = -1;
		}
		this->dir = static_cast<Direction>(faceInt + 1);
	}
	void previous() {
		int faceInt = dir;
     49c:	80 91 cd 01 	lds	r24, 0x01CD
     4a0:	90 e0       	ldi	r25, 0x00	; 0
		if (faceInt <= 0) {
     4a2:	00 97       	sbiw	r24, 0x00	; 0
     4a4:	11 f4       	brne	.+4      	; 0x4aa <_Z4turn4Turn+0x6c>
			faceInt = 4;
     4a6:	84 e0       	ldi	r24, 0x04	; 4
     4a8:	90 e0       	ldi	r25, 0x00	; 0
		}
		this->dir = static_cast<Direction>(faceInt - 1);
     4aa:	81 50       	subi	r24, 0x01	; 1
     4ac:	33 c0       	rjmp	.+102    	; 0x514 <_Z4turn4Turn+0xd6>
			read_line(sensors,IR_EMITTERS_ON);
		}
		currentDir.previous();
		break;
		case RIGHT:
		set_motors(40, -40);
     4ae:	68 ed       	ldi	r22, 0xD8	; 216
     4b0:	7f ef       	ldi	r23, 0xFF	; 255
     4b2:	88 e2       	ldi	r24, 0x28	; 40
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <set_motors>
		delay_ms(100);
     4ba:	84 e6       	ldi	r24, 0x64	; 100
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <delay_ms>
		read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] < turnCalibration){
			read_line(sensors,IR_EMITTERS_ON);
     4c2:	61 e0       	ldi	r22, 0x01	; 1
     4c4:	ce 01       	movw	r24, r28
     4c6:	01 96       	adiw	r24, 0x01	; 1
     4c8:	0e 94 32 10 	call	0x2064	; 0x2064 <read_line>
		break;
		case RIGHT:
		set_motors(40, -40);
		delay_ms(100);
		read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] < turnCalibration){
     4cc:	8d 81       	ldd	r24, Y+5	; 0x05
     4ce:	9e 81       	ldd	r25, Y+6	; 0x06
     4d0:	84 3f       	cpi	r24, 0xF4	; 244
     4d2:	91 40       	sbci	r25, 0x01	; 1
     4d4:	b0 f3       	brcs	.-20     	; 0x4c2 <_Z4turn4Turn+0x84>

struct cDirection {
	Direction dir;

	void next() {
		int faceInt = dir;
     4d6:	80 91 cd 01 	lds	r24, 0x01CD
     4da:	15 c0       	rjmp	.+42     	; 0x506 <_Z4turn4Turn+0xc8>
		case BACK:
		set_motors(40, -40);
		delay_ms(700);
		read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] < turnCalibration){
			read_line(sensors,IR_EMITTERS_ON);
     4dc:	61 e0       	ldi	r22, 0x01	; 1
     4de:	ce 01       	movw	r24, r28
     4e0:	01 96       	adiw	r24, 0x01	; 1
     4e2:	0e 94 32 10 	call	0x2064	; 0x2064 <read_line>
		break;
		case BACK:
		set_motors(40, -40);
		delay_ms(700);
		read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] < turnCalibration){
     4e6:	8d 81       	ldd	r24, Y+5	; 0x05
     4e8:	9e 81       	ldd	r25, Y+6	; 0x06
     4ea:	84 3f       	cpi	r24, 0xF4	; 244
     4ec:	91 40       	sbci	r25, 0x01	; 1
     4ee:	b0 f3       	brcs	.-20     	; 0x4dc <_Z4turn4Turn+0x9e>
			read_line(sensors,IR_EMITTERS_ON);
		}
		stop();
     4f0:	0e 94 19 02 	call	0x432	; 0x432 <_Z4stopv>
     4f4:	80 91 cd 01 	lds	r24, 0x01CD
     4f8:	90 e0       	ldi	r25, 0x00	; 0
		if (faceInt == 3) {
     4fa:	83 30       	cpi	r24, 0x03	; 3
     4fc:	91 05       	cpc	r25, r1
     4fe:	11 f4       	brne	.+4      	; 0x504 <_Z4turn4Turn+0xc6>
			faceInt = -1;
     500:	8f ef       	ldi	r24, 0xFF	; 255
     502:	9f ef       	ldi	r25, 0xFF	; 255
		}
		this->dir = static_cast<Direction>(faceInt + 1);
     504:	8f 5f       	subi	r24, 0xFF	; 255

struct cDirection {
	Direction dir;

	void next() {
		int faceInt = dir;
     506:	90 e0       	ldi	r25, 0x00	; 0
		if (faceInt == 3) {
     508:	83 30       	cpi	r24, 0x03	; 3
     50a:	91 05       	cpc	r25, r1
     50c:	11 f4       	brne	.+4      	; 0x512 <_Z4turn4Turn+0xd4>
			faceInt = -1;
     50e:	8f ef       	ldi	r24, 0xFF	; 255
     510:	9f ef       	ldi	r25, 0xFF	; 255
		}
		this->dir = static_cast<Direction>(faceInt + 1);
     512:	8f 5f       	subi	r24, 0xFF	; 255
     514:	80 93 cd 01 	sts	0x01CD, r24
		currentDir.next();
		break;
		default:
		break;
	}
	stop();
     518:	0e 94 19 02 	call	0x432	; 0x432 <_Z4stopv>
}
     51c:	2a 96       	adiw	r28, 0x0a	; 10
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	f8 94       	cli
     522:	de bf       	out	0x3e, r29	; 62
     524:	0f be       	out	0x3f, r0	; 63
     526:	cd bf       	out	0x3d, r28	; 61
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	08 95       	ret

0000052e <_Z7faceDir9Direction>:
	}
	
	return 0;
}

void faceDir(Direction d){
     52e:	cf 93       	push	r28
     530:	c8 2f       	mov	r28, r24
			faceInt = 4;
		}
		this->dir = static_cast<Direction>(faceInt - 1);
	}
	Direction getNext() {
		int faceInt = dir;
     532:	80 91 cd 01 	lds	r24, 0x01CD
     536:	28 2f       	mov	r18, r24
     538:	30 e0       	ldi	r19, 0x00	; 0
		if (faceInt >= 3) {
     53a:	23 30       	cpi	r18, 0x03	; 3
     53c:	31 05       	cpc	r19, r1
     53e:	0c f0       	brlt	.+2      	; 0x542 <_Z7faceDir9Direction+0x14>
			faceInt = -1;
     540:	8f ef       	ldi	r24, 0xFF	; 255
		}
		return static_cast<Direction>(faceInt + 1);
     542:	8f 5f       	subi	r24, 0xFF	; 255
	if (currentDir.getNext() == d){
     544:	8c 13       	cpse	r24, r28
     546:	02 c0       	rjmp	.+4      	; 0x54c <_Z7faceDir9Direction+0x1e>
		turn(RIGHT);
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	11 c0       	rjmp	.+34     	; 0x56e <_Z7faceDir9Direction+0x40>
	}
	Direction getPrevious() {
		int faceInt = dir;
		if (faceInt <= 0) {
     54c:	21 15       	cp	r18, r1
     54e:	31 05       	cpc	r19, r1
     550:	11 f4       	brne	.+4      	; 0x556 <_Z7faceDir9Direction+0x28>
			faceInt = 4;
     552:	24 e0       	ldi	r18, 0x04	; 4
     554:	30 e0       	ldi	r19, 0x00	; 0
		}
		return static_cast<Direction>(faceInt - 1);
     556:	21 50       	subi	r18, 0x01	; 1
		} else if(currentDir.getPrevious() == d){
     558:	2c 13       	cpse	r18, r28
     55a:	02 c0       	rjmp	.+4      	; 0x560 <_Z7faceDir9Direction+0x32>
		turn(LEFT);
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	07 c0       	rjmp	.+14     	; 0x56e <_Z7faceDir9Direction+0x40>
		} else if(currentDir.getOpposite() == d){
     560:	8d ec       	ldi	r24, 0xCD	; 205
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN10cDirection11getOppositeEv>
     568:	8c 13       	cpse	r24, r28
     56a:	04 c0       	rjmp	.+8      	; 0x574 <_Z7faceDir9Direction+0x46>
		turn(BACK);
     56c:	82 e0       	ldi	r24, 0x02	; 2
	}
}
     56e:	cf 91       	pop	r28
	if (currentDir.getNext() == d){
		turn(RIGHT);
		} else if(currentDir.getPrevious() == d){
		turn(LEFT);
		} else if(currentDir.getOpposite() == d){
		turn(BACK);
     570:	0c 94 1f 02 	jmp	0x43e	; 0x43e <_Z4turn4Turn>
	}
}
     574:	cf 91       	pop	r28
     576:	08 95       	ret

00000578 <_Z13followSegmentv>:

void stop(){
	set_motors(0, 0);
}

int8_t followSegment(){
     578:	2f 92       	push	r2
     57a:	3f 92       	push	r3
     57c:	4f 92       	push	r4
     57e:	5f 92       	push	r5
     580:	6f 92       	push	r6
     582:	7f 92       	push	r7
     584:	8f 92       	push	r8
     586:	9f 92       	push	r9
     588:	af 92       	push	r10
     58a:	bf 92       	push	r11
     58c:	cf 92       	push	r12
     58e:	df 92       	push	r13
     590:	ef 92       	push	r14
     592:	ff 92       	push	r15
     594:	0f 93       	push	r16
     596:	1f 93       	push	r17
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
     59c:	cd b7       	in	r28, 0x3d	; 61
     59e:	de b7       	in	r29, 0x3e	; 62
     5a0:	2a 97       	sbiw	r28, 0x0a	; 10
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
static inline unsigned long millis(void) { return get_ms(); }
     5ac:	0e 94 12 10 	call	0x2024	; 0x2024 <get_ms>
     5b0:	4b 01       	movw	r8, r22
     5b2:	5c 01       	movw	r10, r24
	unsigned long startTime = millis();
	
	int previousProportional = 0;
	long integral = 0;
     5b4:	c1 2c       	mov	r12, r1
     5b6:	d1 2c       	mov	r13, r1
     5b8:	76 01       	movw	r14, r12
}

int8_t followSegment(){
	unsigned long startTime = millis();
	
	int previousProportional = 0;
     5ba:	21 2c       	mov	r2, r1
     5bc:	31 2c       	mov	r3, r1
		int derivative = proportional - previousProportional;
		integral += proportional;
		
		previousProportional = proportional;
		
		int motorDiff = (proportional / Kp) + (integral * Ki) + (derivative * Kd);
     5be:	24 e1       	ldi	r18, 0x14	; 20
     5c0:	42 2e       	mov	r4, r18
     5c2:	51 2c       	mov	r5, r1
     5c4:	30 e1       	ldi	r19, 0x10	; 16
     5c6:	63 2e       	mov	r6, r19
     5c8:	37 e2       	ldi	r19, 0x27	; 39
     5ca:	73 2e       	mov	r7, r19
	unsigned int threshhold = 350;
	
	unsigned int sensors[5];
	
	while(1){
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     5cc:	61 e0       	ldi	r22, 0x01	; 1
     5ce:	ce 01       	movw	r24, r28
     5d0:	01 96       	adiw	r24, 0x01	; 1
     5d2:	0e 94 32 10 	call	0x2064	; 0x2064 <read_line>
		
		int proportional = position - 1900;
     5d6:	8c 01       	movw	r16, r24
     5d8:	0c 56       	subi	r16, 0x6C	; 108
     5da:	17 40       	sbci	r17, 0x07	; 7
		
		int derivative = proportional - previousProportional;
		integral += proportional;
     5dc:	c8 01       	movw	r24, r16
     5de:	aa 27       	eor	r26, r26
     5e0:	97 fd       	sbrc	r25, 7
     5e2:	a0 95       	com	r26
     5e4:	ba 2f       	mov	r27, r26
     5e6:	c8 0e       	add	r12, r24
     5e8:	d9 1e       	adc	r13, r25
     5ea:	ea 1e       	adc	r14, r26
     5ec:	fb 1e       	adc	r15, r27
	while(1){
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
		
		int proportional = position - 1900;
		
		int derivative = proportional - previousProportional;
     5ee:	98 01       	movw	r18, r16
     5f0:	22 19       	sub	r18, r2
     5f2:	33 09       	sbc	r19, r3
		integral += proportional;
		
		previousProportional = proportional;
		
		int motorDiff = (proportional / Kp) + (integral * Ki) + (derivative * Kd);
     5f4:	c8 01       	movw	r24, r16
     5f6:	b2 01       	movw	r22, r4
     5f8:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <__divmodhi4>
     5fc:	26 0f       	add	r18, r22
     5fe:	37 1f       	adc	r19, r23
     600:	c6 9c       	mul	r12, r6
     602:	a0 01       	movw	r20, r0
     604:	c7 9c       	mul	r12, r7
     606:	50 0d       	add	r21, r0
     608:	d6 9c       	mul	r13, r6
     60a:	50 0d       	add	r21, r0
     60c:	11 24       	eor	r1, r1
		const int maxSpeed = speed;
     60e:	80 91 c3 01 	lds	r24, 0x01C3
     612:	99 27       	eor	r25, r25
     614:	87 fd       	sbrc	r24, 7
     616:	90 95       	com	r25
     618:	24 0f       	add	r18, r20
     61a:	35 1f       	adc	r19, r21
     61c:	82 17       	cp	r24, r18
     61e:	93 07       	cpc	r25, r19
     620:	0c f4       	brge	.+2      	; 0x624 <_Z13followSegmentv+0xac>
     622:	9c 01       	movw	r18, r24
		if(motorDiff > maxSpeed) {
			motorDiff = maxSpeed;
		}
		if(motorDiff < -maxSpeed) {
     624:	44 27       	eor	r20, r20
     626:	55 27       	eor	r21, r21
     628:	48 1b       	sub	r20, r24
     62a:	59 0b       	sbc	r21, r25
     62c:	24 17       	cp	r18, r20
     62e:	35 07       	cpc	r19, r21
     630:	0c f4       	brge	.+2      	; 0x634 <_Z13followSegmentv+0xbc>
     632:	9a 01       	movw	r18, r20
			motorDiff = -maxSpeed;
		}
		
		if(motorDiff < 0) {
			set_motors(maxSpeed + motorDiff, maxSpeed);
     634:	bc 01       	movw	r22, r24
		}
		if(motorDiff < -maxSpeed) {
			motorDiff = -maxSpeed;
		}
		
		if(motorDiff < 0) {
     636:	37 ff       	sbrs	r19, 7
     638:	03 c0       	rjmp	.+6      	; 0x640 <_Z13followSegmentv+0xc8>
			set_motors(maxSpeed + motorDiff, maxSpeed);
     63a:	82 0f       	add	r24, r18
     63c:	93 1f       	adc	r25, r19
     63e:	02 c0       	rjmp	.+4      	; 0x644 <_Z13followSegmentv+0xcc>
		} else {
			set_motors(maxSpeed, maxSpeed - motorDiff);
     640:	62 1b       	sub	r22, r18
     642:	73 0b       	sbc	r23, r19
     644:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <set_motors>
		}
		
		if(sensors[1] < threshhold && sensors[2] < threshhold && sensors[3] < threshhold){
     648:	8b 81       	ldd	r24, Y+3	; 0x03
     64a:	9c 81       	ldd	r25, Y+4	; 0x04
     64c:	8e 35       	cpi	r24, 0x5E	; 94
     64e:	91 40       	sbci	r25, 0x01	; 1
     650:	e8 f4       	brcc	.+58     	; 0x68c <_Z13followSegmentv+0x114>
     652:	8d 81       	ldd	r24, Y+5	; 0x05
     654:	9e 81       	ldd	r25, Y+6	; 0x06
     656:	8e 35       	cpi	r24, 0x5E	; 94
     658:	91 40       	sbci	r25, 0x01	; 1
     65a:	c0 f4       	brcc	.+48     	; 0x68c <_Z13followSegmentv+0x114>
     65c:	8f 81       	ldd	r24, Y+7	; 0x07
     65e:	98 85       	ldd	r25, Y+8	; 0x08
     660:	8e 35       	cpi	r24, 0x5E	; 94
     662:	91 40       	sbci	r25, 0x01	; 1
     664:	98 f4       	brcc	.+38     	; 0x68c <_Z13followSegmentv+0x114>
			// There is no line visible ahead, and we didn't see any
			// intersection.  Must be a dead end.
			
			isLeft = false;
     666:	10 92 d0 01 	sts	0x01D0, r1
			isRight = false;
     66a:	10 92 cf 01 	sts	0x01CF, r1
			isForward = false;
     66e:	10 92 d1 01 	sts	0x01D1, r1
			
			set_motors(40, 40);
     672:	68 e2       	ldi	r22, 0x28	; 40
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	88 e2       	ldi	r24, 0x28	; 40
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <set_motors>
			delay_ms(40);
     67e:	88 e2       	ldi	r24, 0x28	; 40
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <delay_ms>
			
			stop();
     686:	0e 94 19 02 	call	0x432	; 0x432 <_Z4stopv>
			
			break;
     68a:	7f c0       	rjmp	.+254    	; 0x78a <_Z13followSegmentv+0x212>
		} else if(sensors[0] > threshhold || sensors[4] > threshhold) {
     68c:	89 81       	ldd	r24, Y+1	; 0x01
     68e:	9a 81       	ldd	r25, Y+2	; 0x02
     690:	8f 35       	cpi	r24, 0x5F	; 95
     692:	91 40       	sbci	r25, 0x01	; 1
     694:	38 f4       	brcc	.+14     	; 0x6a4 <_Z13followSegmentv+0x12c>
     696:	89 85       	ldd	r24, Y+9	; 0x09
     698:	9a 85       	ldd	r25, Y+10	; 0x0a
     69a:	8f 35       	cpi	r24, 0x5F	; 95
     69c:	91 40       	sbci	r25, 0x01	; 1
     69e:	10 f4       	brcc	.+4      	; 0x6a4 <_Z13followSegmentv+0x12c>
		int proportional = position - 1900;
		
		int derivative = proportional - previousProportional;
		integral += proportional;
		
		previousProportional = proportional;
     6a0:	18 01       	movw	r2, r16
     6a2:	94 cf       	rjmp	.-216    	; 0x5cc <_Z13followSegmentv+0x54>
			break;
		} else if(sensors[0] > threshhold || sensors[4] > threshhold) {
			// Found an intersection
			
			// slow down and position sensors fully over the line ahead
			set_motors(40, 40);
     6a4:	68 e2       	ldi	r22, 0x28	; 40
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	88 e2       	ldi	r24, 0x28	; 40
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <set_motors>
			delay_ms(50);
     6b0:	82 e3       	ldi	r24, 0x32	; 50
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <delay_ms>
			
			// take a second reading at the new location and determine the presence of connections
			read_line(sensors,IR_EMITTERS_ON);
     6b8:	61 e0       	ldi	r22, 0x01	; 1
     6ba:	ce 01       	movw	r24, r28
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	0e 94 32 10 	call	0x2064	; 0x2064 <read_line>
			isLeft = (sensors[0] > 500);
     6c2:	21 e0       	ldi	r18, 0x01	; 1
     6c4:	89 81       	ldd	r24, Y+1	; 0x01
     6c6:	9a 81       	ldd	r25, Y+2	; 0x02
     6c8:	85 3f       	cpi	r24, 0xF5	; 245
     6ca:	91 40       	sbci	r25, 0x01	; 1
     6cc:	08 f4       	brcc	.+2      	; 0x6d0 <_Z13followSegmentv+0x158>
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	20 93 d0 01 	sts	0x01D0, r18
			isRight = (sensors[4] > 500);
     6d4:	21 e0       	ldi	r18, 0x01	; 1
     6d6:	89 85       	ldd	r24, Y+9	; 0x09
     6d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6da:	85 3f       	cpi	r24, 0xF5	; 245
     6dc:	91 40       	sbci	r25, 0x01	; 1
     6de:	08 f4       	brcc	.+2      	; 0x6e2 <_Z13followSegmentv+0x16a>
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	20 93 cf 01 	sts	0x01CF, r18

			// to detect a forward connection, drive the Micromouse forward slightly to avoid incorrect assumption
			//  that a corner is a forward connection
			set_motors(40, 40);
     6e6:	68 e2       	ldi	r22, 0x28	; 40
     6e8:	70 e0       	ldi	r23, 0x00	; 0
     6ea:	88 e2       	ldi	r24, 0x28	; 40
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <set_motors>
			delay_ms(200);
     6f2:	88 ec       	ldi	r24, 0xC8	; 200
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <delay_ms>
			stop();
     6fa:	0e 94 19 02 	call	0x432	; 0x432 <_Z4stopv>
			
			read_line(sensors,IR_EMITTERS_ON);
     6fe:	61 e0       	ldi	r22, 0x01	; 1
     700:	ce 01       	movw	r24, r28
     702:	01 96       	adiw	r24, 0x01	; 1
     704:	0e 94 32 10 	call	0x2064	; 0x2064 <read_line>
			
			if (sensors[0] > threshhold && sensors[1] > threshhold && sensors[2] > threshhold && sensors[3] > threshhold && sensors[4] > threshhold){
     708:	29 81       	ldd	r18, Y+1	; 0x01
     70a:	3a 81       	ldd	r19, Y+2	; 0x02
     70c:	8b 81       	ldd	r24, Y+3	; 0x03
     70e:	9c 81       	ldd	r25, Y+4	; 0x04
     710:	2f 35       	cpi	r18, 0x5F	; 95
     712:	31 40       	sbci	r19, 0x01	; 1
     714:	20 f1       	brcs	.+72     	; 0x75e <_Z13followSegmentv+0x1e6>
     716:	8f 35       	cpi	r24, 0x5F	; 95
     718:	21 e0       	ldi	r18, 0x01	; 1
     71a:	92 07       	cpc	r25, r18
     71c:	00 f1       	brcs	.+64     	; 0x75e <_Z13followSegmentv+0x1e6>
     71e:	2d 81       	ldd	r18, Y+5	; 0x05
     720:	3e 81       	ldd	r19, Y+6	; 0x06
     722:	2f 35       	cpi	r18, 0x5F	; 95
     724:	31 40       	sbci	r19, 0x01	; 1
     726:	d8 f0       	brcs	.+54     	; 0x75e <_Z13followSegmentv+0x1e6>
     728:	2f 81       	ldd	r18, Y+7	; 0x07
     72a:	38 85       	ldd	r19, Y+8	; 0x08
     72c:	2f 35       	cpi	r18, 0x5F	; 95
     72e:	31 40       	sbci	r19, 0x01	; 1
     730:	b0 f0       	brcs	.+44     	; 0x75e <_Z13followSegmentv+0x1e6>
     732:	29 85       	ldd	r18, Y+9	; 0x09
     734:	3a 85       	ldd	r19, Y+10	; 0x0a
     736:	2f 35       	cpi	r18, 0x5F	; 95
     738:	31 40       	sbci	r19, 0x01	; 1
     73a:	88 f0       	brcs	.+34     	; 0x75e <_Z13followSegmentv+0x1e6>
				play_frequency(2500, 100, 10);
     73c:	4a e0       	ldi	r20, 0x0A	; 10
     73e:	64 e6       	ldi	r22, 0x64	; 100
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	84 ec       	ldi	r24, 0xC4	; 196
     744:	99 e0       	ldi	r25, 0x09	; 9
     746:	0e 94 08 0a 	call	0x1410	; 0x1410 <play_frequency>
				
				foundFinish = true;
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	80 93 ce 01 	sts	0x01CE, r24
				isLeft = false;
     750:	10 92 d0 01 	sts	0x01D0, r1
				isRight = false;
     754:	10 92 cf 01 	sts	0x01CF, r1
				isForward = false;
     758:	10 92 d1 01 	sts	0x01D1, r1
				break;
     75c:	16 c0       	rjmp	.+44     	; 0x78a <_Z13followSegmentv+0x212>
			} else {
				foundFinish = false;
     75e:	10 92 ce 01 	sts	0x01CE, r1
			}
			
			isForward = (sensors[1] > threshhold || sensors[2] > threshhold || sensors[3] > threshhold);
     762:	8f 35       	cpi	r24, 0x5F	; 95
     764:	91 40       	sbci	r25, 0x01	; 1
     766:	70 f4       	brcc	.+28     	; 0x784 <_Z13followSegmentv+0x20c>
     768:	8d 81       	ldd	r24, Y+5	; 0x05
     76a:	9e 81       	ldd	r25, Y+6	; 0x06
     76c:	8f 35       	cpi	r24, 0x5F	; 95
     76e:	91 40       	sbci	r25, 0x01	; 1
     770:	48 f4       	brcc	.+18     	; 0x784 <_Z13followSegmentv+0x20c>
     772:	21 e0       	ldi	r18, 0x01	; 1
     774:	8f 81       	ldd	r24, Y+7	; 0x07
     776:	98 85       	ldd	r25, Y+8	; 0x08
     778:	8f 35       	cpi	r24, 0x5F	; 95
     77a:	91 40       	sbci	r25, 0x01	; 1
     77c:	08 f4       	brcc	.+2      	; 0x780 <_Z13followSegmentv+0x208>
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	82 2f       	mov	r24, r18
     782:	01 c0       	rjmp	.+2      	; 0x786 <_Z13followSegmentv+0x20e>
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	80 93 d1 01 	sts	0x01D1, r24
     78a:	0e 94 12 10 	call	0x2024	; 0x2024 <get_ms>
			
			break;
		}
	}
	
	unsigned long totalTime = millis() - startTime;
     78e:	68 19       	sub	r22, r8
     790:	79 09       	sbc	r23, r9
     792:	8a 09       	sbc	r24, r10
     794:	9b 09       	sbc	r25, r11
	
	if (totalTime >= 50 && totalTime <= 850){
     796:	8b 01       	movw	r16, r22
     798:	9c 01       	movw	r18, r24
     79a:	02 53       	subi	r16, 0x32	; 50
     79c:	11 09       	sbc	r17, r1
     79e:	21 09       	sbc	r18, r1
     7a0:	31 09       	sbc	r19, r1
     7a2:	01 32       	cpi	r16, 0x21	; 33
     7a4:	13 40       	sbci	r17, 0x03	; 3
     7a6:	21 05       	cpc	r18, r1
     7a8:	31 05       	cpc	r19, r1
     7aa:	18 f1       	brcs	.+70     	; 0x7f2 <_Z13followSegmentv+0x27a>
		return 1;
	} else if(totalTime > 850 && totalTime <= 1300){
     7ac:	8b 01       	movw	r16, r22
     7ae:	9c 01       	movw	r18, r24
     7b0:	03 55       	subi	r16, 0x53	; 83
     7b2:	13 40       	sbci	r17, 0x03	; 3
     7b4:	21 09       	sbc	r18, r1
     7b6:	31 09       	sbc	r19, r1
     7b8:	02 3c       	cpi	r16, 0xC2	; 194
     7ba:	11 40       	sbci	r17, 0x01	; 1
     7bc:	21 05       	cpc	r18, r1
     7be:	31 05       	cpc	r19, r1
     7c0:	d0 f0       	brcs	.+52     	; 0x7f6 <_Z13followSegmentv+0x27e>
		return 2;
	} else if(totalTime > 1300 && totalTime <= 1850){
     7c2:	8b 01       	movw	r16, r22
     7c4:	9c 01       	movw	r18, r24
     7c6:	05 51       	subi	r16, 0x15	; 21
     7c8:	15 40       	sbci	r17, 0x05	; 5
     7ca:	21 09       	sbc	r18, r1
     7cc:	31 09       	sbc	r19, r1
     7ce:	06 32       	cpi	r16, 0x26	; 38
     7d0:	12 40       	sbci	r17, 0x02	; 2
     7d2:	21 05       	cpc	r18, r1
     7d4:	31 05       	cpc	r19, r1
     7d6:	88 f0       	brcs	.+34     	; 0x7fa <_Z13followSegmentv+0x282>
		return 3;
	} else if(totalTime > 1850 && totalTime <= 2700){
     7d8:	dc 01       	movw	r26, r24
     7da:	cb 01       	movw	r24, r22
     7dc:	8b 53       	subi	r24, 0x3B	; 59
     7de:	97 40       	sbci	r25, 0x07	; 7
     7e0:	a1 09       	sbc	r26, r1
     7e2:	b1 09       	sbc	r27, r1
     7e4:	82 35       	cpi	r24, 0x52	; 82
     7e6:	93 40       	sbci	r25, 0x03	; 3
     7e8:	a1 05       	cpc	r26, r1
     7ea:	b1 05       	cpc	r27, r1
     7ec:	40 f4       	brcc	.+16     	; 0x7fe <_Z13followSegmentv+0x286>
		return 4;
     7ee:	84 e0       	ldi	r24, 0x04	; 4
     7f0:	07 c0       	rjmp	.+14     	; 0x800 <_Z13followSegmentv+0x288>
	}
	
	unsigned long totalTime = millis() - startTime;
	
	if (totalTime >= 50 && totalTime <= 850){
		return 1;
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	05 c0       	rjmp	.+10     	; 0x800 <_Z13followSegmentv+0x288>
	} else if(totalTime > 850 && totalTime <= 1300){
		return 2;
     7f6:	82 e0       	ldi	r24, 0x02	; 2
     7f8:	03 c0       	rjmp	.+6      	; 0x800 <_Z13followSegmentv+0x288>
	} else if(totalTime > 1300 && totalTime <= 1850){
		return 3;
     7fa:	83 e0       	ldi	r24, 0x03	; 3
     7fc:	01 c0       	rjmp	.+2      	; 0x800 <_Z13followSegmentv+0x288>
	} else if(totalTime > 1850 && totalTime <= 2700){
		return 4;
	} else {
		return 0;
     7fe:	80 e0       	ldi	r24, 0x00	; 0
	}
     800:	2a 96       	adiw	r28, 0x0a	; 10
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	f8 94       	cli
     806:	de bf       	out	0x3e, r29	; 62
     808:	0f be       	out	0x3f, r0	; 63
     80a:	cd bf       	out	0x3d, r28	; 61
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ff 90       	pop	r15
     816:	ef 90       	pop	r14
     818:	df 90       	pop	r13
     81a:	cf 90       	pop	r12
     81c:	bf 90       	pop	r11
     81e:	af 90       	pop	r10
     820:	9f 90       	pop	r9
     822:	8f 90       	pop	r8
     824:	7f 90       	pop	r7
     826:	6f 90       	pop	r6
     828:	5f 90       	pop	r5
     82a:	4f 90       	pop	r4
     82c:	3f 90       	pop	r3
     82e:	2f 90       	pop	r2
     830:	08 95       	ret

00000832 <_Z10followLinev>:
	play_from_program_space(bloop);
}


int8_t followLine(){
	costCounter = 0;
     832:	10 92 c4 01 	sts	0x01C4, r1
	
	while(1){
		uint8_t tilesTravelled = followSegment();
     836:	0e 94 bc 02 	call	0x578	; 0x578 <_Z13followSegmentv>
		
		costCounter += tilesTravelled;
     83a:	90 91 c4 01 	lds	r25, 0x01C4
     83e:	98 0f       	add	r25, r24
     840:	90 93 c4 01 	sts	0x01C4, r25
		
		switch(currentDir){
     844:	20 91 cd 01 	lds	r18, 0x01CD
     848:	21 30       	cpi	r18, 0x01	; 1
     84a:	99 f0       	breq	.+38     	; 0x872 <_Z10followLinev+0x40>
     84c:	60 f0       	brcs	.+24     	; 0x866 <_Z10followLinev+0x34>
     84e:	22 30       	cpi	r18, 0x02	; 2
     850:	31 f0       	breq	.+12     	; 0x85e <_Z10followLinev+0x2c>
     852:	23 30       	cpi	r18, 0x03	; 3
     854:	99 f4       	brne	.+38     	; 0x87c <_Z10followLinev+0x4a>
			break;
			case SOUTH:
			currentPos.y -= tilesTravelled;
			break;
			case EAST:
			currentPos.x -= tilesTravelled;
     856:	20 91 cb 01 	lds	r18, 0x01CB
     85a:	28 1b       	sub	r18, r24
     85c:	0d c0       	rjmp	.+26     	; 0x878 <_Z10followLinev+0x46>
		
		costCounter += tilesTravelled;
		
		switch(currentDir){
			case NORTH:
			currentPos.y += tilesTravelled;
     85e:	20 91 cc 01 	lds	r18, 0x01CC
     862:	28 0f       	add	r18, r24
     864:	03 c0       	rjmp	.+6      	; 0x86c <_Z10followLinev+0x3a>
			break;
			case SOUTH:
			currentPos.y -= tilesTravelled;
     866:	20 91 cc 01 	lds	r18, 0x01CC
     86a:	28 1b       	sub	r18, r24
     86c:	20 93 cc 01 	sts	0x01CC, r18
			break;
     870:	05 c0       	rjmp	.+10     	; 0x87c <_Z10followLinev+0x4a>
			case EAST:
			currentPos.x -= tilesTravelled;
			break;
			case WEST:
			currentPos.x += tilesTravelled;
     872:	20 91 cb 01 	lds	r18, 0x01CB
     876:	28 0f       	add	r18, r24
     878:	20 93 cb 01 	sts	0x01CB, r18
			break;
			default:
			break;
		}
		
		if (isLeft && !isRight && !isForward){
     87c:	80 91 d0 01 	lds	r24, 0x01D0
     880:	20 91 cf 01 	lds	r18, 0x01CF
     884:	88 23       	and	r24, r24
     886:	39 f0       	breq	.+14     	; 0x896 <_Z10followLinev+0x64>
     888:	21 11       	cpse	r18, r1
     88a:	05 c0       	rjmp	.+10     	; 0x896 <_Z10followLinev+0x64>
     88c:	80 91 d1 01 	lds	r24, 0x01D1
     890:	81 11       	cpse	r24, r1
     892:	0d c0       	rjmp	.+26     	; 0x8ae <_Z10followLinev+0x7c>
     894:	09 c0       	rjmp	.+18     	; 0x8a8 <_Z10followLinev+0x76>
			turn(LEFT);
		} else if(isRight && !isLeft && !isForward){
     896:	22 23       	and	r18, r18
     898:	51 f0       	breq	.+20     	; 0x8ae <_Z10followLinev+0x7c>
     89a:	81 11       	cpse	r24, r1
     89c:	08 c0       	rjmp	.+16     	; 0x8ae <_Z10followLinev+0x7c>
     89e:	80 91 d1 01 	lds	r24, 0x01D1
     8a2:	81 11       	cpse	r24, r1
     8a4:	04 c0       	rjmp	.+8      	; 0x8ae <_Z10followLinev+0x7c>
			turn(RIGHT);
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	0e 94 1f 02 	call	0x43e	; 0x43e <_Z4turn4Turn>
     8ac:	c4 cf       	rjmp	.-120    	; 0x836 <_Z10followLinev+0x4>
			break;
		}
	}
	
	return costCounter;
}
     8ae:	89 2f       	mov	r24, r25
     8b0:	08 95       	ret

000008b2 <_Z10travelPathP4node>:
	int8_t totalDiff = xDiff + yDiff;

	return totalDiff;
}

void travelPath(node* n){
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	ec 01       	movw	r28, r24
	while (n->parent != NULL){
     8b8:	28 89       	ldd	r18, Y+16	; 0x10
     8ba:	39 89       	ldd	r19, Y+17	; 0x11
     8bc:	21 15       	cp	r18, r1
     8be:	31 05       	cpc	r19, r1
     8c0:	b9 f0       	breq	.+46     	; 0x8f0 <_Z10travelPathP4node+0x3e>
     8c2:	fe 01       	movw	r30, r28
	int8_t totalDiff = xDiff + yDiff;

	return totalDiff;
}

void travelPath(node* n){
     8c4:	80 e0       	ldi	r24, 0x00	; 0
	while (n->parent != NULL){
		int8_t i;
		for (i=0; i<4; i++){
			if (n->connections[i] != NULL){
     8c6:	43 81       	ldd	r20, Z+3	; 0x03
     8c8:	54 81       	ldd	r21, Z+4	; 0x04
     8ca:	41 15       	cp	r20, r1
     8cc:	51 05       	cpc	r21, r1
     8ce:	19 f0       	breq	.+6      	; 0x8d6 <_Z10travelPathP4node+0x24>
				if (n->connections[i] == n->parent){
     8d0:	42 17       	cp	r20, r18
     8d2:	53 07       	cpc	r21, r19
     8d4:	29 f0       	breq	.+10     	; 0x8e0 <_Z10travelPathP4node+0x2e>
     8d6:	8f 5f       	subi	r24, 0xFF	; 255
     8d8:	32 96       	adiw	r30, 0x02	; 2
}

void travelPath(node* n){
	while (n->parent != NULL){
		int8_t i;
		for (i=0; i<4; i++){
     8da:	84 30       	cpi	r24, 0x04	; 4
     8dc:	a1 f7       	brne	.-24     	; 0x8c6 <_Z10travelPathP4node+0x14>
     8de:	f1 cf       	rjmp	.-30     	; 0x8c2 <_Z10travelPathP4node+0x10>
	}
}

void faceDir(int i){
	Direction d = static_cast<Direction>(i);
	faceDir(d);
     8e0:	0e 94 97 02 	call	0x52e	; 0x52e <_Z7faceDir9Direction>
		if (i != 4){
			cDirection cd;
			cd = i;
		
			faceDir(i);
			followLine();
     8e4:	0e 94 19 04 	call	0x832	; 0x832 <_Z10followLinev>

			n = n->parent;
     8e8:	08 88       	ldd	r0, Y+16	; 0x10
     8ea:	d9 89       	ldd	r29, Y+17	; 0x11
     8ec:	c0 2d       	mov	r28, r0
     8ee:	e4 cf       	rjmp	.-56     	; 0x8b8 <_Z10travelPathP4node+0x6>
		}
	}
}
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	08 95       	ret

000008f6 <_Z11astarTravelP4node>:

void astarTravel(node* target){
     8f6:	6f 92       	push	r6
     8f8:	7f 92       	push	r7
     8fa:	8f 92       	push	r8
     8fc:	9f 92       	push	r9
     8fe:	af 92       	push	r10
     900:	bf 92       	push	r11
     902:	cf 92       	push	r12
     904:	df 92       	push	r13
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	cd b7       	in	r28, 0x3d	; 61
     914:	de b7       	in	r29, 0x3e	; 62
     916:	c2 5a       	subi	r28, 0xA2	; 162
     918:	d1 09       	sbc	r29, r1
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	f8 94       	cli
     91e:	de bf       	out	0x3e, r29	; 62
     920:	0f be       	out	0x3f, r0	; 63
     922:	cd bf       	out	0x3d, r28	; 61
	NodeList openlist;
	NodeList closedlist;

	target->gCost = 0;
     924:	fc 01       	movw	r30, r24
     926:	17 86       	std	Z+15, r1	; 0x0f
	int8_t size(){
		return top;
	}
	void addNode(node* n){
		if (top < 40) {
			nodes[top] = n;
     928:	64 96       	adiw	r28, 0x14	; 20
     92a:	9f af       	std	Y+63, r25	; 0x3f
     92c:	8e af       	std	Y+62, r24	; 0x3e
     92e:	64 97       	sbiw	r28, 0x14	; 20
	private:
	node* nodes[40];
	int8_t top;
	public:
	NodeList(){
		top = 0;
     930:	a1 2c       	mov	r10, r1
		return top;
	}
	void addNode(node* n){
		if (top < 40) {
			nodes[top] = n;
			top++;
     932:	bb 24       	eor	r11, r11
     934:	b3 94       	inc	r11
			return NULL;
		}
		return n;
	}
	node* getNodeAtIndex(int8_t i){
		if (i < top){
     936:	1b 14       	cp	r1, r11
     938:	2c f4       	brge	.+10     	; 0x944 <__stack+0x45>
			return nodes[i];
     93a:	64 96       	adiw	r28, 0x14	; 20
     93c:	0e ad       	ldd	r16, Y+62	; 0x3e
     93e:	1f ad       	ldd	r17, Y+63	; 0x3f
     940:	64 97       	sbiw	r28, 0x14	; 20
     942:	02 c0       	rjmp	.+4      	; 0x948 <__stack+0x49>
		}
		return NULL;
     944:	00 e0       	ldi	r16, 0x00	; 0
     946:	10 e0       	ldi	r17, 0x00	; 0
	openlist.addNode(target);

	while (!openlist.isEmpty()){

		node* lowest = openlist.getNodeAtIndex(0);
		int8_t lowestFCost = lowest->gCost + hCost(lowest, root);
     948:	e0 90 c7 01 	lds	r14, 0x01C7
     94c:	f0 90 c8 01 	lds	r15, 0x01C8
     950:	b7 01       	movw	r22, r14
     952:	c8 01       	movw	r24, r16
     954:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z5hCostP4nodeS0_>
     958:	f8 01       	movw	r30, r16
     95a:	67 84       	ldd	r6, Z+15	; 0x0f
     95c:	68 0e       	add	r6, r24
		for (int8_t i=0; i<openlist.size(); i++){
     95e:	9e 01       	movw	r18, r28
     960:	2e 5a       	subi	r18, 0xAE	; 174
     962:	3f 4f       	sbci	r19, 0xFF	; 255
     964:	49 01       	movw	r8, r18
     966:	71 2c       	mov	r7, r1
     968:	7b 14       	cp	r7, r11
     96a:	8c f4       	brge	.+34     	; 0x98e <__stack+0x8f>
		return false;
	}
	bool isEmpty(){
		return (top == 0);
	}
	node* operator[] (int8_t i) { return nodes[i]; }
     96c:	f4 01       	movw	r30, r8
     96e:	c1 90       	ld	r12, Z+
     970:	d1 90       	ld	r13, Z+
     972:	4f 01       	movw	r8, r30
	while (!openlist.isEmpty()){

		node* lowest = openlist.getNodeAtIndex(0);
		int8_t lowestFCost = lowest->gCost + hCost(lowest, root);
		for (int8_t i=0; i<openlist.size(); i++){
			int8_t fCost = openlist[i]->gCost + hCost(openlist[i], root);
     974:	b7 01       	movw	r22, r14
     976:	c6 01       	movw	r24, r12
     978:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z5hCostP4nodeS0_>
     97c:	f6 01       	movw	r30, r12
     97e:	97 85       	ldd	r25, Z+15	; 0x0f
     980:	98 0f       	add	r25, r24
			if (fCost < lowestFCost){
     982:	96 15       	cp	r25, r6
     984:	0c f0       	brlt	.+2      	; 0x988 <__stack+0x89>
     986:	68 01       	movw	r12, r16
     988:	73 94       	inc	r7

	while (!openlist.isEmpty()){

		node* lowest = openlist.getNodeAtIndex(0);
		int8_t lowestFCost = lowest->gCost + hCost(lowest, root);
		for (int8_t i=0; i<openlist.size(); i++){
     98a:	86 01       	movw	r16, r12
     98c:	ed cf       	rjmp	.-38     	; 0x968 <__stack+0x69>
     98e:	f8 01       	movw	r30, r16
     990:	90 81       	ld	r25, Z
     992:	81 81       	ldd	r24, Z+1	; 0x01
     994:	fe 01       	movw	r30, r28
     996:	ee 5a       	subi	r30, 0xAE	; 174
     998:	ff 4f       	sbci	r31, 0xFF	; 255
		position p;
		p.x = x;
		p.y = y;
		int8_t i;
		node* n;
		for (i=0; i<top && nodes[i]->pos != p; ++i);
     99a:	60 e0       	ldi	r22, 0x00	; 0
     99c:	6b 15       	cp	r22, r11
     99e:	5c f4       	brge	.+22     	; 0x9b6 <__stack+0xb7>
     9a0:	a1 91       	ld	r26, Z+
     9a2:	b1 91       	ld	r27, Z+
	int8_t x, y;
	bool operator == (const position &RHS) {
		return (this->x == RHS.x && this->y == RHS.y);
	}
	bool operator != (const position &RHS) {
		return (this->x != RHS.x || this->y != RHS.y);
     9a4:	2c 91       	ld	r18, X
     9a6:	29 13       	cpse	r18, r25
     9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <__stack+0xb3>
     9aa:	11 96       	adiw	r26, 0x01	; 1
     9ac:	2c 91       	ld	r18, X
     9ae:	28 17       	cp	r18, r24
     9b0:	11 f0       	breq	.+4      	; 0x9b6 <__stack+0xb7>
     9b2:	6f 5f       	subi	r22, 0xFF	; 255
     9b4:	f3 cf       	rjmp	.-26     	; 0x99c <__stack+0x9d>
		n = nodes[i];
     9b6:	e6 2f       	mov	r30, r22
     9b8:	ee 0f       	add	r30, r30
     9ba:	ff 0b       	sbc	r31, r31
     9bc:	22 e5       	ldi	r18, 0x52	; 82
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	2c 0f       	add	r18, r28
     9c2:	3d 1f       	adc	r19, r29
     9c4:	e2 0f       	add	r30, r18
     9c6:	f3 1f       	adc	r31, r19
     9c8:	70 81       	ld	r23, Z
     9ca:	a1 81       	ldd	r26, Z+1	; 0x01
		if (i == top){
     9cc:	6b 11       	cpse	r22, r11
     9ce:	7a c0       	rjmp	.+244    	; 0xac4 <__stack+0x1c5>
			return NULL;
     9d0:	61 2c       	mov	r6, r1
     9d2:	71 2c       	mov	r7, r1
	}
	int8_t size(){
		return top;
	}
	void addNode(node* n){
		if (top < 40) {
     9d4:	37 e2       	ldi	r19, 0x27	; 39
     9d6:	3a 15       	cp	r19, r10
     9d8:	64 f0       	brlt	.+24     	; 0x9f2 <__stack+0xf3>
			nodes[top] = n;
     9da:	aa 2d       	mov	r26, r10
     9dc:	aa 0f       	add	r26, r26
     9de:	bb 0b       	sbc	r27, r27
     9e0:	41 e0       	ldi	r20, 0x01	; 1
     9e2:	50 e0       	ldi	r21, 0x00	; 0
     9e4:	4c 0f       	add	r20, r28
     9e6:	5d 1f       	adc	r21, r29
     9e8:	a4 0f       	add	r26, r20
     9ea:	b5 1f       	adc	r27, r21
     9ec:	6d 92       	st	X+, r6
     9ee:	7c 92       	st	X, r7
			top++;
     9f0:	a3 94       	inc	r10

		node* currentNode = openlist.removeNodeByPosition(lowest->pos);

		closedlist.addNode(currentNode);

		if (currentNode == root){
     9f2:	6e 14       	cp	r6, r14
     9f4:	7f 04       	cpc	r7, r15
     9f6:	c1 f4       	brne	.+48     	; 0xa28 <__stack+0x129>
				}
			}
		}
	}
	
	travelPath(root);
     9f8:	c7 01       	movw	r24, r14
}
     9fa:	ce 55       	subi	r28, 0x5E	; 94
     9fc:	df 4f       	sbci	r29, 0xFF	; 255
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	f8 94       	cli
     a02:	de bf       	out	0x3e, r29	; 62
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	cd bf       	out	0x3d, r28	; 61
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	ff 90       	pop	r15
     a12:	ef 90       	pop	r14
     a14:	df 90       	pop	r13
     a16:	cf 90       	pop	r12
     a18:	bf 90       	pop	r11
     a1a:	af 90       	pop	r10
     a1c:	9f 90       	pop	r9
     a1e:	8f 90       	pop	r8
     a20:	7f 90       	pop	r7
     a22:	6f 90       	pop	r6
				}
			}
		}
	}
	
	travelPath(root);
     a24:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <_Z10travelPathP4node>
     a28:	b3 01       	movw	r22, r6

		node* currentNode = openlist.removeNodeByPosition(lowest->pos);

		closedlist.addNode(currentNode);

		if (currentNode == root){
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	30 e0       	ldi	r19, 0x00	; 0
			break;
		}

		for (int8_t i=0; i<4; i++){
			node* child = currentNode->connections[i];
     a2e:	fb 01       	movw	r30, r22
     a30:	a3 81       	ldd	r26, Z+3	; 0x03
     a32:	b4 81       	ldd	r27, Z+4	; 0x04
			if (child != NULL){
     a34:	10 97       	sbiw	r26, 0x00	; 0
     a36:	d9 f1       	breq	.+118    	; 0xaae <__stack+0x1af>
     a38:	ce 01       	movw	r24, r28
     a3a:	01 96       	adiw	r24, 0x01	; 1
     a3c:	10 e0       	ldi	r17, 0x00	; 0
		}
		return NULL;
	}
	bool isNodeInList(node* n){
		for (int8_t i=0; i<top; i++){
			if (n == nodes[i]){
     a3e:	fc 01       	movw	r30, r24
     a40:	41 91       	ld	r20, Z+
     a42:	51 91       	ld	r21, Z+
     a44:	cf 01       	movw	r24, r30
     a46:	a4 17       	cp	r26, r20
     a48:	b5 07       	cpc	r27, r21
     a4a:	89 f1       	breq	.+98     	; 0xaae <__stack+0x1af>
     a4c:	1f 5f       	subi	r17, 0xFF	; 255
			return nodes[i];
		}
		return NULL;
	}
	bool isNodeInList(node* n){
		for (int8_t i=0; i<top; i++){
     a4e:	1a 15       	cp	r17, r10
     a50:	b4 f3       	brlt	.-20     	; 0xa3e <__stack+0x13f>
     a52:	ce 01       	movw	r24, r28
     a54:	8e 5a       	subi	r24, 0xAE	; 174
     a56:	9f 4f       	sbci	r25, 0xFF	; 255
     a58:	10 e0       	ldi	r17, 0x00	; 0
     a5a:	1b 15       	cp	r17, r11
     a5c:	54 f4       	brge	.+20     	; 0xa72 <__stack+0x173>
			if (n == nodes[i]){
     a5e:	fc 01       	movw	r30, r24
     a60:	41 91       	ld	r20, Z+
     a62:	51 91       	ld	r21, Z+
     a64:	cf 01       	movw	r24, r30
     a66:	a4 17       	cp	r26, r20
     a68:	b5 07       	cpc	r27, r21
     a6a:	09 f4       	brne	.+2      	; 0xa6e <__stack+0x16f>
     a6c:	54 c0       	rjmp	.+168    	; 0xb16 <__stack+0x217>
     a6e:	1f 5f       	subi	r17, 0xFF	; 255
     a70:	f4 cf       	rjmp	.-24     	; 0xa5a <__stack+0x15b>
	}
	int8_t size(){
		return top;
	}
	void addNode(node* n){
		if (top < 40) {
     a72:	47 e2       	ldi	r20, 0x27	; 39
     a74:	4b 15       	cp	r20, r11
     a76:	6c f0       	brlt	.+26     	; 0xa92 <__stack+0x193>
			nodes[top] = n;
     a78:	8b 2d       	mov	r24, r11
     a7a:	88 0f       	add	r24, r24
     a7c:	99 0b       	sbc	r25, r25
     a7e:	42 e5       	ldi	r20, 0x52	; 82
     a80:	50 e0       	ldi	r21, 0x00	; 0
     a82:	4c 0f       	add	r20, r28
     a84:	5d 1f       	adc	r21, r29
     a86:	84 0f       	add	r24, r20
     a88:	95 1f       	adc	r25, r21
     a8a:	fc 01       	movw	r30, r24
     a8c:	b1 83       	std	Z+1, r27	; 0x01
     a8e:	a0 83       	st	Z, r26
			top++;
     a90:	b3 94       	inc	r11
				if (closedlist.isNodeInList(child)){
					continue;
				}
				if (!openlist.isNodeInList(child)){
					openlist.addNode(child);
					child->parent = currentNode;
     a92:	51 96       	adiw	r26, 0x11	; 17
     a94:	7c 92       	st	X, r7
     a96:	6e 92       	st	-X, r6
     a98:	50 97       	sbiw	r26, 0x10	; 16
     a9a:	c3 01       	movw	r24, r6
     a9c:	82 0f       	add	r24, r18
     a9e:	93 1f       	adc	r25, r19
					child->gCost = currentNode->gCost + currentNode->costs[i];
     aa0:	fc 01       	movw	r30, r24
     aa2:	83 85       	ldd	r24, Z+11	; 0x0b
     aa4:	f3 01       	movw	r30, r6
     aa6:	97 85       	ldd	r25, Z+15	; 0x0f
     aa8:	89 0f       	add	r24, r25
     aaa:	1f 96       	adiw	r26, 0x0f	; 15
     aac:	8c 93       	st	X, r24
     aae:	2f 5f       	subi	r18, 0xFF	; 255
     ab0:	3f 4f       	sbci	r19, 0xFF	; 255
     ab2:	6e 5f       	subi	r22, 0xFE	; 254
     ab4:	7f 4f       	sbci	r23, 0xFF	; 255

		if (currentNode == root){
			break;
		}

		for (int8_t i=0; i<4; i++){
     ab6:	24 30       	cpi	r18, 0x04	; 4
     ab8:	31 05       	cpc	r19, r1
     aba:	09 f0       	breq	.+2      	; 0xabe <__stack+0x1bf>
     abc:	b8 cf       	rjmp	.-144    	; 0xa2e <__stack+0x12f>

	target->gCost = 0;

	openlist.addNode(target);

	while (!openlist.isEmpty()){
     abe:	b1 10       	cpse	r11, r1
     ac0:	3a cf       	rjmp	.-396    	; 0x936 <__stack+0x37>
     ac2:	9a cf       	rjmp	.-204    	; 0x9f8 <__stack+0xf9>
		for (i=0; i<top && nodes[i]->pos != p; ++i);
		n = nodes[i];
		if (i == top){
			return NULL;
		}
		for (;i<top-1; i++){
     ac4:	8b 2d       	mov	r24, r11
     ac6:	99 27       	eor	r25, r25
     ac8:	87 fd       	sbrc	r24, 7
     aca:	90 95       	com	r25
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	26 2f       	mov	r18, r22
     ad0:	33 27       	eor	r19, r19
     ad2:	27 fd       	sbrc	r18, 7
     ad4:	30 95       	com	r19
     ad6:	28 17       	cp	r18, r24
     ad8:	39 07       	cpc	r19, r25
     ada:	cc f4       	brge	.+50     	; 0xb0e <__stack+0x20f>
			nodes[i] = nodes[i+1];
     adc:	f9 01       	movw	r30, r18
     ade:	31 96       	adiw	r30, 0x01	; 1
     ae0:	ee 0f       	add	r30, r30
     ae2:	ff 1f       	adc	r31, r31
     ae4:	42 e5       	ldi	r20, 0x52	; 82
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	4c 0f       	add	r20, r28
     aea:	5d 1f       	adc	r21, r29
     aec:	e4 0f       	add	r30, r20
     aee:	f5 1f       	adc	r31, r21
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	f9 01       	movw	r30, r18
     af6:	ee 0f       	add	r30, r30
     af8:	ff 1f       	adc	r31, r31
     afa:	22 e5       	ldi	r18, 0x52	; 82
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	2c 0f       	add	r18, r28
     b00:	3d 1f       	adc	r19, r29
     b02:	e2 0f       	add	r30, r18
     b04:	f3 1f       	adc	r31, r19
     b06:	51 83       	std	Z+1, r21	; 0x01
     b08:	40 83       	st	Z, r20
     b0a:	6f 5f       	subi	r22, 0xFF	; 255
     b0c:	e0 cf       	rjmp	.-64     	; 0xace <__stack+0x1cf>
		}
		top--;
     b0e:	ba 94       	dec	r11
		return n;
     b10:	67 2e       	mov	r6, r23
     b12:	7a 2e       	mov	r7, r26
     b14:	5f cf       	rjmp	.-322    	; 0x9d4 <__stack+0xd5>
     b16:	c3 01       	movw	r24, r6
     b18:	82 0f       	add	r24, r18
     b1a:	93 1f       	adc	r25, r19
				if (!openlist.isNodeInList(child)){
					openlist.addNode(child);
					child->parent = currentNode;
					child->gCost = currentNode->gCost + currentNode->costs[i];
				} else {
					int8_t thisGCost = currentNode->gCost + currentNode->costs[i];
     b1c:	fc 01       	movw	r30, r24
     b1e:	03 85       	ldd	r16, Z+11	; 0x0b
     b20:	f3 01       	movw	r30, r6
     b22:	87 85       	ldd	r24, Z+15	; 0x0f
     b24:	08 0f       	add	r16, r24
     b26:	dc 90       	ld	r13, X
     b28:	11 96       	adiw	r26, 0x01	; 1
     b2a:	cc 90       	ld	r12, X
     b2c:	11 97       	sbiw	r26, 0x01	; 1
	}
	node* getNodeByPosition(position p){
		return getNodeByPosition(p.x, p.y);
	}
	node* getNodeByPosition(int8_t x, int8_t y){
		if (isEmpty()){
     b2e:	bb 20       	and	r11, r11
     b30:	d9 f0       	breq	.+54     	; 0xb68 <__stack+0x269>
     b32:	10 e0       	ldi	r17, 0x00	; 0
     b34:	81 2f       	mov	r24, r17
     b36:	99 27       	eor	r25, r25
     b38:	87 fd       	sbrc	r24, 7
     b3a:	90 95       	com	r25
		position p;
		p.x = x;
		p.y = y;
		int8_t i;
		node* n;
		for (i=0; i<top && nodes[i]->pos != p; ++i);
     b3c:	1b 15       	cp	r17, r11
     b3e:	24 f5       	brge	.+72     	; 0xb88 <__stack+0x289>
     b40:	ac 01       	movw	r20, r24
     b42:	44 0f       	add	r20, r20
     b44:	55 1f       	adc	r21, r21
     b46:	e2 e5       	ldi	r30, 0x52	; 82
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	ec 0f       	add	r30, r28
     b4c:	fd 1f       	adc	r31, r29
     b4e:	4e 0f       	add	r20, r30
     b50:	5f 1f       	adc	r21, r31
     b52:	fa 01       	movw	r30, r20
     b54:	40 81       	ld	r20, Z
     b56:	51 81       	ldd	r21, Z+1	; 0x01
     b58:	fa 01       	movw	r30, r20
     b5a:	90 80       	ld	r9, Z
     b5c:	9d 10       	cpse	r9, r13
     b5e:	12 c0       	rjmp	.+36     	; 0xb84 <__stack+0x285>
     b60:	41 81       	ldd	r20, Z+1	; 0x01
     b62:	4c 11       	cpse	r20, r12
     b64:	0f c0       	rjmp	.+30     	; 0xb84 <__stack+0x285>
     b66:	10 c0       	rjmp	.+32     	; 0xb88 <__stack+0x289>
	node* getNodeByPosition(position p){
		return getNodeByPosition(p.x, p.y);
	}
	node* getNodeByPosition(int8_t x, int8_t y){
		if (isEmpty()){
			return NULL;
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
					openlist.addNode(child);
					child->parent = currentNode;
					child->gCost = currentNode->gCost + currentNode->costs[i];
				} else {
					int8_t thisGCost = currentNode->gCost + currentNode->costs[i];
					if (thisGCost < openlist.getNodeByPosition(child->pos)->gCost){
     b6c:	fa 01       	movw	r30, r20
     b6e:	87 85       	ldd	r24, Z+15	; 0x0f
     b70:	08 17       	cp	r16, r24
     b72:	0c f0       	brlt	.+2      	; 0xb76 <__stack+0x277>
     b74:	9c cf       	rjmp	.-200    	; 0xaae <__stack+0x1af>
						child->parent = currentNode;
     b76:	51 96       	adiw	r26, 0x11	; 17
     b78:	7c 92       	st	X, r7
     b7a:	6e 92       	st	-X, r6
     b7c:	50 97       	sbiw	r26, 0x10	; 16
						child->gCost = currentNode->gCost + currentNode->costs[i];
     b7e:	1f 96       	adiw	r26, 0x0f	; 15
     b80:	0c 93       	st	X, r16
     b82:	95 cf       	rjmp	.-214    	; 0xaae <__stack+0x1af>
     b84:	1f 5f       	subi	r17, 0xFF	; 255
     b86:	d6 cf       	rjmp	.-84     	; 0xb34 <__stack+0x235>
		p.x = x;
		p.y = y;
		int8_t i;
		node* n;
		for (i=0; i<top && nodes[i]->pos != p; ++i);
		n = nodes[i];
     b88:	88 0f       	add	r24, r24
     b8a:	99 1f       	adc	r25, r25
     b8c:	42 e5       	ldi	r20, 0x52	; 82
     b8e:	50 e0       	ldi	r21, 0x00	; 0
     b90:	4c 0f       	add	r20, r28
     b92:	5d 1f       	adc	r21, r29
     b94:	84 0f       	add	r24, r20
     b96:	95 1f       	adc	r25, r21
     b98:	fc 01       	movw	r30, r24
     b9a:	d0 80       	ld	r13, Z
     b9c:	81 81       	ldd	r24, Z+1	; 0x01
		if (i == top){
     b9e:	1b 15       	cp	r17, r11
     ba0:	19 f3       	breq	.-58     	; 0xb68 <__stack+0x269>
			return NULL;
		}
		return n;
     ba2:	4d 2d       	mov	r20, r13
     ba4:	58 2f       	mov	r21, r24
     ba6:	e2 cf       	rjmp	.-60     	; 0xb6c <__stack+0x26d>

00000ba8 <_Z7mapMazev>:
	}
	
	travelPath(root);
}

void mapMaze(){
     ba8:	4f 92       	push	r4
     baa:	5f 92       	push	r5
     bac:	6f 92       	push	r6
     bae:	7f 92       	push	r7
     bb0:	8f 92       	push	r8
     bb2:	9f 92       	push	r9
     bb4:	af 92       	push	r10
     bb6:	bf 92       	push	r11
     bb8:	cf 92       	push	r12
     bba:	df 92       	push	r13
     bbc:	ef 92       	push	r14
     bbe:	ff 92       	push	r15
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	c5 56       	subi	r28, 0x65	; 101
     bce:	d1 09       	sbc	r29, r1
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	cd bf       	out	0x3d, r28	; 61
	int startRAM = get_free_ram();
     bda:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <get_free_ram>
	
	currentDir.dir = NORTH;
     bde:	82 e0       	ldi	r24, 0x02	; 2
     be0:	80 93 cd 01 	sts	0x01CD, r24
	currentPos.x = 0;
     be4:	10 92 cb 01 	sts	0x01CB, r1
	currentPos.y = 0;
     be8:	10 92 cc 01 	sts	0x01CC, r1
	//myNodeStack = NodeStack();
	
	node* allNodes[50];
	int head = 0;
	
	delete root;
     bec:	00 91 c7 01 	lds	r16, 0x01C7
     bf0:	10 91 c8 01 	lds	r17, 0x01C8
     bf4:	01 15       	cp	r16, r1
     bf6:	11 05       	cpc	r17, r1
     bf8:	31 f0       	breq	.+12     	; 0xc06 <_Z7mapMazev+0x5e>
     bfa:	c8 01       	movw	r24, r16
     bfc:	0e 94 92 00 	call	0x124	; 0x124 <_ZN4nodeD1Ev>
     c00:	c8 01       	movw	r24, r16
     c02:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <free>
#define UTILITY_H_

#include <stdlib.h>

void* operator new(size_t objsize) {
	return malloc(objsize);
     c06:	82 e1       	ldi	r24, 0x12	; 18
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 84 16 	call	0x2d08	; 0x2d08 <malloc>
     c0e:	8c 01       	movw	r16, r24
	root = new node;
     c10:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZN4nodeC1Ev>
     c14:	10 93 c8 01 	sts	0x01C8, r17
     c18:	00 93 c7 01 	sts	0x01C7, r16
     c1c:	80 91 cc 01 	lds	r24, 0x01CC
	
	void setPosition(position p){
		this->pos = p;
     c20:	90 91 cb 01 	lds	r25, 0x01CB
     c24:	d8 01       	movw	r26, r16
     c26:	9c 93       	st	X, r25
     c28:	11 96       	adiw	r26, 0x01	; 1
     c2a:	8c 93       	st	X, r24
     c2c:	82 e1       	ldi	r24, 0x12	; 18
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0e 94 84 16 	call	0x2d08	; 0x2d08 <malloc>
     c34:	8c 01       	movw	r16, r24
	root->setPosition(currentPos);
	root->connections[2] = new node;
     c36:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZN4nodeC1Ev>
     c3a:	60 91 c7 01 	lds	r22, 0x01C7
     c3e:	70 91 c8 01 	lds	r23, 0x01C8
     c42:	fb 01       	movw	r30, r22
     c44:	10 87       	std	Z+8, r17	; 0x08
     c46:	07 83       	std	Z+7, r16	; 0x07
	root->visited = true;
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	82 83       	std	Z+2, r24	; 0x02
	
	allNodes[head] = root;
     c4c:	7a 83       	std	Y+2, r23	; 0x02
     c4e:	69 83       	std	Y+1, r22	; 0x01
	
	myNodeStack.push(root, NORTH);
     c50:	42 e0       	ldi	r20, 0x02	; 2
     c52:	89 ec       	ldi	r24, 0xC9	; 201
     c54:	91 e0       	ldi	r25, 0x01	; 1
     c56:	0e 94 b4 00 	call	0x168	; 0x168 <_ZN9NodeStack4pushEP4node9Direction>
	currentPos.y = 0;
	
	//myNodeStack = NodeStack();
	
	node* allNodes[50];
	int head = 0;
     c5a:	a1 2c       	mov	r10, r1
     c5c:	b1 2c       	mov	r11, r1
				nextNode->setPosition(currentPos);
				if (isLeft) nextNode->connections[currentDir.getPrevious()] = new node;
				if (isRight) nextNode->connections[currentDir.getNext()] = new node;
				if (isForward) nextNode->connections[currentDir] = new node;
				
				nextNode->visited = true;
     c5e:	88 24       	eor	r8, r8
     c60:	83 94       	inc	r8

bool NodeStack::isEmpty() {
	if (top == 0) {
     c62:	80 91 c9 01 	lds	r24, 0x01C9
     c66:	90 91 ca 01 	lds	r25, 0x01CA
     c6a:	89 2b       	or	r24, r25
     c6c:	11 f5       	brne	.+68     	; 0xcb2 <_Z7mapMazev+0x10a>
			
			myNodeStack.push(nextNode, currentDir);
		}
	}
	
	faceDir(currentDir.getOpposite());
     c6e:	8d ec       	ldi	r24, 0xCD	; 205
     c70:	91 e0       	ldi	r25, 0x01	; 1
     c72:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN10cDirection11getOppositeEv>
     c76:	0e 94 97 02 	call	0x52e	; 0x52e <_Z7faceDir9Direction>
	
	play_from_program_space(bloop);
     c7a:	86 e7       	ldi	r24, 0x76	; 118
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	0e 94 11 0c 	call	0x1822	; 0x1822 <play_from_program_space>
}
     c82:	cb 59       	subi	r28, 0x9B	; 155
     c84:	df 4f       	sbci	r29, 0xFF	; 255
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	de bf       	out	0x3e, r29	; 62
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	cd bf       	out	0x3d, r28	; 61
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	ff 90       	pop	r15
     c9a:	ef 90       	pop	r14
     c9c:	df 90       	pop	r13
     c9e:	cf 90       	pop	r12
     ca0:	bf 90       	pop	r11
     ca2:	af 90       	pop	r10
     ca4:	9f 90       	pop	r9
     ca6:	8f 90       	pop	r8
     ca8:	7f 90       	pop	r7
     caa:	6f 90       	pop	r6
     cac:	5f 90       	pop	r5
     cae:	4f 90       	pop	r4
     cb0:	08 95       	ret
	
	myNodeStack.push(root, NORTH);
	
	int i;
	while(!myNodeStack.isEmpty()){
		node* currentNode = myNodeStack.getTop();
     cb2:	89 ec       	ldi	r24, 0xC9	; 201
     cb4:	91 e0       	ldi	r25, 0x01	; 1
     cb6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN9NodeStack6getTopEv>
     cba:	6c 01       	movw	r12, r24
     cbc:	fc 01       	movw	r30, r24
		
		for (i=3; i>-1; i--){
     cbe:	03 e0       	ldi	r16, 0x03	; 3
     cc0:	e0 2e       	mov	r14, r16
     cc2:	f1 2c       	mov	r15, r1
			if (currentNode->connections[i] != NULL){
     cc4:	a1 85       	ldd	r26, Z+9	; 0x09
     cc6:	b2 85       	ldd	r27, Z+10	; 0x0a
     cc8:	10 97       	sbiw	r26, 0x00	; 0
     cca:	21 f0       	breq	.+8      	; 0xcd4 <_Z7mapMazev+0x12c>
				if (currentNode->connections[i]->visited == false){
     ccc:	12 96       	adiw	r26, 0x02	; 2
     cce:	8c 91       	ld	r24, X
     cd0:	88 23       	and	r24, r24
     cd2:	41 f0       	breq	.+16     	; 0xce4 <_Z7mapMazev+0x13c>
	
	int i;
	while(!myNodeStack.isEmpty()){
		node* currentNode = myNodeStack.getTop();
		
		for (i=3; i>-1; i--){
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	e8 1a       	sub	r14, r24
     cd8:	f1 08       	sbc	r15, r1
     cda:	32 97       	sbiw	r30, 0x02	; 2
     cdc:	9f ef       	ldi	r25, 0xFF	; 255
     cde:	e9 16       	cp	r14, r25
     ce0:	f9 06       	cpc	r15, r25
     ce2:	81 f7       	brne	.-32     	; 0xcc4 <_Z7mapMazev+0x11c>
					break;
				}
			}
		}
		
		if (foundFinish == true){
     ce4:	80 91 ce 01 	lds	r24, 0x01CE
     ce8:	88 23       	and	r24, r24
     cea:	21 f0       	breq	.+8      	; 0xcf4 <_Z7mapMazev+0x14c>
			finish = currentNode;
     cec:	d0 92 c6 01 	sts	0x01C6, r13
     cf0:	c0 92 c5 01 	sts	0x01C5, r12
		}
		
		foundFinish = false;
     cf4:	10 92 ce 01 	sts	0x01CE, r1
		
		if (i == -1){ // this node has no unvisited connections
     cf8:	af ef       	ldi	r26, 0xFF	; 255
     cfa:	ea 16       	cp	r14, r26
     cfc:	fa 06       	cpc	r15, r26
     cfe:	89 f4       	brne	.+34     	; 0xd22 <_Z7mapMazev+0x17a>
			cDirection d;
			d = myNodeStack.pop();
     d00:	89 ec       	ldi	r24, 0xC9	; 201
     d02:	91 e0       	ldi	r25, 0x01	; 1
     d04:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <_ZN9NodeStack3popEv>
			faceInt = -1;
		}
		return static_cast<Direction>(faceInt + 1);
	}
	operator Direction() { return dir; }
	void operator=(const Direction &lhs){ dir = lhs; }
     d08:	a6 96       	adiw	r28, 0x26	; 38
     d0a:	8f af       	std	Y+63, r24	; 0x3f
     d0c:	a6 97       	sbiw	r28, 0x26	; 38
			faceDir(d.getOpposite());
     d0e:	ce 01       	movw	r24, r28
     d10:	8b 59       	subi	r24, 0x9B	; 155
     d12:	9f 4f       	sbci	r25, 0xFF	; 255
     d14:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN10cDirection11getOppositeEv>
     d18:	0e 94 97 02 	call	0x52e	; 0x52e <_Z7faceDir9Direction>
			followLine();
     d1c:	0e 94 19 04 	call	0x832	; 0x832 <_Z10followLinev>
     d20:	a0 cf       	rjmp	.-192    	; 0xc62 <_Z7mapMazev+0xba>
	}
}

void faceDir(int i){
	Direction d = static_cast<Direction>(i);
	faceDir(d);
     d22:	8e 2d       	mov	r24, r14
     d24:	0e 94 97 02 	call	0x52e	; 0x52e <_Z7faceDir9Direction>
			d = myNodeStack.pop();
			faceDir(d.getOpposite());
			followLine();
		} else {
			faceDir(i);
			int8_t distanceFromLastNode = followLine();
     d28:	0e 94 19 04 	call	0x832	; 0x832 <_Z10followLinev>
     d2c:	98 2e       	mov	r9, r24
#define POSITION_H_

struct position {
	int8_t x, y;
	bool operator == (const position &RHS) {
		return (this->x == RHS.x && this->y == RHS.y);
     d2e:	20 91 cb 01 	lds	r18, 0x01CB
     d32:	30 91 cc 01 	lds	r19, 0x01CC
     d36:	fe 01       	movw	r30, r28
     d38:	31 96       	adiw	r30, 0x01	; 1
			
			node* nextNode = NULL;
			for (int j=0; j<=head; j++){
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
				if (allNodes[j]->pos == currentPos){
     d3e:	01 91       	ld	r16, Z+
     d40:	11 91       	ld	r17, Z+
     d42:	d8 01       	movw	r26, r16
     d44:	4c 91       	ld	r20, X
     d46:	42 13       	cpse	r20, r18
     d48:	bd c0       	rjmp	.+378    	; 0xec4 <_Z7mapMazev+0x31c>
     d4a:	11 96       	adiw	r26, 0x01	; 1
     d4c:	4c 91       	ld	r20, X
     d4e:	43 13       	cpse	r20, r19
     d50:	b9 c0       	rjmp	.+370    	; 0xec4 <_Z7mapMazev+0x31c>
					nextNode = allNodes[j];
					break;
				}
			}
			
			if (nextNode == NULL){ // new node
     d52:	01 15       	cp	r16, r1
     d54:	11 05       	cpc	r17, r1
     d56:	09 f0       	breq	.+2      	; 0xd5a <_Z7mapMazev+0x1b2>
     d58:	6c c0       	rjmp	.+216    	; 0xe32 <_Z7mapMazev+0x28a>
				play_from_program_space(bloop);
     d5a:	86 e7       	ldi	r24, 0x76	; 118
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	0e 94 11 0c 	call	0x1822	; 0x1822 <play_from_program_space>
     d62:	82 e1       	ldi	r24, 0x12	; 18
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 84 16 	call	0x2d08	; 0x2d08 <malloc>
     d6a:	8c 01       	movw	r16, r24
				
				delete nextNode;
				nextNode = new node;
     d6c:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZN4nodeC1Ev>
     d70:	80 91 cc 01 	lds	r24, 0x01CC
     d74:	90 91 cb 01 	lds	r25, 0x01CB
     d78:	f8 01       	movw	r30, r16
     d7a:	90 83       	st	Z, r25
     d7c:	81 83       	std	Z+1, r24	; 0x01

				nextNode->setPosition(currentPos);
				if (isLeft) nextNode->connections[currentDir.getPrevious()] = new node;
     d7e:	80 91 d0 01 	lds	r24, 0x01D0
     d82:	88 23       	and	r24, r24
     d84:	b1 f0       	breq	.+44     	; 0xdb2 <_Z7mapMazev+0x20a>
     d86:	82 e1       	ldi	r24, 0x12	; 18
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	0e 94 84 16 	call	0x2d08	; 0x2d08 <malloc>
     d8e:	3c 01       	movw	r6, r24
     d90:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZN4nodeC1Ev>
			faceInt = -1;
		}
		return static_cast<Direction>(faceInt + 1);
	}
	Direction getPrevious() {
		int faceInt = dir;
     d94:	80 91 cd 01 	lds	r24, 0x01CD
     d98:	90 e0       	ldi	r25, 0x00	; 0
		if (faceInt <= 0) {
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	11 f4       	brne	.+4      	; 0xda2 <_Z7mapMazev+0x1fa>
			faceInt = 4;
     d9e:	84 e0       	ldi	r24, 0x04	; 4
     da0:	90 e0       	ldi	r25, 0x00	; 0
		}
		return static_cast<Direction>(faceInt - 1);
     da2:	81 50       	subi	r24, 0x01	; 1
     da4:	f8 01       	movw	r30, r16
     da6:	e8 0f       	add	r30, r24
     da8:	f1 1d       	adc	r31, r1
     daa:	e8 0f       	add	r30, r24
     dac:	f1 1d       	adc	r31, r1
     dae:	74 82       	std	Z+4, r7	; 0x04
     db0:	63 82       	std	Z+3, r6	; 0x03
				if (isRight) nextNode->connections[currentDir.getNext()] = new node;
     db2:	80 91 cf 01 	lds	r24, 0x01CF
     db6:	88 23       	and	r24, r24
     db8:	b9 f0       	breq	.+46     	; 0xde8 <_Z7mapMazev+0x240>
     dba:	82 e1       	ldi	r24, 0x12	; 18
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 84 16 	call	0x2d08	; 0x2d08 <malloc>
     dc2:	3c 01       	movw	r6, r24
     dc4:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZN4nodeC1Ev>
			faceInt = 4;
		}
		this->dir = static_cast<Direction>(faceInt - 1);
	}
	Direction getNext() {
		int faceInt = dir;
     dc8:	80 91 cd 01 	lds	r24, 0x01CD
     dcc:	90 e0       	ldi	r25, 0x00	; 0
		if (faceInt >= 3) {
     dce:	83 30       	cpi	r24, 0x03	; 3
     dd0:	91 05       	cpc	r25, r1
     dd2:	14 f0       	brlt	.+4      	; 0xdd8 <_Z7mapMazev+0x230>
			faceInt = -1;
     dd4:	8f ef       	ldi	r24, 0xFF	; 255
     dd6:	9f ef       	ldi	r25, 0xFF	; 255
		}
		return static_cast<Direction>(faceInt + 1);
     dd8:	8f 5f       	subi	r24, 0xFF	; 255
     dda:	f8 01       	movw	r30, r16
     ddc:	e8 0f       	add	r30, r24
     dde:	f1 1d       	adc	r31, r1
     de0:	e8 0f       	add	r30, r24
     de2:	f1 1d       	adc	r31, r1
     de4:	74 82       	std	Z+4, r7	; 0x04
     de6:	63 82       	std	Z+3, r6	; 0x03
				if (isForward) nextNode->connections[currentDir] = new node;
     de8:	80 91 d1 01 	lds	r24, 0x01D1
     dec:	88 23       	and	r24, r24
     dee:	81 f0       	breq	.+32     	; 0xe10 <_Z7mapMazev+0x268>
     df0:	82 e1       	ldi	r24, 0x12	; 18
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	0e 94 84 16 	call	0x2d08	; 0x2d08 <malloc>
     df8:	3c 01       	movw	r6, r24
     dfa:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZN4nodeC1Ev>
     dfe:	80 91 cd 01 	lds	r24, 0x01CD
     e02:	f8 01       	movw	r30, r16
     e04:	e8 0f       	add	r30, r24
     e06:	f1 1d       	adc	r31, r1
     e08:	e8 0f       	add	r30, r24
     e0a:	f1 1d       	adc	r31, r1
     e0c:	74 82       	std	Z+4, r7	; 0x04
     e0e:	63 82       	std	Z+3, r6	; 0x03
				
				nextNode->visited = true;
     e10:	d8 01       	movw	r26, r16
     e12:	12 96       	adiw	r26, 0x02	; 2
     e14:	8c 92       	st	X, r8
				head++;
     e16:	bf ef       	ldi	r27, 0xFF	; 255
     e18:	ab 1a       	sub	r10, r27
     e1a:	bb 0a       	sbc	r11, r27
				allNodes[head] = nextNode;
     e1c:	f5 01       	movw	r30, r10
     e1e:	ee 0f       	add	r30, r30
     e20:	ff 1f       	adc	r31, r31
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	8c 0f       	add	r24, r28
     e28:	9d 1f       	adc	r25, r29
     e2a:	e8 0f       	add	r30, r24
     e2c:	f9 1f       	adc	r31, r25
     e2e:	11 83       	std	Z+1, r17	; 0x01
     e30:	00 83       	st	Z, r16
			}
			
			delete currentNode->connections[i];
     e32:	27 01       	movw	r4, r14
     e34:	44 0c       	add	r4, r4
     e36:	55 1c       	adc	r5, r5
     e38:	f6 01       	movw	r30, r12
     e3a:	e4 0d       	add	r30, r4
     e3c:	f5 1d       	adc	r31, r5
     e3e:	63 80       	ldd	r6, Z+3	; 0x03
     e40:	74 80       	ldd	r7, Z+4	; 0x04
     e42:	61 14       	cp	r6, r1
     e44:	71 04       	cpc	r7, r1
     e46:	31 f0       	breq	.+12     	; 0xe54 <_Z7mapMazev+0x2ac>
     e48:	c3 01       	movw	r24, r6
     e4a:	0e 94 92 00 	call	0x124	; 0x124 <_ZN4nodeD1Ev>
}

void operator delete(void* obj) {
	free(obj);
     e4e:	c3 01       	movw	r24, r6
     e50:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <free>
			currentNode->connections[i] = nextNode;
     e54:	f6 01       	movw	r30, r12
     e56:	e4 0d       	add	r30, r4
     e58:	f5 1d       	adc	r31, r5
     e5a:	14 83       	std	Z+4, r17	; 0x04
     e5c:	03 83       	std	Z+3, r16	; 0x03
			currentNode->costs[i] = distanceFromLastNode;
     e5e:	f6 01       	movw	r30, r12
     e60:	ee 0d       	add	r30, r14
     e62:	ff 1d       	adc	r31, r15
     e64:	93 86       	std	Z+11, r9	; 0x0b
			delete nextNode->connections[currentDir.getOpposite()];
     e66:	8d ec       	ldi	r24, 0xCD	; 205
     e68:	91 e0       	ldi	r25, 0x01	; 1
     e6a:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN10cDirection11getOppositeEv>
     e6e:	f8 01       	movw	r30, r16
     e70:	e8 0f       	add	r30, r24
     e72:	f1 1d       	adc	r31, r1
     e74:	e8 0f       	add	r30, r24
     e76:	f1 1d       	adc	r31, r1
     e78:	e3 80       	ldd	r14, Z+3	; 0x03
     e7a:	f4 80       	ldd	r15, Z+4	; 0x04
     e7c:	e1 14       	cp	r14, r1
     e7e:	f1 04       	cpc	r15, r1
     e80:	31 f0       	breq	.+12     	; 0xe8e <_Z7mapMazev+0x2e6>
     e82:	c7 01       	movw	r24, r14
     e84:	0e 94 92 00 	call	0x124	; 0x124 <_ZN4nodeD1Ev>
     e88:	c7 01       	movw	r24, r14
     e8a:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <free>
			nextNode->connections[currentDir.getOpposite()] = currentNode;
     e8e:	8d ec       	ldi	r24, 0xCD	; 205
     e90:	91 e0       	ldi	r25, 0x01	; 1
     e92:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN10cDirection11getOppositeEv>
     e96:	f8 01       	movw	r30, r16
     e98:	e8 0f       	add	r30, r24
     e9a:	f1 1d       	adc	r31, r1
     e9c:	e8 0f       	add	r30, r24
     e9e:	f1 1d       	adc	r31, r1
     ea0:	d4 82       	std	Z+4, r13	; 0x04
     ea2:	c3 82       	std	Z+3, r12	; 0x03
			nextNode->costs[currentDir.getOpposite()] = distanceFromLastNode;
     ea4:	8d ec       	ldi	r24, 0xCD	; 205
     ea6:	91 e0       	ldi	r25, 0x01	; 1
     ea8:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN10cDirection11getOppositeEv>
     eac:	f8 01       	movw	r30, r16
     eae:	e8 0f       	add	r30, r24
     eb0:	f1 1d       	adc	r31, r1
     eb2:	93 86       	std	Z+11, r9	; 0x0b
			
			myNodeStack.push(nextNode, currentDir);
     eb4:	40 91 cd 01 	lds	r20, 0x01CD
     eb8:	b8 01       	movw	r22, r16
     eba:	89 ec       	ldi	r24, 0xC9	; 201
     ebc:	91 e0       	ldi	r25, 0x01	; 1
     ebe:	0e 94 b4 00 	call	0x168	; 0x168 <_ZN9NodeStack4pushEP4node9Direction>
     ec2:	cf ce       	rjmp	.-610    	; 0xc62 <_Z7mapMazev+0xba>
		} else {
			faceDir(i);
			int8_t distanceFromLastNode = followLine();
			
			node* nextNode = NULL;
			for (int j=0; j<=head; j++){
     ec4:	01 96       	adiw	r24, 0x01	; 1
     ec6:	a8 16       	cp	r10, r24
     ec8:	b9 06       	cpc	r11, r25
     eca:	0c f0       	brlt	.+2      	; 0xece <_Z7mapMazev+0x326>
     ecc:	38 cf       	rjmp	.-400    	; 0xd3e <_Z7mapMazev+0x196>
     ece:	45 cf       	rjmp	.-374    	; 0xd5a <_Z7mapMazev+0x1b2>

00000ed0 <main>:
	set_motors(0,0);
	
	saveCalibration();
}

int main(){
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	2a 97       	sbiw	r28, 0x0a	; 10
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	f8 94       	cli
     ede:	de bf       	out	0x3e, r29	; 62
     ee0:	0f be       	out	0x3f, r0	; 63
     ee2:	cd bf       	out	0x3d, r28	; 61
	initialise();
     ee4:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z10initialisev>
			print(" Maze");
			lcd_goto_xy(0, 1);
			print(" mapped!");
			wait_for_button(BUTTON_B);
			
			speed = 100;
     ee8:	14 e6       	ldi	r17, 0x64	; 100
			
			astarTravel(finish);
			
			speed = 60;
     eea:	0c e3       	ldi	r16, 0x3C	; 60

int main(){
	initialise();
	
	while(1){
		clear();
     eec:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <clear>
		print(" ");
     ef0:	8b e3       	ldi	r24, 0x3B	; 59
     ef2:	91 e0       	ldi	r25, 0x01	; 1
     ef4:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <print>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     ef8:	0e 94 df 08 	call	0x11be	; 0x11be <read_battery_millivolts_3pi>
		print_long(read_battery_millivolts());
     efc:	bc 01       	movw	r22, r24
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <print_long>
		print("mv");
     f06:	8d e3       	ldi	r24, 0x3D	; 61
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <print>
		delay_ms(20);
     f0e:	84 e1       	ldi	r24, 0x14	; 20
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <delay_ms>
		
		if (button_is_pressed(BUTTON_A)){
     f16:	82 e0       	ldi	r24, 0x02	; 2
     f18:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <button_is_pressed>
     f1c:	88 23       	and	r24, r24
     f1e:	19 f0       	breq	.+6      	; 0xf26 <main+0x56>
			calibrate();
     f20:	0e 94 9f 01 	call	0x33e	; 0x33e <_Z9calibratev>
     f24:	e3 cf       	rjmp	.-58     	; 0xeec <main+0x1c>
		} else if(button_is_pressed(BUTTON_B)){
     f26:	80 e1       	ldi	r24, 0x10	; 16
     f28:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <button_is_pressed>
     f2c:	88 23       	and	r24, r24
     f2e:	f1 f0       	breq	.+60     	; 0xf6c <main+0x9c>
			mapMaze();
     f30:	0e 94 d4 05 	call	0xba8	; 0xba8 <_Z7mapMazev>
			
			clear();
     f34:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <clear>
			print(" Maze");
     f38:	80 e4       	ldi	r24, 0x40	; 64
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <print>
			lcd_goto_xy(0, 1);
     f40:	61 e0       	ldi	r22, 0x01	; 1
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <lcd_goto_xy>
			print(" mapped!");
     f48:	86 e4       	ldi	r24, 0x46	; 70
     f4a:	91 e0       	ldi	r25, 0x01	; 1
     f4c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <print>
			wait_for_button(BUTTON_B);
     f50:	80 e1       	ldi	r24, 0x10	; 16
     f52:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <wait_for_button>
			
			speed = 100;
     f56:	10 93 c3 01 	sts	0x01C3, r17
			
			astarTravel(finish);
     f5a:	80 91 c5 01 	lds	r24, 0x01C5
     f5e:	90 91 c6 01 	lds	r25, 0x01C6
     f62:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_Z11astarTravelP4node>
			
			speed = 60;
     f66:	00 93 c3 01 	sts	0x01C3, r16
     f6a:	c0 cf       	rjmp	.-128    	; 0xeec <main+0x1c>
			
		} else if(button_is_pressed(BUTTON_C)){
     f6c:	80 e2       	ldi	r24, 0x20	; 32
     f6e:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <button_is_pressed>
     f72:	88 23       	and	r24, r24
     f74:	09 f4       	brne	.+2      	; 0xf78 <main+0xa8>
     f76:	ba cf       	rjmp	.-140    	; 0xeec <main+0x1c>
			unsigned int sensors[5];
			while(1){
				unsigned int position = read_line(sensors, IR_EMITTERS_ON);
     f78:	61 e0       	ldi	r22, 0x01	; 1
     f7a:	ce 01       	movw	r24, r28
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	0e 94 32 10 	call	0x2064	; 0x2064 <read_line>
     f82:	8c 01       	movw	r16, r24
				clear();
     f84:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <clear>
				print(" ");
     f88:	8b e3       	ldi	r24, 0x3B	; 59
     f8a:	91 e0       	ldi	r25, 0x01	; 1
     f8c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <print>
				print_long(position);
     f90:	b8 01       	movw	r22, r16
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <print_long>
				print(" ");
     f9a:	8b e3       	ldi	r24, 0x3B	; 59
     f9c:	91 e0       	ldi	r25, 0x01	; 1
     f9e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <print>
				//print_long(sensors[2]);
				lcd_goto_xy(0,1);
     fa2:	61 e0       	ldi	r22, 0x01	; 1
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <lcd_goto_xy>
				display_readings(sensors);
     faa:	ce 01       	movw	r24, r28
     fac:	01 96       	adiw	r24, 0x01	; 1
     fae:	0e 94 1e 01 	call	0x23c	; 0x23c <_Z16display_readingsPKj>
				delay_ms(100);
     fb2:	84 e6       	ldi	r24, 0x64	; 100
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <delay_ms>
     fba:	de cf       	rjmp	.-68     	; 0xf78 <main+0xa8>

00000fbc <_GLOBAL__sub_I__Znwj>:
#include "node.h"
#include <stdbool.h>

struct NodeStack {
public:
	NodeStack() : top(0) {
     fbc:	10 92 ca 01 	sts	0x01CA, r1
     fc0:	10 92 c9 01 	sts	0x01C9, r1
     fc4:	08 95       	ret

00000fc6 <_GLOBAL__sub_D__Znwj>:
	}
	return NULL;
}

bool NodeStack::isEmpty() {
	if (top == 0) {
     fc6:	80 91 c9 01 	lds	r24, 0x01C9
     fca:	90 91 ca 01 	lds	r25, 0x01CA
     fce:	89 2b       	or	r24, r25
     fd0:	29 f0       	breq	.+10     	; 0xfdc <_GLOBAL__sub_D__Znwj+0x16>
	NodeStack() : top(0) {
		
	}
	~NodeStack() {
		while (!isEmpty()) {
			pop();
     fd2:	89 ec       	ldi	r24, 0xC9	; 201
     fd4:	91 e0       	ldi	r25, 0x01	; 1
     fd6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <_ZN9NodeStack3popEv>
     fda:	f5 cf       	rjmp	.-22     	; 0xfc6 <_GLOBAL__sub_D__Znwj>
     fdc:	08 95       	ret

00000fde <_ZN15OrangutanAnalog7setModeEh>:
     fde:	88 23       	and	r24, r24
     fe0:	21 f4       	brne	.+8      	; 0xfea <_ZN15OrangutanAnalog7setModeEh+0xc>
     fe2:	80 91 7c 00 	lds	r24, 0x007C
     fe6:	8f 7d       	andi	r24, 0xDF	; 223
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <_ZN15OrangutanAnalog7setModeEh+0x12>
     fea:	80 91 7c 00 	lds	r24, 0x007C
     fee:	80 62       	ori	r24, 0x20	; 32
     ff0:	80 93 7c 00 	sts	0x007C, r24
     ff4:	08 95       	ret

00000ff6 <_ZN15OrangutanAnalog7getModeEv>:
     ff6:	80 91 7c 00 	lds	r24, 0x007C
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	25 e0       	ldi	r18, 0x05	; 5
     ffe:	95 95       	asr	r25
    1000:	87 95       	ror	r24
    1002:	2a 95       	dec	r18
    1004:	e1 f7       	brne	.-8      	; 0xffe <_ZN15OrangutanAnalog7getModeEv+0x8>
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	08 95       	ret

0000100a <_ZN15OrangutanAnalog12isConvertingEv>:
    100a:	80 91 7a 00 	lds	r24, 0x007A
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	36 e0       	ldi	r19, 0x06	; 6
    1012:	95 95       	asr	r25
    1014:	87 95       	ror	r24
    1016:	3a 95       	dec	r19
    1018:	e1 f7       	brne	.-8      	; 0x1012 <_ZN15OrangutanAnalog12isConvertingEv+0x8>
    101a:	81 70       	andi	r24, 0x01	; 1
    101c:	08 95       	ret

0000101e <_ZN15OrangutanAnalog16conversionResultEv>:
    101e:	0e 94 fb 07 	call	0xff6	; 0xff6 <_ZN15OrangutanAnalog7getModeEv>
    1022:	88 23       	and	r24, r24
    1024:	21 f0       	breq	.+8      	; 0x102e <_ZN15OrangutanAnalog16conversionResultEv+0x10>
    1026:	20 91 79 00 	lds	r18, 0x0079
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	04 c0       	rjmp	.+8      	; 0x1036 <_ZN15OrangutanAnalog16conversionResultEv+0x18>
    102e:	20 91 78 00 	lds	r18, 0x0078
    1032:	30 91 79 00 	lds	r19, 0x0079
    1036:	c9 01       	movw	r24, r18
    1038:	08 95       	ret

0000103a <_ZN15OrangutanAnalog15startConversionEhh>:
    103a:	80 32       	cpi	r24, 0x20	; 32
    103c:	b0 f4       	brcc	.+44     	; 0x106a <_ZN15OrangutanAnalog15startConversionEhh+0x30>
    103e:	97 e8       	ldi	r25, 0x87	; 135
    1040:	90 93 7a 00 	sts	0x007A, r25
    1044:	90 91 7c 00 	lds	r25, 0x007C
    1048:	29 2f       	mov	r18, r25
    104a:	20 64       	ori	r18, 0x40	; 64
    104c:	66 23       	and	r22, r22
    104e:	11 f0       	breq	.+4      	; 0x1054 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
    1050:	90 6c       	ori	r25, 0xC0	; 192
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <_ZN15OrangutanAnalog15startConversionEhh+0x1e>
    1054:	92 2f       	mov	r25, r18
    1056:	9f 77       	andi	r25, 0x7F	; 127
    1058:	90 7e       	andi	r25, 0xE0	; 224
    105a:	98 2b       	or	r25, r24
    105c:	90 93 7c 00 	sts	0x007C, r25
    1060:	80 91 7a 00 	lds	r24, 0x007A
    1064:	80 64       	ori	r24, 0x40	; 64
    1066:	80 93 7a 00 	sts	0x007A, r24
    106a:	08 95       	ret

0000106c <_ZN15OrangutanAnalog11readAverageEhj>:
    106c:	a0 e0       	ldi	r26, 0x00	; 0
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	ec e3       	ldi	r30, 0x3C	; 60
    1072:	f8 e0       	ldi	r31, 0x08	; 8
    1074:	0c 94 42 16 	jmp	0x2c84	; 0x2c84 <__prologue_saves__+0x14>
    1078:	6b 01       	movw	r12, r22
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	0e 94 1d 08 	call	0x103a	; 0x103a <_ZN15OrangutanAnalog15startConversionEhh>
    1080:	0e 94 05 08 	call	0x100a	; 0x100a <_ZN15OrangutanAnalog12isConvertingEv>
    1084:	88 23       	and	r24, r24
    1086:	e1 f7       	brne	.-8      	; 0x1080 <_ZN15OrangutanAnalog11readAverageEhj+0x14>
    1088:	e6 01       	movw	r28, r12
    108a:	ee 24       	eor	r14, r14
    108c:	ff 24       	eor	r15, r15
    108e:	87 01       	movw	r16, r14
    1090:	80 91 7a 00 	lds	r24, 0x007A
    1094:	80 64       	ori	r24, 0x40	; 64
    1096:	80 93 7a 00 	sts	0x007A, r24
    109a:	0e 94 05 08 	call	0x100a	; 0x100a <_ZN15OrangutanAnalog12isConvertingEv>
    109e:	88 23       	and	r24, r24
    10a0:	e1 f7       	brne	.-8      	; 0x109a <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
    10a2:	0e 94 0f 08 	call	0x101e	; 0x101e <_ZN15OrangutanAnalog16conversionResultEv>
    10a6:	a0 e0       	ldi	r26, 0x00	; 0
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e8 0e       	add	r14, r24
    10ac:	f9 1e       	adc	r15, r25
    10ae:	0a 1f       	adc	r16, r26
    10b0:	1b 1f       	adc	r17, r27
    10b2:	21 97       	sbiw	r28, 0x01	; 1
    10b4:	69 f7       	brne	.-38     	; 0x1090 <_ZN15OrangutanAnalog11readAverageEhj+0x24>
    10b6:	c6 01       	movw	r24, r12
    10b8:	96 95       	lsr	r25
    10ba:	87 95       	ror	r24
    10bc:	20 e4       	ldi	r18, 0x40	; 64
    10be:	c2 16       	cp	r12, r18
    10c0:	d1 04       	cpc	r13, r1
    10c2:	40 f4       	brcc	.+16     	; 0x10d4 <_ZN15OrangutanAnalog11readAverageEhj+0x68>
    10c4:	8e 0d       	add	r24, r14
    10c6:	9f 1d       	adc	r25, r15
    10c8:	6c 2d       	mov	r22, r12
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <__udivmodhi4>
    10d0:	cb 01       	movw	r24, r22
    10d2:	0d c0       	rjmp	.+26     	; 0x10ee <_ZN15OrangutanAnalog11readAverageEhj+0x82>
    10d4:	bc 01       	movw	r22, r24
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	6e 0d       	add	r22, r14
    10dc:	7f 1d       	adc	r23, r15
    10de:	80 1f       	adc	r24, r16
    10e0:	91 1f       	adc	r25, r17
    10e2:	96 01       	movw	r18, r12
    10e4:	40 e0       	ldi	r20, 0x00	; 0
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <__udivmodsi4>
    10ec:	c9 01       	movw	r24, r18
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
    10f2:	e8 e0       	ldi	r30, 0x08	; 8
    10f4:	0c 94 5e 16 	jmp	0x2cbc	; 0x2cbc <__epilogue_restores__+0x14>

000010f8 <_ZN15OrangutanAnalog12toMillivoltsEj>:
    10f8:	a3 e0       	ldi	r26, 0x03	; 3
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e2 e8       	ldi	r30, 0x82	; 130
    10fe:	f8 e0       	ldi	r31, 0x08	; 8
    1100:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__prologue_saves__+0x1e>
    1104:	bc 01       	movw	r22, r24
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	20 91 00 01 	lds	r18, 0x0100
    110e:	30 91 01 01 	lds	r19, 0x0101
    1112:	40 e0       	ldi	r20, 0x00	; 0
    1114:	50 e0       	ldi	r21, 0x00	; 0
    1116:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <__mulsi3>
    111a:	18 2f       	mov	r17, r24
    111c:	69 83       	std	Y+1, r22	; 0x01
    111e:	7a 83       	std	Y+2, r23	; 0x02
    1120:	9b 83       	std	Y+3, r25	; 0x03
    1122:	0e 94 fb 07 	call	0xff6	; 0xff6 <_ZN15OrangutanAnalog7getModeEv>
    1126:	69 81       	ldd	r22, Y+1	; 0x01
    1128:	7a 81       	ldd	r23, Y+2	; 0x02
    112a:	9b 81       	ldd	r25, Y+3	; 0x03
    112c:	88 23       	and	r24, r24
    112e:	71 f0       	breq	.+28     	; 0x114c <_ZN15OrangutanAnalog12toMillivoltsEj+0x54>
    1130:	9b 01       	movw	r18, r22
    1132:	41 2f       	mov	r20, r17
    1134:	59 2f       	mov	r21, r25
    1136:	ca 01       	movw	r24, r20
    1138:	b9 01       	movw	r22, r18
    113a:	61 58       	subi	r22, 0x81	; 129
    113c:	7f 4f       	sbci	r23, 0xFF	; 255
    113e:	8f 4f       	sbci	r24, 0xFF	; 255
    1140:	9f 4f       	sbci	r25, 0xFF	; 255
    1142:	2f ef       	ldi	r18, 0xFF	; 255
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	40 e0       	ldi	r20, 0x00	; 0
    1148:	50 e0       	ldi	r21, 0x00	; 0
    114a:	0d c0       	rjmp	.+26     	; 0x1166 <_ZN15OrangutanAnalog12toMillivoltsEj+0x6e>
    114c:	9b 01       	movw	r18, r22
    114e:	41 2f       	mov	r20, r17
    1150:	59 2f       	mov	r21, r25
    1152:	ca 01       	movw	r24, r20
    1154:	b9 01       	movw	r22, r18
    1156:	61 50       	subi	r22, 0x01	; 1
    1158:	7e 4f       	sbci	r23, 0xFE	; 254
    115a:	8f 4f       	sbci	r24, 0xFF	; 255
    115c:	9f 4f       	sbci	r25, 0xFF	; 255
    115e:	2f ef       	ldi	r18, 0xFF	; 255
    1160:	33 e0       	ldi	r19, 0x03	; 3
    1162:	40 e0       	ldi	r20, 0x00	; 0
    1164:	50 e0       	ldi	r21, 0x00	; 0
    1166:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <__udivmodsi4>
    116a:	c9 01       	movw	r24, r18
    116c:	23 96       	adiw	r28, 0x03	; 3
    116e:	e3 e0       	ldi	r30, 0x03	; 3
    1170:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__epilogue_restores__+0x1e>

00001174 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    1174:	0e 94 36 08 	call	0x106c	; 0x106c <_ZN15OrangutanAnalog11readAverageEhj>
    1178:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN15OrangutanAnalog12toMillivoltsEj>
    117c:	08 95       	ret

0000117e <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    117e:	1f 93       	push	r17
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	0e 94 fb 07 	call	0xff6	; 0xff6 <_ZN15OrangutanAnalog7getModeEv>
    1188:	18 2f       	mov	r17, r24
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	0e 94 ef 07 	call	0xfde	; 0xfde <_ZN15OrangutanAnalog7setModeEh>
    1190:	86 e0       	ldi	r24, 0x06	; 6
    1192:	6a e0       	ldi	r22, 0x0A	; 10
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	0e 94 ba 08 	call	0x1174	; 0x1174 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    119a:	ec 01       	movw	r28, r24
    119c:	81 2f       	mov	r24, r17
    119e:	0e 94 ef 07 	call	0xfde	; 0xfde <_ZN15OrangutanAnalog7setModeEh>
    11a2:	9e 01       	movw	r18, r28
    11a4:	22 0f       	add	r18, r18
    11a6:	33 1f       	adc	r19, r19
    11a8:	2c 0f       	add	r18, r28
    11aa:	3d 1f       	adc	r19, r29
    11ac:	2f 5f       	subi	r18, 0xFF	; 255
    11ae:	3f 4f       	sbci	r19, 0xFF	; 255
    11b0:	36 95       	lsr	r19
    11b2:	27 95       	ror	r18
    11b4:	c9 01       	movw	r24, r18
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	1f 91       	pop	r17
    11bc:	08 95       	ret

000011be <read_battery_millivolts_3pi>:
    11be:	0e 94 bf 08 	call	0x117e	; 0x117e <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    11c2:	08 95       	ret

000011c4 <_ZL16currentCharacterv>:
    11c4:	90 91 55 01 	lds	r25, 0x0155
    11c8:	e0 91 51 01 	lds	r30, 0x0151
    11cc:	f0 91 52 01 	lds	r31, 0x0152
    11d0:	99 23       	and	r25, r25
    11d2:	11 f0       	breq	.+4      	; 0x11d8 <_ZL16currentCharacterv+0x14>
    11d4:	84 91       	lpm	r24, Z
    11d6:	01 c0       	rjmp	.+2      	; 0x11da <_ZL16currentCharacterv+0x16>
    11d8:	80 81       	ld	r24, Z
    11da:	28 2f       	mov	r18, r24
    11dc:	21 54       	subi	r18, 0x41	; 65
    11de:	2a 31       	cpi	r18, 0x1A	; 26
    11e0:	10 f4       	brcc	.+4      	; 0x11e6 <_ZL16currentCharacterv+0x22>
    11e2:	80 5e       	subi	r24, 0xE0	; 224
    11e4:	08 95       	ret
    11e6:	80 32       	cpi	r24, 0x20	; 32
    11e8:	71 f4       	brne	.+28     	; 0x1206 <_ZL16currentCharacterv+0x42>
    11ea:	20 91 51 01 	lds	r18, 0x0151
    11ee:	30 91 52 01 	lds	r19, 0x0152
    11f2:	a9 01       	movw	r20, r18
    11f4:	4f 5f       	subi	r20, 0xFF	; 255
    11f6:	5f 4f       	sbci	r21, 0xFF	; 255
    11f8:	50 93 52 01 	sts	0x0152, r21
    11fc:	40 93 51 01 	sts	0x0151, r20
    1200:	21 15       	cp	r18, r1
    1202:	31 05       	cpc	r19, r1
    1204:	09 f7       	brne	.-62     	; 0x11c8 <_ZL16currentCharacterv+0x4>
    1206:	08 95       	ret

00001208 <_ZL9getNumberv>:
    1208:	ef 92       	push	r14
    120a:	ff 92       	push	r15
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <_ZL16currentCharacterv>
    1214:	c0 e0       	ldi	r28, 0x00	; 0
    1216:	d0 e0       	ldi	r29, 0x00	; 0
    1218:	1b c0       	rjmp	.+54     	; 0x1250 <_ZL9getNumberv+0x48>
    121a:	9e 01       	movw	r18, r28
    121c:	22 0f       	add	r18, r18
    121e:	33 1f       	adc	r19, r19
    1220:	93 e0       	ldi	r25, 0x03	; 3
    1222:	cc 0f       	add	r28, r28
    1224:	dd 1f       	adc	r29, r29
    1226:	9a 95       	dec	r25
    1228:	e1 f7       	brne	.-8      	; 0x1222 <_ZL9getNumberv+0x1a>
    122a:	c2 0f       	add	r28, r18
    122c:	d3 1f       	adc	r29, r19
    122e:	99 27       	eor	r25, r25
    1230:	87 fd       	sbrc	r24, 7
    1232:	90 95       	com	r25
    1234:	c8 0f       	add	r28, r24
    1236:	d9 1f       	adc	r29, r25
    1238:	e0 97       	sbiw	r28, 0x30	; 48
    123a:	80 91 51 01 	lds	r24, 0x0151
    123e:	90 91 52 01 	lds	r25, 0x0152
    1242:	01 96       	adiw	r24, 0x01	; 1
    1244:	90 93 52 01 	sts	0x0152, r25
    1248:	80 93 51 01 	sts	0x0151, r24
    124c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <_ZL16currentCharacterv>
    1250:	98 2f       	mov	r25, r24
    1252:	90 53       	subi	r25, 0x30	; 48
    1254:	9a 30       	cpi	r25, 0x0A	; 10
    1256:	08 f3       	brcs	.-62     	; 0x121a <_ZL9getNumberv+0x12>
    1258:	ce 01       	movw	r24, r28
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	ff 90       	pop	r15
    1260:	ef 90       	pop	r14
    1262:	08 95       	ret

00001264 <_ZN15OrangutanBuzzer5init2Ev>:
    1264:	10 92 6f 00 	sts	0x006F, r1
    1268:	83 e2       	ldi	r24, 0x23	; 35
    126a:	80 93 80 00 	sts	0x0080, r24
    126e:	81 e1       	ldi	r24, 0x11	; 17
    1270:	80 93 81 00 	sts	0x0081, r24
    1274:	10 92 82 00 	sts	0x0082, r1
    1278:	80 e1       	ldi	r24, 0x10	; 16
    127a:	97 e2       	ldi	r25, 0x27	; 39
    127c:	90 93 89 00 	sts	0x0089, r25
    1280:	80 93 88 00 	sts	0x0088, r24
    1284:	10 92 8b 00 	sts	0x008B, r1
    1288:	10 92 8a 00 	sts	0x008A, r1
    128c:	22 9a       	sbi	0x04, 2	; 4
    128e:	78 94       	sei
    1290:	08 95       	ret

00001292 <_ZN15OrangutanBuzzer4initEv>:
    1292:	80 91 50 01 	lds	r24, 0x0150
    1296:	88 23       	and	r24, r24
    1298:	29 f4       	brne	.+10     	; 0x12a4 <_ZN15OrangutanBuzzer4initEv+0x12>
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	80 93 50 01 	sts	0x0150, r24
    12a0:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN15OrangutanBuzzer5init2Ev>
    12a4:	08 95       	ret

000012a6 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    12a6:	a0 e0       	ldi	r26, 0x00	; 0
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e9 e5       	ldi	r30, 0x59	; 89
    12ac:	f9 e0       	ldi	r31, 0x09	; 9
    12ae:	0c 94 3e 16 	jmp	0x2c7c	; 0x2c7c <__prologue_saves__+0xc>
    12b2:	8c 01       	movw	r16, r24
    12b4:	5b 01       	movw	r10, r22
    12b6:	e4 2e       	mov	r14, r20
    12b8:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN15OrangutanBuzzer4initEv>
    12bc:	10 92 02 01 	sts	0x0102, r1
    12c0:	17 ff       	sbrs	r17, 7
    12c2:	04 c0       	rjmp	.+8      	; 0x12cc <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x26>
    12c4:	1f 77       	andi	r17, 0x7F	; 127
    12c6:	aa e0       	ldi	r26, 0x0A	; 10
    12c8:	fa 2e       	mov	r15, r26
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2a>
    12cc:	ff 24       	eor	r15, r15
    12ce:	f3 94       	inc	r15
    12d0:	c0 90 81 00 	lds	r12, 0x0081
    12d4:	dd 24       	eor	r13, r13
    12d6:	28 ef       	ldi	r18, 0xF8	; 248
    12d8:	c2 22       	and	r12, r18
    12da:	dd 24       	eor	r13, r13
    12dc:	88 ec       	ldi	r24, 0xC8	; 200
    12de:	3f 2d       	mov	r19, r15
    12e0:	38 9f       	mul	r19, r24
    12e2:	c0 01       	movw	r24, r0
    12e4:	11 24       	eor	r1, r1
    12e6:	80 17       	cp	r24, r16
    12e8:	91 07       	cpc	r25, r17
    12ea:	d8 f4       	brcc	.+54     	; 0x1322 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x7c>
    12ec:	e8 01       	movw	r28, r16
    12ee:	67 e2       	ldi	r22, 0x27	; 39
    12f0:	01 31       	cpi	r16, 0x11	; 17
    12f2:	16 07       	cpc	r17, r22
    12f4:	10 f0       	brcs	.+4      	; 0x12fa <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x54>
    12f6:	c0 e1       	ldi	r28, 0x10	; 16
    12f8:	d7 e2       	ldi	r29, 0x27	; 39
    12fa:	be 01       	movw	r22, r28
    12fc:	76 95       	lsr	r23
    12fe:	67 95       	ror	r22
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	60 58       	subi	r22, 0x80	; 128
    1306:	79 46       	sbci	r23, 0x69	; 105
    1308:	87 46       	sbci	r24, 0x67	; 103
    130a:	9f 4f       	sbci	r25, 0xFF	; 255
    130c:	9e 01       	movw	r18, r28
    130e:	40 e0       	ldi	r20, 0x00	; 0
    1310:	50 e0       	ldi	r21, 0x00	; 0
    1312:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <__udivmodsi4>
    1316:	89 01       	movw	r16, r18
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	c8 2a       	or	r12, r24
    131e:	d9 2a       	or	r13, r25
    1320:	2c c0       	rjmp	.+88     	; 0x137a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd4>
    1322:	98 e2       	ldi	r25, 0x28	; 40
    1324:	f9 9e       	mul	r15, r25
    1326:	90 2d       	mov	r25, r0
    1328:	11 24       	eor	r1, r1
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	89 2e       	mov	r8, r25
    132e:	e4 01       	movw	r28, r8
    1330:	4e 01       	movw	r8, r28
    1332:	98 2e       	mov	r9, r24
    1334:	e4 01       	movw	r28, r8
    1336:	80 16       	cp	r8, r16
    1338:	91 06       	cpc	r9, r17
    133a:	08 f4       	brcc	.+2      	; 0x133e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x98>
    133c:	e8 01       	movw	r28, r16
    133e:	be 01       	movw	r22, r28
    1340:	76 95       	lsr	r23
    1342:	67 95       	ror	r22
    1344:	9e 01       	movw	r18, r28
    1346:	40 e0       	ldi	r20, 0x00	; 0
    1348:	50 e0       	ldi	r21, 0x00	; 0
    134a:	8f 2d       	mov	r24, r15
    134c:	8a 30       	cpi	r24, 0x0A	; 10
    134e:	39 f4       	brne	.+14     	; 0x135e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xb8>
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	60 5e       	subi	r22, 0xE0	; 224
    1356:	73 44       	sbci	r23, 0x43	; 67
    1358:	81 44       	sbci	r24, 0x41	; 65
    135a:	9f 4f       	sbci	r25, 0xFF	; 255
    135c:	06 c0       	rjmp	.+12     	; 0x136a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc4>
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	60 53       	subi	r22, 0x30	; 48
    1364:	7d 4e       	sbci	r23, 0xED	; 237
    1366:	8c 4e       	sbci	r24, 0xEC	; 236
    1368:	9f 4f       	sbci	r25, 0xFF	; 255
    136a:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <__udivmodsi4>
    136e:	89 01       	movw	r16, r18
    1370:	52 e0       	ldi	r21, 0x02	; 2
    1372:	85 2e       	mov	r8, r21
    1374:	91 2c       	mov	r9, r1
    1376:	c8 28       	or	r12, r8
    1378:	d9 28       	or	r13, r9
    137a:	2f 2d       	mov	r18, r15
    137c:	2a 30       	cpi	r18, 0x0A	; 10
    137e:	39 f4       	brne	.+14     	; 0x138e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xe8>
    1380:	ce 01       	movw	r24, r28
    1382:	05 96       	adiw	r24, 0x05	; 5
    1384:	6a e0       	ldi	r22, 0x0A	; 10
    1386:	70 e0       	ldi	r23, 0x00	; 0
    1388:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <__udivmodhi4>
    138c:	eb 01       	movw	r28, r22
    138e:	33 e0       	ldi	r19, 0x03	; 3
    1390:	c8 3e       	cpi	r28, 0xE8	; 232
    1392:	d3 07       	cpc	r29, r19
    1394:	79 f0       	breq	.+30     	; 0x13b4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x10e>
    1396:	be 01       	movw	r22, r28
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	95 01       	movw	r18, r10
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	50 e0       	ldi	r21, 0x00	; 0
    13a2:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <__mulsi3>
    13a6:	28 ee       	ldi	r18, 0xE8	; 232
    13a8:	33 e0       	ldi	r19, 0x03	; 3
    13aa:	40 e0       	ldi	r20, 0x00	; 0
    13ac:	50 e0       	ldi	r21, 0x00	; 0
    13ae:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <__divmodsi4>
    13b2:	01 c0       	rjmp	.+2      	; 0x13b6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    13b4:	95 01       	movw	r18, r10
    13b6:	10 92 6f 00 	sts	0x006F, r1
    13ba:	c0 92 81 00 	sts	0x0081, r12
    13be:	10 93 89 00 	sts	0x0089, r17
    13c2:	00 93 88 00 	sts	0x0088, r16
    13c6:	40 91 88 00 	lds	r20, 0x0088
    13ca:	50 91 89 00 	lds	r21, 0x0089
    13ce:	6e 2d       	mov	r22, r14
    13d0:	60 31       	cpi	r22, 0x10	; 16
    13d2:	08 f0       	brcs	.+2      	; 0x13d6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    13d4:	6f e0       	ldi	r22, 0x0F	; 15
    13d6:	80 e1       	ldi	r24, 0x10	; 16
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	86 1b       	sub	r24, r22
    13dc:	91 09       	sbc	r25, r1
    13de:	ba 01       	movw	r22, r20
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    13e2:	76 95       	lsr	r23
    13e4:	67 95       	ror	r22
    13e6:	8a 95       	dec	r24
    13e8:	e2 f7       	brpl	.-8      	; 0x13e2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    13ea:	70 93 8b 00 	sts	0x008B, r23
    13ee:	60 93 8a 00 	sts	0x008A, r22
    13f2:	30 93 58 01 	sts	0x0158, r19
    13f6:	20 93 57 01 	sts	0x0157, r18
    13fa:	86 b3       	in	r24, 0x16	; 22
    13fc:	8f ef       	ldi	r24, 0xFF	; 255
    13fe:	86 bb       	out	0x16, r24	; 22
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	80 93 6f 00 	sts	0x006F, r24
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	ec e0       	ldi	r30, 0x0C	; 12
    140c:	0c 94 5a 16 	jmp	0x2cb4	; 0x2cb4 <__epilogue_restores__+0xc>

00001410 <play_frequency>:
    1410:	0e 94 53 09 	call	0x12a6	; 0x12a6 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1414:	08 95       	ret

00001416 <_ZN15OrangutanBuzzer8playNoteEhjh>:
    1416:	9b 01       	movw	r18, r22
    1418:	8f 3f       	cpi	r24, 0xFF	; 255
    141a:	11 f0       	breq	.+4      	; 0x1420 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa>
    141c:	44 23       	and	r20, r20
    141e:	29 f4       	brne	.+10     	; 0x142a <_ZN15OrangutanBuzzer8playNoteEhjh+0x14>
    1420:	88 ee       	ldi	r24, 0xE8	; 232
    1422:	93 e0       	ldi	r25, 0x03	; 3
    1424:	b9 01       	movw	r22, r18
    1426:	40 e0       	ldi	r20, 0x00	; 0
    1428:	49 c0       	rjmp	.+146    	; 0x14bc <_ZN15OrangutanBuzzer8playNoteEhjh+0xa6>
    142a:	81 31       	cpi	r24, 0x11	; 17
    142c:	30 f0       	brcs	.+12     	; 0x143a <_ZN15OrangutanBuzzer8playNoteEhjh+0x24>
    142e:	58 2f       	mov	r21, r24
    1430:	50 51       	subi	r21, 0x10	; 16
    1432:	50 36       	cpi	r21, 0x60	; 96
    1434:	18 f0       	brcs	.+6      	; 0x143c <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
    1436:	5f e5       	ldi	r21, 0x5F	; 95
    1438:	01 c0       	rjmp	.+2      	; 0x143c <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
    143a:	50 e0       	ldi	r21, 0x00	; 0
    143c:	85 2f       	mov	r24, r21
    143e:	6c e0       	ldi	r22, 0x0C	; 12
    1440:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__udivmodqi4>
    1444:	a8 2f       	mov	r26, r24
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e4 ef       	ldi	r30, 0xF4	; 244
    144a:	ff ef       	ldi	r31, 0xFF	; 255
    144c:	ae 9f       	mul	r26, r30
    144e:	b0 01       	movw	r22, r0
    1450:	af 9f       	mul	r26, r31
    1452:	70 0d       	add	r23, r0
    1454:	be 9f       	mul	r27, r30
    1456:	70 0d       	add	r23, r0
    1458:	11 24       	eor	r1, r1
    145a:	65 0f       	add	r22, r21
    145c:	71 1d       	adc	r23, r1
    145e:	6c 30       	cpi	r22, 0x0C	; 12
    1460:	71 05       	cpc	r23, r1
    1462:	40 f4       	brcc	.+16     	; 0x1474 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5e>
    1464:	fb 01       	movw	r30, r22
    1466:	ee 0f       	add	r30, r30
    1468:	ff 1f       	adc	r31, r31
    146a:	e4 5f       	subi	r30, 0xF4	; 244
    146c:	fe 4f       	sbci	r31, 0xFE	; 254
    146e:	60 81       	ld	r22, Z
    1470:	71 81       	ldd	r23, Z+1	; 0x01
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    1474:	60 e0       	ldi	r22, 0x00	; 0
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	87 30       	cpi	r24, 0x07	; 7
    147a:	81 f0       	breq	.+32     	; 0x149c <_ZN15OrangutanBuzzer8playNoteEhjh+0x86>
    147c:	08 2e       	mov	r0, r24
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <_ZN15OrangutanBuzzer8playNoteEhjh+0x6e>
    1480:	66 0f       	add	r22, r22
    1482:	77 1f       	adc	r23, r23
    1484:	0a 94       	dec	r0
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <_ZN15OrangutanBuzzer8playNoteEhjh+0x6a>
    1488:	82 30       	cpi	r24, 0x02	; 2
    148a:	28 f0       	brcs	.+10     	; 0x1496 <_ZN15OrangutanBuzzer8playNoteEhjh+0x80>
    148c:	cb 01       	movw	r24, r22
    148e:	05 96       	adiw	r24, 0x05	; 5
    1490:	6a e0       	ldi	r22, 0x0A	; 10
    1492:	70 e0       	ldi	r23, 0x00	; 0
    1494:	0c c0       	rjmp	.+24     	; 0x14ae <_ZN15OrangutanBuzzer8playNoteEhjh+0x98>
    1496:	60 50       	subi	r22, 0x00	; 0
    1498:	70 48       	sbci	r23, 0x80	; 128
    149a:	0b c0       	rjmp	.+22     	; 0x14b2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    149c:	cb 01       	movw	r24, r22
    149e:	b6 e0       	ldi	r27, 0x06	; 6
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	ba 95       	dec	r27
    14a6:	e1 f7       	brne	.-8      	; 0x14a0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x8a>
    14a8:	02 96       	adiw	r24, 0x02	; 2
    14aa:	65 e0       	ldi	r22, 0x05	; 5
    14ac:	70 e0       	ldi	r23, 0x00	; 0
    14ae:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <__udivmodhi4>
    14b2:	40 31       	cpi	r20, 0x10	; 16
    14b4:	08 f0       	brcs	.+2      	; 0x14b8 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa2>
    14b6:	4f e0       	ldi	r20, 0x0F	; 15
    14b8:	cb 01       	movw	r24, r22
    14ba:	b9 01       	movw	r22, r18
    14bc:	0e 94 53 09 	call	0x12a6	; 0x12a6 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    14c0:	08 95       	ret

000014c2 <_ZL8nextNotev>:
    14c2:	a0 e0       	ldi	r26, 0x00	; 0
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e7 e6       	ldi	r30, 0x67	; 103
    14c8:	fa e0       	ldi	r31, 0x0A	; 10
    14ca:	0c 94 3d 16 	jmp	0x2c7a	; 0x2c7a <__prologue_saves__+0xa>
    14ce:	b0 90 03 01 	lds	r11, 0x0103
    14d2:	80 91 53 01 	lds	r24, 0x0153
    14d6:	88 23       	and	r24, r24
    14d8:	61 f0       	breq	.+24     	; 0x14f2 <_ZL8nextNotev+0x30>
    14da:	60 91 54 01 	lds	r22, 0x0154
    14de:	66 23       	and	r22, r22
    14e0:	41 f0       	breq	.+16     	; 0x14f2 <_ZL8nextNotev+0x30>
    14e2:	8f ef       	ldi	r24, 0xFF	; 255
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	40 e0       	ldi	r20, 0x00	; 0
    14e8:	0e 94 0b 0a 	call	0x1416	; 0x1416 <_ZN15OrangutanBuzzer8playNoteEhjh>
    14ec:	10 92 54 01 	sts	0x0154, r1
    14f0:	34 c1       	rjmp	.+616    	; 0x175a <_ZL8nextNotev+0x298>
    14f2:	c0 ec       	ldi	r28, 0xC0	; 192
    14f4:	dd e5       	ldi	r29, 0x5D	; 93
    14f6:	aa 24       	eor	r10, r10
    14f8:	a3 94       	inc	r10
    14fa:	14 e0       	ldi	r17, 0x04	; 4
    14fc:	71 2e       	mov	r7, r17
    14fe:	00 ed       	ldi	r16, 0xD0	; 208
    1500:	17 e0       	ldi	r17, 0x07	; 7
    1502:	b4 e0       	ldi	r27, 0x04	; 4
    1504:	eb 2e       	mov	r14, r27
    1506:	f1 2c       	mov	r15, r1
    1508:	a4 ef       	ldi	r26, 0xF4	; 244
    150a:	ca 2e       	mov	r12, r26
    150c:	a1 e0       	ldi	r26, 0x01	; 1
    150e:	da 2e       	mov	r13, r26
    1510:	ff e0       	ldi	r31, 0x0F	; 15
    1512:	8f 2e       	mov	r8, r31
    1514:	91 2c       	mov	r9, r1
    1516:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <_ZL16currentCharacterv>
    151a:	20 91 51 01 	lds	r18, 0x0151
    151e:	30 91 52 01 	lds	r19, 0x0152
    1522:	2f 5f       	subi	r18, 0xFF	; 255
    1524:	3f 4f       	sbci	r19, 0xFF	; 255
    1526:	30 93 52 01 	sts	0x0152, r19
    152a:	20 93 51 01 	sts	0x0151, r18
    152e:	86 36       	cpi	r24, 0x66	; 102
    1530:	f1 f1       	breq	.+124    	; 0x15ae <_ZL8nextNotev+0xec>
    1532:	87 36       	cpi	r24, 0x67	; 103
    1534:	cc f4       	brge	.+50     	; 0x1568 <_ZL8nextNotev+0xa6>
    1536:	82 36       	cpi	r24, 0x62	; 98
    1538:	09 f4       	brne	.+2      	; 0x153c <_ZL8nextNotev+0x7a>
    153a:	af c0       	rjmp	.+350    	; 0x169a <_ZL8nextNotev+0x1d8>
    153c:	83 36       	cpi	r24, 0x63	; 99
    153e:	7c f4       	brge	.+30     	; 0x155e <_ZL8nextNotev+0x9c>
    1540:	8e 33       	cpi	r24, 0x3E	; 62
    1542:	49 f1       	breq	.+82     	; 0x1596 <_ZL8nextNotev+0xd4>
    1544:	8f 33       	cpi	r24, 0x3F	; 63
    1546:	3c f4       	brge	.+14     	; 0x1556 <_ZL8nextNotev+0x94>
    1548:	81 32       	cpi	r24, 0x21	; 33
    154a:	09 f4       	brne	.+2      	; 0x154e <_ZL8nextNotev+0x8c>
    154c:	87 c0       	rjmp	.+270    	; 0x165c <_ZL8nextNotev+0x19a>
    154e:	8c 33       	cpi	r24, 0x3C	; 60
    1550:	09 f0       	breq	.+2      	; 0x1554 <_ZL8nextNotev+0x92>
    1552:	9b c0       	rjmp	.+310    	; 0x168a <_ZL8nextNotev+0x1c8>
    1554:	22 c0       	rjmp	.+68     	; 0x159a <_ZL8nextNotev+0xd8>
    1556:	81 36       	cpi	r24, 0x61	; 97
    1558:	09 f0       	breq	.+2      	; 0x155c <_ZL8nextNotev+0x9a>
    155a:	97 c0       	rjmp	.+302    	; 0x168a <_ZL8nextNotev+0x1c8>
    155c:	9b c0       	rjmp	.+310    	; 0x1694 <_ZL8nextNotev+0x1d2>
    155e:	84 36       	cpi	r24, 0x64	; 100
    1560:	01 f1       	breq	.+64     	; 0x15a2 <_ZL8nextNotev+0xe0>
    1562:	85 36       	cpi	r24, 0x65	; 101
    1564:	0c f5       	brge	.+66     	; 0x15a8 <_ZL8nextNotev+0xe6>
    1566:	1b c0       	rjmp	.+54     	; 0x159e <_ZL8nextNotev+0xdc>
    1568:	8f 36       	cpi	r24, 0x6F	; 111
    156a:	09 f4       	brne	.+2      	; 0x156e <_ZL8nextNotev+0xac>
    156c:	47 c0       	rjmp	.+142    	; 0x15fc <_ZL8nextNotev+0x13a>
    156e:	80 37       	cpi	r24, 0x70	; 112
    1570:	44 f4       	brge	.+16     	; 0x1582 <_ZL8nextNotev+0xc0>
    1572:	8c 36       	cpi	r24, 0x6C	; 108
    1574:	11 f1       	breq	.+68     	; 0x15ba <_ZL8nextNotev+0xf8>
    1576:	8d 36       	cpi	r24, 0x6D	; 109
    1578:	61 f1       	breq	.+88     	; 0x15d2 <_ZL8nextNotev+0x110>
    157a:	87 36       	cpi	r24, 0x67	; 103
    157c:	09 f0       	breq	.+2      	; 0x1580 <_ZL8nextNotev+0xbe>
    157e:	85 c0       	rjmp	.+266    	; 0x168a <_ZL8nextNotev+0x1c8>
    1580:	19 c0       	rjmp	.+50     	; 0x15b4 <_ZL8nextNotev+0xf2>
    1582:	84 37       	cpi	r24, 0x74	; 116
    1584:	09 f4       	brne	.+2      	; 0x1588 <_ZL8nextNotev+0xc6>
    1586:	44 c0       	rjmp	.+136    	; 0x1610 <_ZL8nextNotev+0x14e>
    1588:	86 37       	cpi	r24, 0x76	; 118
    158a:	09 f4       	brne	.+2      	; 0x158e <_ZL8nextNotev+0xcc>
    158c:	60 c0       	rjmp	.+192    	; 0x164e <_ZL8nextNotev+0x18c>
    158e:	82 37       	cpi	r24, 0x72	; 114
    1590:	09 f0       	breq	.+2      	; 0x1594 <_ZL8nextNotev+0xd2>
    1592:	7b c0       	rjmp	.+246    	; 0x168a <_ZL8nextNotev+0x1c8>
    1594:	39 c0       	rjmp	.+114    	; 0x1608 <_ZL8nextNotev+0x146>
    1596:	b3 94       	inc	r11
    1598:	be cf       	rjmp	.-132    	; 0x1516 <_ZL8nextNotev+0x54>
    159a:	ba 94       	dec	r11
    159c:	bc cf       	rjmp	.-136    	; 0x1516 <_ZL8nextNotev+0x54>
    159e:	ee 24       	eor	r14, r14
    15a0:	35 c0       	rjmp	.+106    	; 0x160c <_ZL8nextNotev+0x14a>
    15a2:	ee 24       	eor	r14, r14
    15a4:	82 e0       	ldi	r24, 0x02	; 2
    15a6:	7b c0       	rjmp	.+246    	; 0x169e <_ZL8nextNotev+0x1dc>
    15a8:	ee 24       	eor	r14, r14
    15aa:	84 e0       	ldi	r24, 0x04	; 4
    15ac:	78 c0       	rjmp	.+240    	; 0x169e <_ZL8nextNotev+0x1dc>
    15ae:	ee 24       	eor	r14, r14
    15b0:	85 e0       	ldi	r24, 0x05	; 5
    15b2:	75 c0       	rjmp	.+234    	; 0x169e <_ZL8nextNotev+0x1dc>
    15b4:	ee 24       	eor	r14, r14
    15b6:	87 e0       	ldi	r24, 0x07	; 7
    15b8:	72 c0       	rjmp	.+228    	; 0x169e <_ZL8nextNotev+0x1dc>
    15ba:	0e 94 04 09 	call	0x1208	; 0x1208 <_ZL9getNumberv>
    15be:	bc 01       	movw	r22, r24
    15c0:	90 93 05 01 	sts	0x0105, r25
    15c4:	80 93 04 01 	sts	0x0104, r24
    15c8:	80 91 06 01 	lds	r24, 0x0106
    15cc:	90 91 07 01 	lds	r25, 0x0107
    15d0:	37 c0       	rjmp	.+110    	; 0x1640 <_ZL8nextNotev+0x17e>
    15d2:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <_ZL16currentCharacterv>
    15d6:	8c 36       	cpi	r24, 0x6C	; 108
    15d8:	19 f4       	brne	.+6      	; 0x15e0 <_ZL8nextNotev+0x11e>
    15da:	10 92 53 01 	sts	0x0153, r1
    15de:	04 c0       	rjmp	.+8      	; 0x15e8 <_ZL8nextNotev+0x126>
    15e0:	a0 92 53 01 	sts	0x0153, r10
    15e4:	10 92 54 01 	sts	0x0154, r1
    15e8:	80 91 51 01 	lds	r24, 0x0151
    15ec:	90 91 52 01 	lds	r25, 0x0152
    15f0:	01 96       	adiw	r24, 0x01	; 1
    15f2:	90 93 52 01 	sts	0x0152, r25
    15f6:	80 93 51 01 	sts	0x0151, r24
    15fa:	8d cf       	rjmp	.-230    	; 0x1516 <_ZL8nextNotev+0x54>
    15fc:	0e 94 04 09 	call	0x1208	; 0x1208 <_ZL9getNumberv>
    1600:	b8 2e       	mov	r11, r24
    1602:	80 93 03 01 	sts	0x0103, r24
    1606:	87 cf       	rjmp	.-242    	; 0x1516 <_ZL8nextNotev+0x54>
    1608:	ee 24       	eor	r14, r14
    160a:	e3 94       	inc	r14
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	47 c0       	rjmp	.+142    	; 0x169e <_ZL8nextNotev+0x1dc>
    1610:	0e 94 04 09 	call	0x1208	; 0x1208 <_ZL9getNumberv>
    1614:	bc 01       	movw	r22, r24
    1616:	ce 01       	movw	r24, r28
    1618:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <__udivmodhi4>
    161c:	cb 01       	movw	r24, r22
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	53 e0       	ldi	r21, 0x03	; 3
    1624:	66 0f       	add	r22, r22
    1626:	77 1f       	adc	r23, r23
    1628:	5a 95       	dec	r21
    162a:	e1 f7       	brne	.-8      	; 0x1624 <_ZL8nextNotev+0x162>
    162c:	86 0f       	add	r24, r22
    162e:	97 1f       	adc	r25, r23
    1630:	90 93 07 01 	sts	0x0107, r25
    1634:	80 93 06 01 	sts	0x0106, r24
    1638:	60 91 04 01 	lds	r22, 0x0104
    163c:	70 91 05 01 	lds	r23, 0x0105
    1640:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <__udivmodhi4>
    1644:	70 93 09 01 	sts	0x0109, r23
    1648:	60 93 08 01 	sts	0x0108, r22
    164c:	64 cf       	rjmp	.-312    	; 0x1516 <_ZL8nextNotev+0x54>
    164e:	0e 94 04 09 	call	0x1208	; 0x1208 <_ZL9getNumberv>
    1652:	90 93 0b 01 	sts	0x010B, r25
    1656:	80 93 0a 01 	sts	0x010A, r24
    165a:	5d cf       	rjmp	.-326    	; 0x1516 <_ZL8nextNotev+0x54>
    165c:	70 92 03 01 	sts	0x0103, r7
    1660:	10 93 07 01 	sts	0x0107, r17
    1664:	00 93 06 01 	sts	0x0106, r16
    1668:	f0 92 05 01 	sts	0x0105, r15
    166c:	e0 92 04 01 	sts	0x0104, r14
    1670:	d0 92 09 01 	sts	0x0109, r13
    1674:	c0 92 08 01 	sts	0x0108, r12
    1678:	90 92 0b 01 	sts	0x010B, r9
    167c:	80 92 0a 01 	sts	0x010A, r8
    1680:	10 92 53 01 	sts	0x0153, r1
    1684:	44 e0       	ldi	r20, 0x04	; 4
    1686:	b4 2e       	mov	r11, r20
    1688:	46 cf       	rjmp	.-372    	; 0x1516 <_ZL8nextNotev+0x54>
    168a:	10 92 52 01 	sts	0x0152, r1
    168e:	10 92 51 01 	sts	0x0151, r1
    1692:	63 c0       	rjmp	.+198    	; 0x175a <_ZL8nextNotev+0x298>
    1694:	ee 24       	eor	r14, r14
    1696:	89 e0       	ldi	r24, 0x09	; 9
    1698:	02 c0       	rjmp	.+4      	; 0x169e <_ZL8nextNotev+0x1dc>
    169a:	ee 24       	eor	r14, r14
    169c:	8b e0       	ldi	r24, 0x0B	; 11
    169e:	9c e0       	ldi	r25, 0x0C	; 12
    16a0:	b9 9e       	mul	r11, r25
    16a2:	b0 2c       	mov	r11, r0
    16a4:	11 24       	eor	r1, r1
    16a6:	b8 0e       	add	r11, r24
    16a8:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <_ZL16currentCharacterv>
    16ac:	8b 32       	cpi	r24, 0x2B	; 43
    16ae:	11 f0       	breq	.+4      	; 0x16b4 <_ZL8nextNotev+0x1f2>
    16b0:	83 32       	cpi	r24, 0x23	; 35
    16b2:	b9 f4       	brne	.+46     	; 0x16e2 <_ZL8nextNotev+0x220>
    16b4:	80 91 51 01 	lds	r24, 0x0151
    16b8:	90 91 52 01 	lds	r25, 0x0152
    16bc:	01 96       	adiw	r24, 0x01	; 1
    16be:	90 93 52 01 	sts	0x0152, r25
    16c2:	80 93 51 01 	sts	0x0151, r24
    16c6:	b3 94       	inc	r11
    16c8:	ef cf       	rjmp	.-34     	; 0x16a8 <_ZL8nextNotev+0x1e6>
    16ca:	80 91 51 01 	lds	r24, 0x0151
    16ce:	90 91 52 01 	lds	r25, 0x0152
    16d2:	01 96       	adiw	r24, 0x01	; 1
    16d4:	90 93 52 01 	sts	0x0152, r25
    16d8:	80 93 51 01 	sts	0x0151, r24
    16dc:	ba 94       	dec	r11
    16de:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <_ZL16currentCharacterv>
    16e2:	8d 32       	cpi	r24, 0x2D	; 45
    16e4:	91 f3       	breq	.-28     	; 0x16ca <_ZL8nextNotev+0x208>
    16e6:	c0 91 08 01 	lds	r28, 0x0108
    16ea:	d0 91 09 01 	lds	r29, 0x0109
    16ee:	81 53       	subi	r24, 0x31	; 49
    16f0:	88 30       	cpi	r24, 0x08	; 8
    16f2:	58 f4       	brcc	.+22     	; 0x170a <_ZL8nextNotev+0x248>
    16f4:	c0 91 06 01 	lds	r28, 0x0106
    16f8:	d0 91 07 01 	lds	r29, 0x0107
    16fc:	0e 94 04 09 	call	0x1208	; 0x1208 <_ZL9getNumberv>
    1700:	bc 01       	movw	r22, r24
    1702:	ce 01       	movw	r24, r28
    1704:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <__udivmodhi4>
    1708:	eb 01       	movw	r28, r22
    170a:	8e 01       	movw	r16, r28
    170c:	0b c0       	rjmp	.+22     	; 0x1724 <_ZL8nextNotev+0x262>
    170e:	80 91 51 01 	lds	r24, 0x0151
    1712:	90 91 52 01 	lds	r25, 0x0152
    1716:	01 96       	adiw	r24, 0x01	; 1
    1718:	90 93 52 01 	sts	0x0152, r25
    171c:	80 93 51 01 	sts	0x0151, r24
    1720:	c0 0f       	add	r28, r16
    1722:	d1 1f       	adc	r29, r17
    1724:	16 95       	lsr	r17
    1726:	07 95       	ror	r16
    1728:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <_ZL16currentCharacterv>
    172c:	8e 32       	cpi	r24, 0x2E	; 46
    172e:	79 f3       	breq	.-34     	; 0x170e <_ZL8nextNotev+0x24c>
    1730:	80 91 53 01 	lds	r24, 0x0153
    1734:	88 23       	and	r24, r24
    1736:	39 f0       	breq	.+14     	; 0x1746 <_ZL8nextNotev+0x284>
    1738:	ce 01       	movw	r24, r28
    173a:	96 95       	lsr	r25
    173c:	87 95       	ror	r24
    173e:	80 93 54 01 	sts	0x0154, r24
    1742:	c8 1b       	sub	r28, r24
    1744:	d1 09       	sbc	r29, r1
    1746:	ee 20       	and	r14, r14
    1748:	11 f0       	breq	.+4      	; 0x174e <_ZL8nextNotev+0x28c>
    174a:	bb 24       	eor	r11, r11
    174c:	ba 94       	dec	r11
    174e:	8b 2d       	mov	r24, r11
    1750:	be 01       	movw	r22, r28
    1752:	40 91 0a 01 	lds	r20, 0x010A
    1756:	0e 94 0b 0a 	call	0x1416	; 0x1416 <_ZN15OrangutanBuzzer8playNoteEhjh>
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	ed e0       	ldi	r30, 0x0D	; 13
    1760:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__epilogue_restores__+0xa>

00001764 <__vector_13>:
    1764:	1f 92       	push	r1
    1766:	0f 92       	push	r0
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	0f 92       	push	r0
    176c:	11 24       	eor	r1, r1
    176e:	2f 93       	push	r18
    1770:	3f 93       	push	r19
    1772:	4f 93       	push	r20
    1774:	5f 93       	push	r21
    1776:	6f 93       	push	r22
    1778:	7f 93       	push	r23
    177a:	8f 93       	push	r24
    177c:	9f 93       	push	r25
    177e:	af 93       	push	r26
    1780:	bf 93       	push	r27
    1782:	ef 93       	push	r30
    1784:	ff 93       	push	r31
    1786:	80 91 57 01 	lds	r24, 0x0157
    178a:	90 91 58 01 	lds	r25, 0x0158
    178e:	9c 01       	movw	r18, r24
    1790:	21 50       	subi	r18, 0x01	; 1
    1792:	30 40       	sbci	r19, 0x00	; 0
    1794:	30 93 58 01 	sts	0x0158, r19
    1798:	20 93 57 01 	sts	0x0157, r18
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	11 f5       	brne	.+68     	; 0x17e4 <__vector_13+0x80>
    17a0:	10 92 6f 00 	sts	0x006F, r1
    17a4:	78 94       	sei
    17a6:	80 91 81 00 	lds	r24, 0x0081
    17aa:	88 7f       	andi	r24, 0xF8	; 248
    17ac:	81 60       	ori	r24, 0x01	; 1
    17ae:	80 93 81 00 	sts	0x0081, r24
    17b2:	80 e1       	ldi	r24, 0x10	; 16
    17b4:	97 e2       	ldi	r25, 0x27	; 39
    17b6:	90 93 89 00 	sts	0x0089, r25
    17ba:	80 93 88 00 	sts	0x0088, r24
    17be:	10 92 8b 00 	sts	0x008B, r1
    17c2:	10 92 8a 00 	sts	0x008A, r1
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	80 93 02 01 	sts	0x0102, r24
    17cc:	80 91 51 01 	lds	r24, 0x0151
    17d0:	90 91 52 01 	lds	r25, 0x0152
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	31 f0       	breq	.+12     	; 0x17e4 <__vector_13+0x80>
    17d8:	80 91 56 01 	lds	r24, 0x0156
    17dc:	88 23       	and	r24, r24
    17de:	11 f4       	brne	.+4      	; 0x17e4 <__vector_13+0x80>
    17e0:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <_ZL8nextNotev>
    17e4:	ff 91       	pop	r31
    17e6:	ef 91       	pop	r30
    17e8:	bf 91       	pop	r27
    17ea:	af 91       	pop	r26
    17ec:	9f 91       	pop	r25
    17ee:	8f 91       	pop	r24
    17f0:	7f 91       	pop	r23
    17f2:	6f 91       	pop	r22
    17f4:	5f 91       	pop	r21
    17f6:	4f 91       	pop	r20
    17f8:	3f 91       	pop	r19
    17fa:	2f 91       	pop	r18
    17fc:	0f 90       	pop	r0
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	0f 90       	pop	r0
    1802:	1f 90       	pop	r1
    1804:	18 95       	reti

00001806 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    1806:	10 92 6f 00 	sts	0x006F, r1
    180a:	90 93 52 01 	sts	0x0152, r25
    180e:	80 93 51 01 	sts	0x0151, r24
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	80 93 55 01 	sts	0x0155, r24
    1818:	10 92 54 01 	sts	0x0154, r1
    181c:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <_ZL8nextNotev>
    1820:	08 95       	ret

00001822 <play_from_program_space>:
    1822:	0e 94 03 0c 	call	0x1806	; 0x1806 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    1826:	08 95       	ret

00001828 <delayMicroseconds.clone.0>:
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	6f 93       	push	r22
    182e:	64 e0       	ldi	r22, 0x04	; 4
    1830:	6a 95       	dec	r22
    1832:	f1 f7       	brne	.-4      	; 0x1830 <delayMicroseconds.clone.0+0x8>
    1834:	6f 91       	pop	r22
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	c9 f7       	brne	.-14     	; 0x182c <delayMicroseconds.clone.0+0x4>
    183a:	08 95       	ret

0000183c <_ZN12OrangutanLCD8busyWaitEv>:
    183c:	0f 93       	push	r16
    183e:	1f 93       	push	r17
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	1a b1       	in	r17, 0x0a	; 10
    1846:	57 98       	cbi	0x0a, 7	; 10
    1848:	5a 98       	cbi	0x0b, 2	; 11
    184a:	28 9a       	sbi	0x05, 0	; 5
    184c:	c0 e0       	ldi	r28, 0x00	; 0
    184e:	d0 e0       	ldi	r29, 0x00	; 0
    1850:	0e 94 14 0c 	call	0x1828	; 0x1828 <delayMicroseconds.clone.0>
    1854:	5c 9a       	sbi	0x0b, 4	; 11
    1856:	0e 94 14 0c 	call	0x1828	; 0x1828 <delayMicroseconds.clone.0>
    185a:	09 b1       	in	r16, 0x09	; 9
    185c:	5c 98       	cbi	0x0b, 4	; 11
    185e:	0e 94 14 0c 	call	0x1828	; 0x1828 <delayMicroseconds.clone.0>
    1862:	5c 9a       	sbi	0x0b, 4	; 11
    1864:	0e 94 14 0c 	call	0x1828	; 0x1828 <delayMicroseconds.clone.0>
    1868:	5c 98       	cbi	0x0b, 4	; 11
    186a:	07 ff       	sbrs	r16, 7
    186c:	11 c0       	rjmp	.+34     	; 0x1890 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    186e:	24 96       	adiw	r28, 0x04	; 4
    1870:	9e 01       	movw	r18, r28
    1872:	40 e0       	ldi	r20, 0x00	; 0
    1874:	50 e0       	ldi	r21, 0x00	; 0
    1876:	80 91 5d 01 	lds	r24, 0x015D
    187a:	90 91 5e 01 	lds	r25, 0x015E
    187e:	a0 91 5f 01 	lds	r26, 0x015F
    1882:	b0 91 60 01 	lds	r27, 0x0160
    1886:	28 17       	cp	r18, r24
    1888:	39 07       	cpc	r19, r25
    188a:	4a 07       	cpc	r20, r26
    188c:	5b 07       	cpc	r21, r27
    188e:	00 f3       	brcs	.-64     	; 0x1850 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    1890:	1a b9       	out	0x0a, r17	; 10
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	1f 91       	pop	r17
    1898:	0f 91       	pop	r16
    189a:	08 95       	ret

0000189c <_ZN12OrangutanLCD8sendDataEh>:
    189c:	65 b1       	in	r22, 0x05	; 5
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	ac 01       	movw	r20, r24
    18a2:	41 70       	andi	r20, 0x01	; 1
    18a4:	50 70       	andi	r21, 0x00	; 0
    18a6:	44 0f       	add	r20, r20
    18a8:	55 1f       	adc	r21, r21
    18aa:	9c 01       	movw	r18, r24
    18ac:	26 70       	andi	r18, 0x06	; 6
    18ae:	30 70       	andi	r19, 0x00	; 0
    18b0:	53 e0       	ldi	r21, 0x03	; 3
    18b2:	22 0f       	add	r18, r18
    18b4:	33 1f       	adc	r19, r19
    18b6:	5a 95       	dec	r21
    18b8:	e1 f7       	brne	.-8      	; 0x18b2 <_ZN12OrangutanLCD8sendDataEh+0x16>
    18ba:	24 2b       	or	r18, r20
    18bc:	6d 7c       	andi	r22, 0xCD	; 205
    18be:	26 2b       	or	r18, r22
    18c0:	25 b9       	out	0x05, r18	; 5
    18c2:	2b b1       	in	r18, 0x0b	; 11
    18c4:	88 70       	andi	r24, 0x08	; 8
    18c6:	90 70       	andi	r25, 0x00	; 0
    18c8:	34 e0       	ldi	r19, 0x04	; 4
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	3a 95       	dec	r19
    18d0:	e1 f7       	brne	.-8      	; 0x18ca <_ZN12OrangutanLCD8sendDataEh+0x2e>
    18d2:	2f 77       	andi	r18, 0x7F	; 127
    18d4:	28 2b       	or	r18, r24
    18d6:	2b b9       	out	0x0b, r18	; 11
    18d8:	5c 9a       	sbi	0x0b, 4	; 11
    18da:	0e 94 14 0c 	call	0x1828	; 0x1828 <delayMicroseconds.clone.0>
    18de:	5c 98       	cbi	0x0b, 4	; 11
    18e0:	0e 94 14 0c 	call	0x1828	; 0x1828 <delayMicroseconds.clone.0>
    18e4:	08 95       	ret

000018e6 <_ZN12OrangutanLCD4sendEhhh>:
    18e6:	a2 e0       	ldi	r26, 0x02	; 2
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e9 e7       	ldi	r30, 0x79	; 121
    18ec:	fc e0       	ldi	r31, 0x0C	; 12
    18ee:	0c 94 43 16 	jmp	0x2c86	; 0x2c86 <__prologue_saves__+0x16>
    18f2:	18 2f       	mov	r17, r24
    18f4:	4a 83       	std	Y+2, r20	; 0x02
    18f6:	69 83       	std	Y+1, r22	; 0x01
    18f8:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <_ZN12OrangutanLCD4initEv>
    18fc:	0e 94 1e 0c 	call	0x183c	; 0x183c <_ZN12OrangutanLCD8busyWaitEv>
    1900:	f4 b0       	in	r15, 0x04	; 4
    1902:	05 b1       	in	r16, 0x05	; 5
    1904:	da b0       	in	r13, 0x0a	; 10
    1906:	eb b0       	in	r14, 0x0b	; 11
    1908:	28 98       	cbi	0x05, 0	; 5
    190a:	69 81       	ldd	r22, Y+1	; 0x01
    190c:	4a 81       	ldd	r20, Y+2	; 0x02
    190e:	66 23       	and	r22, r22
    1910:	11 f0       	breq	.+4      	; 0x1916 <_ZN12OrangutanLCD4sendEhhh+0x30>
    1912:	5a 9a       	sbi	0x0b, 2	; 11
    1914:	01 c0       	rjmp	.+2      	; 0x1918 <_ZN12OrangutanLCD4sendEhhh+0x32>
    1916:	5a 98       	cbi	0x0b, 2	; 11
    1918:	84 b1       	in	r24, 0x04	; 4
    191a:	82 63       	ori	r24, 0x32	; 50
    191c:	84 b9       	out	0x04, r24	; 4
    191e:	57 9a       	sbi	0x0a, 7	; 10
    1920:	41 30       	cpi	r20, 0x01	; 1
    1922:	29 f0       	breq	.+10     	; 0x192e <_ZN12OrangutanLCD4sendEhhh+0x48>
    1924:	81 2f       	mov	r24, r17
    1926:	82 95       	swap	r24
    1928:	8f 70       	andi	r24, 0x0F	; 15
    192a:	0e 94 4e 0c 	call	0x189c	; 0x189c <_ZN12OrangutanLCD8sendDataEh>
    192e:	81 2f       	mov	r24, r17
    1930:	8f 70       	andi	r24, 0x0F	; 15
    1932:	0e 94 4e 0c 	call	0x189c	; 0x189c <_ZN12OrangutanLCD8sendDataEh>
    1936:	da b8       	out	0x0a, r13	; 10
    1938:	eb b8       	out	0x0b, r14	; 11
    193a:	f4 b8       	out	0x04, r15	; 4
    193c:	05 b9       	out	0x05, r16	; 5
    193e:	22 96       	adiw	r28, 0x02	; 2
    1940:	e7 e0       	ldi	r30, 0x07	; 7
    1942:	0c 94 5f 16 	jmp	0x2cbe	; 0x2cbe <__epilogue_restores__+0x16>

00001946 <_ZN12OrangutanLCD8send_cmdEh>:
    1946:	60 e0       	ldi	r22, 0x00	; 0
    1948:	42 e0       	ldi	r20, 0x02	; 2
    194a:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <_ZN12OrangutanLCD4sendEhhh>
    194e:	08 95       	ret

00001950 <_ZN12OrangutanLCD9send_dataEh>:
    1950:	61 e0       	ldi	r22, 0x01	; 1
    1952:	42 e0       	ldi	r20, 0x02	; 2
    1954:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <_ZN12OrangutanLCD4sendEhhh>
    1958:	08 95       	ret

0000195a <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    195a:	ef 92       	push	r14
    195c:	ff 92       	push	r15
    195e:	1f 93       	push	r17
    1960:	df 93       	push	r29
    1962:	cf 93       	push	r28
    1964:	0f 92       	push	r0
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	66 0f       	add	r22, r22
    196c:	66 0f       	add	r22, r22
    196e:	66 0f       	add	r22, r22
    1970:	48 2f       	mov	r20, r24
    1972:	59 2f       	mov	r21, r25
    1974:	7a 01       	movw	r14, r20
    1976:	10 e0       	ldi	r17, 0x00	; 0
    1978:	81 2f       	mov	r24, r17
    197a:	86 0f       	add	r24, r22
    197c:	80 64       	ori	r24, 0x40	; 64
    197e:	69 83       	std	Y+1, r22	; 0x01
    1980:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN12OrangutanLCD8send_cmdEh>
    1984:	f7 01       	movw	r30, r14
    1986:	84 91       	lpm	r24, Z
    1988:	0e 94 a8 0c 	call	0x1950	; 0x1950 <_ZN12OrangutanLCD9send_dataEh>
    198c:	1f 5f       	subi	r17, 0xFF	; 255
    198e:	08 94       	sec
    1990:	e1 1c       	adc	r14, r1
    1992:	f1 1c       	adc	r15, r1
    1994:	69 81       	ldd	r22, Y+1	; 0x01
    1996:	18 30       	cpi	r17, 0x08	; 8
    1998:	79 f7       	brne	.-34     	; 0x1978 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x1e>
    199a:	0f 90       	pop	r0
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	1f 91       	pop	r17
    19a2:	ff 90       	pop	r15
    19a4:	ef 90       	pop	r14
    19a6:	08 95       	ret

000019a8 <lcd_load_custom_character>:
    19a8:	0e 94 ad 0c 	call	0x195a	; 0x195a <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    19ac:	08 95       	ret

000019ae <print_character>:
    19ae:	0e 94 a8 0c 	call	0x1950	; 0x1950 <_ZN12OrangutanLCD9send_dataEh>
    19b2:	08 95       	ret

000019b4 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	41 e0       	ldi	r20, 0x01	; 1
    19b8:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <_ZN12OrangutanLCD4sendEhhh>
    19bc:	08 95       	ret

000019be <_ZN12OrangutanLCD5init2Ev>:
    19be:	80 e1       	ldi	r24, 0x10	; 16
    19c0:	97 e2       	ldi	r25, 0x27	; 39
    19c2:	a0 e0       	ldi	r26, 0x00	; 0
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	80 93 5d 01 	sts	0x015D, r24
    19ca:	90 93 5e 01 	sts	0x015E, r25
    19ce:	a0 93 5f 01 	sts	0x015F, r26
    19d2:	b0 93 60 01 	sts	0x0160, r27
    19d6:	52 9a       	sbi	0x0a, 2	; 10
    19d8:	20 9a       	sbi	0x04, 0	; 4
    19da:	54 9a       	sbi	0x0a, 4	; 10
    19dc:	8e e1       	ldi	r24, 0x1E	; 30
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <delay_ms>
    19e4:	83 e0       	ldi	r24, 0x03	; 3
    19e6:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    19ea:	86 e0       	ldi	r24, 0x06	; 6
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <delay_ms>
    19f2:	83 e0       	ldi	r24, 0x03	; 3
    19f4:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    19f8:	82 e0       	ldi	r24, 0x02	; 2
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <delay_ms>
    1a00:	83 e0       	ldi	r24, 0x03	; 3
    1a02:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1a06:	82 e0       	ldi	r24, 0x02	; 2
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <delay_ms>
    1a0e:	82 e0       	ldi	r24, 0x02	; 2
    1a10:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1a14:	82 e0       	ldi	r24, 0x02	; 2
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <delay_ms>
    1a1c:	88 e2       	ldi	r24, 0x28	; 40
    1a1e:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN12OrangutanLCD8send_cmdEh>
    1a22:	88 e0       	ldi	r24, 0x08	; 8
    1a24:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN12OrangutanLCD8send_cmdEh>
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN12OrangutanLCD8send_cmdEh>
    1a2e:	86 e0       	ldi	r24, 0x06	; 6
    1a30:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN12OrangutanLCD8send_cmdEh>
    1a34:	8c e0       	ldi	r24, 0x0C	; 12
    1a36:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN12OrangutanLCD8send_cmdEh>
    1a3a:	08 95       	ret

00001a3c <_ZN12OrangutanLCD4initEv>:
    1a3c:	80 91 61 01 	lds	r24, 0x0161
    1a40:	88 23       	and	r24, r24
    1a42:	29 f4       	brne	.+10     	; 0x1a4e <_ZN12OrangutanLCD4initEv+0x12>
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	80 93 61 01 	sts	0x0161, r24
    1a4a:	0e 94 df 0c 	call	0x19be	; 0x19be <_ZN12OrangutanLCD5init2Ev>
    1a4e:	08 95       	ret

00001a50 <_ZN12OrangutanLCD5clearEv>:
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN12OrangutanLCD8send_cmdEh>
    1a56:	80 91 59 01 	lds	r24, 0x0159
    1a5a:	90 91 5a 01 	lds	r25, 0x015A
    1a5e:	00 97       	sbiw	r24, 0x00	; 0
    1a60:	11 f1       	breq	.+68     	; 0x1aa6 <_ZN12OrangutanLCD5clearEv+0x56>
    1a62:	a0 e0       	ldi	r26, 0x00	; 0
    1a64:	b0 e2       	ldi	r27, 0x20	; 32
    1a66:	08 c0       	rjmp	.+16     	; 0x1a78 <_ZN12OrangutanLCD5clearEv+0x28>
    1a68:	e0 91 59 01 	lds	r30, 0x0159
    1a6c:	f0 91 5a 01 	lds	r31, 0x015A
    1a70:	e2 0f       	add	r30, r18
    1a72:	f3 1f       	adc	r31, r19
    1a74:	b0 83       	st	Z, r27
    1a76:	af 5f       	subi	r26, 0xFF	; 255
    1a78:	2a 2f       	mov	r18, r26
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	80 91 24 01 	lds	r24, 0x0124
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	60 91 25 01 	lds	r22, 0x0125
    1a88:	70 e0       	ldi	r23, 0x00	; 0
    1a8a:	86 9f       	mul	r24, r22
    1a8c:	a0 01       	movw	r20, r0
    1a8e:	87 9f       	mul	r24, r23
    1a90:	50 0d       	add	r21, r0
    1a92:	96 9f       	mul	r25, r22
    1a94:	50 0d       	add	r21, r0
    1a96:	11 24       	eor	r1, r1
    1a98:	24 17       	cp	r18, r20
    1a9a:	35 07       	cpc	r19, r21
    1a9c:	2c f3       	brlt	.-54     	; 0x1a68 <_ZN12OrangutanLCD5clearEv+0x18>
    1a9e:	10 92 5c 01 	sts	0x015C, r1
    1aa2:	10 92 5b 01 	sts	0x015B, r1
    1aa6:	08 95       	ret

00001aa8 <clear>:
    1aa8:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <_ZN12OrangutanLCD5clearEv>
    1aac:	08 95       	ret

00001aae <_ZN12OrangutanLCD5printEPKc>:
    1aae:	ef 92       	push	r14
    1ab0:	ff 92       	push	r15
    1ab2:	cf 93       	push	r28
    1ab4:	df 93       	push	r29
    1ab6:	e8 2e       	mov	r14, r24
    1ab8:	e7 01       	movw	r28, r14
    1aba:	7e 01       	movw	r14, r28
    1abc:	f9 2e       	mov	r15, r25
    1abe:	e7 01       	movw	r28, r14
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <_ZN12OrangutanLCD5printEPKc+0x18>
    1ac2:	0e 94 a8 0c 	call	0x1950	; 0x1950 <_ZN12OrangutanLCD9send_dataEh>
    1ac6:	89 91       	ld	r24, Y+
    1ac8:	88 23       	and	r24, r24
    1aca:	d9 f7       	brne	.-10     	; 0x1ac2 <_ZN12OrangutanLCD5printEPKc+0x14>
    1acc:	df 91       	pop	r29
    1ace:	cf 91       	pop	r28
    1ad0:	ff 90       	pop	r15
    1ad2:	ef 90       	pop	r14
    1ad4:	08 95       	ret

00001ad6 <print>:
    1ad6:	0e 94 57 0d 	call	0x1aae	; 0x1aae <_ZN12OrangutanLCD5printEPKc>
    1ada:	08 95       	ret

00001adc <_ZN12OrangutanLCD5printEm>:
    1adc:	aa e0       	ldi	r26, 0x0A	; 10
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e4 e7       	ldi	r30, 0x74	; 116
    1ae2:	fd e0       	ldi	r31, 0x0D	; 13
    1ae4:	0c 94 40 16 	jmp	0x2c80	; 0x2c80 <__prologue_saves__+0x10>
    1ae8:	9b 01       	movw	r18, r22
    1aea:	ac 01       	movw	r20, r24
    1aec:	1a e0       	ldi	r17, 0x0A	; 10
    1aee:	ea e0       	ldi	r30, 0x0A	; 10
    1af0:	ce 2e       	mov	r12, r30
    1af2:	d1 2c       	mov	r13, r1
    1af4:	e1 2c       	mov	r14, r1
    1af6:	f1 2c       	mov	r15, r1
    1af8:	5e 01       	movw	r10, r28
    1afa:	08 94       	sec
    1afc:	a1 1c       	adc	r10, r1
    1afe:	b1 1c       	adc	r11, r1
    1b00:	02 2f       	mov	r16, r18
    1b02:	ca 01       	movw	r24, r20
    1b04:	b9 01       	movw	r22, r18
    1b06:	a7 01       	movw	r20, r14
    1b08:	96 01       	movw	r18, r12
    1b0a:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <__udivmodsi4>
    1b0e:	11 50       	subi	r17, 0x01	; 1
    1b10:	f5 01       	movw	r30, r10
    1b12:	e1 0f       	add	r30, r17
    1b14:	f1 1d       	adc	r31, r1
    1b16:	00 5d       	subi	r16, 0xD0	; 208
    1b18:	92 2f       	mov	r25, r18
    1b1a:	99 0f       	add	r25, r25
    1b1c:	89 2f       	mov	r24, r25
    1b1e:	88 0f       	add	r24, r24
    1b20:	88 0f       	add	r24, r24
    1b22:	89 0f       	add	r24, r25
    1b24:	08 1b       	sub	r16, r24
    1b26:	00 83       	st	Z, r16
    1b28:	21 15       	cp	r18, r1
    1b2a:	31 05       	cpc	r19, r1
    1b2c:	41 05       	cpc	r20, r1
    1b2e:	51 05       	cpc	r21, r1
    1b30:	39 f7       	brne	.-50     	; 0x1b00 <_ZN12OrangutanLCD5printEm+0x24>
    1b32:	08 c0       	rjmp	.+16     	; 0x1b44 <_ZN12OrangutanLCD5printEm+0x68>
    1b34:	f6 01       	movw	r30, r12
    1b36:	e1 0f       	add	r30, r17
    1b38:	f1 1d       	adc	r31, r1
    1b3a:	80 81       	ld	r24, Z
    1b3c:	0e 94 a8 0c 	call	0x1950	; 0x1950 <_ZN12OrangutanLCD9send_dataEh>
    1b40:	1f 5f       	subi	r17, 0xFF	; 255
    1b42:	04 c0       	rjmp	.+8      	; 0x1b4c <_ZN12OrangutanLCD5printEm+0x70>
    1b44:	6e 01       	movw	r12, r28
    1b46:	08 94       	sec
    1b48:	c1 1c       	adc	r12, r1
    1b4a:	d1 1c       	adc	r13, r1
    1b4c:	1a 30       	cpi	r17, 0x0A	; 10
    1b4e:	90 f3       	brcs	.-28     	; 0x1b34 <_ZN12OrangutanLCD5printEm+0x58>
    1b50:	2a 96       	adiw	r28, 0x0a	; 10
    1b52:	ea e0       	ldi	r30, 0x0A	; 10
    1b54:	0c 94 5c 16 	jmp	0x2cb8	; 0x2cb8 <__epilogue_restores__+0x10>

00001b58 <_ZN12OrangutanLCD5printEl>:
    1b58:	ef 92       	push	r14
    1b5a:	ff 92       	push	r15
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	7b 01       	movw	r14, r22
    1b62:	8c 01       	movw	r16, r24
    1b64:	97 ff       	sbrs	r25, 7
    1b66:	0b c0       	rjmp	.+22     	; 0x1b7e <_ZN12OrangutanLCD5printEl+0x26>
    1b68:	10 95       	com	r17
    1b6a:	00 95       	com	r16
    1b6c:	f0 94       	com	r15
    1b6e:	e0 94       	com	r14
    1b70:	e1 1c       	adc	r14, r1
    1b72:	f1 1c       	adc	r15, r1
    1b74:	01 1d       	adc	r16, r1
    1b76:	11 1d       	adc	r17, r1
    1b78:	8d e2       	ldi	r24, 0x2D	; 45
    1b7a:	0e 94 a8 0c 	call	0x1950	; 0x1950 <_ZN12OrangutanLCD9send_dataEh>
    1b7e:	c8 01       	movw	r24, r16
    1b80:	b7 01       	movw	r22, r14
    1b82:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <_ZN12OrangutanLCD5printEm>
    1b86:	1f 91       	pop	r17
    1b88:	0f 91       	pop	r16
    1b8a:	ff 90       	pop	r15
    1b8c:	ef 90       	pop	r14
    1b8e:	08 95       	ret

00001b90 <print_long>:
    1b90:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <_ZN12OrangutanLCD5printEl>
    1b94:	08 95       	ret

00001b96 <_ZN12OrangutanLCD6gotoXYEhh>:
    1b96:	a5 e0       	ldi	r26, 0x05	; 5
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e1 ed       	ldi	r30, 0xD1	; 209
    1b9c:	fd e0       	ldi	r31, 0x0D	; 13
    1b9e:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__prologue_saves__+0x1e>
    1ba2:	18 2f       	mov	r17, r24
    1ba4:	80 e8       	ldi	r24, 0x80	; 128
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    1ba8:	80 ec       	ldi	r24, 0xC0	; 192
    1baa:	8a 83       	std	Y+2, r24	; 0x02
    1bac:	84 e9       	ldi	r24, 0x94	; 148
    1bae:	8b 83       	std	Y+3, r24	; 0x03
    1bb0:	84 ed       	ldi	r24, 0xD4	; 212
    1bb2:	8c 83       	std	Y+4, r24	; 0x04
    1bb4:	fe 01       	movw	r30, r28
    1bb6:	e6 0f       	add	r30, r22
    1bb8:	f1 1d       	adc	r31, r1
    1bba:	81 81       	ldd	r24, Z+1	; 0x01
    1bbc:	81 0f       	add	r24, r17
    1bbe:	6d 83       	std	Y+5, r22	; 0x05
    1bc0:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN12OrangutanLCD8send_cmdEh>
    1bc4:	10 93 5c 01 	sts	0x015C, r17
    1bc8:	6d 81       	ldd	r22, Y+5	; 0x05
    1bca:	60 93 5b 01 	sts	0x015B, r22
    1bce:	25 96       	adiw	r28, 0x05	; 5
    1bd0:	e3 e0       	ldi	r30, 0x03	; 3
    1bd2:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__epilogue_restores__+0x1e>

00001bd6 <lcd_goto_xy>:
    1bd6:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <_ZN12OrangutanLCD6gotoXYEhh>
    1bda:	08 95       	ret

00001bdc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    1bdc:	fc 01       	movw	r30, r24
    1bde:	11 82       	std	Z+1, r1	; 0x01
    1be0:	10 82       	st	Z, r1
    1be2:	13 82       	std	Z+3, r1	; 0x03
    1be4:	12 82       	std	Z+2, r1	; 0x02
    1be6:	15 82       	std	Z+5, r1	; 0x05
    1be8:	14 82       	std	Z+4, r1	; 0x04
    1bea:	16 82       	std	Z+6, r1	; 0x06
    1bec:	68 30       	cpi	r22, 0x08	; 8
    1bee:	68 f4       	brcc	.+26     	; 0x1c0a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    1bf0:	89 e2       	ldi	r24, 0x29	; 41
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	91 83       	std	Z+1, r25	; 0x01
    1bf6:	80 83       	st	Z, r24
    1bf8:	8b e2       	ldi	r24, 0x2B	; 43
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	93 83       	std	Z+3, r25	; 0x03
    1bfe:	82 83       	std	Z+2, r24	; 0x02
    1c00:	8a e2       	ldi	r24, 0x2A	; 42
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	95 83       	std	Z+5, r25	; 0x05
    1c06:	84 83       	std	Z+4, r24	; 0x04
    1c08:	11 c0       	rjmp	.+34     	; 0x1c2c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x50>
    1c0a:	6e 30       	cpi	r22, 0x0E	; 14
    1c0c:	c0 f4       	brcc	.+48     	; 0x1c3e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x62>
    1c0e:	83 e2       	ldi	r24, 0x23	; 35
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	91 83       	std	Z+1, r25	; 0x01
    1c14:	80 83       	st	Z, r24
    1c16:	85 e2       	ldi	r24, 0x25	; 37
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	93 83       	std	Z+3, r25	; 0x03
    1c1c:	82 83       	std	Z+2, r24	; 0x02
    1c1e:	84 e2       	ldi	r24, 0x24	; 36
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	95 83       	std	Z+5, r25	; 0x05
    1c24:	84 83       	std	Z+4, r24	; 0x04
    1c26:	70 e0       	ldi	r23, 0x00	; 0
    1c28:	68 50       	subi	r22, 0x08	; 8
    1c2a:	70 40       	sbci	r23, 0x00	; 0
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x5a>
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	6a 95       	dec	r22
    1c38:	e2 f7       	brpl	.-8      	; 0x1c32 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x56>
    1c3a:	86 83       	std	Z+6, r24	; 0x06
    1c3c:	08 95       	ret
    1c3e:	65 31       	cpi	r22, 0x15	; 21
    1c40:	b8 f4       	brcc	.+46     	; 0x1c70 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x94>
    1c42:	86 e2       	ldi	r24, 0x26	; 38
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	91 83       	std	Z+1, r25	; 0x01
    1c48:	80 83       	st	Z, r24
    1c4a:	88 e2       	ldi	r24, 0x28	; 40
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	93 83       	std	Z+3, r25	; 0x03
    1c50:	82 83       	std	Z+2, r24	; 0x02
    1c52:	87 e2       	ldi	r24, 0x27	; 39
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	95 83       	std	Z+5, r25	; 0x05
    1c58:	84 83       	std	Z+4, r24	; 0x04
    1c5a:	70 e0       	ldi	r23, 0x00	; 0
    1c5c:	6e 50       	subi	r22, 0x0E	; 14
    1c5e:	70 40       	sbci	r23, 0x00	; 0
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x8e>
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	6a 95       	dec	r22
    1c6c:	e2 f7       	brpl	.-8      	; 0x1c66 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x8a>
    1c6e:	86 83       	std	Z+6, r24	; 0x06
    1c70:	08 95       	ret

00001c72 <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh>:
    1c72:	fc 01       	movw	r30, r24
    1c74:	a4 81       	ldd	r26, Z+4	; 0x04
    1c76:	b5 81       	ldd	r27, Z+5	; 0x05
    1c78:	86 81       	ldd	r24, Z+6	; 0x06
    1c7a:	66 23       	and	r22, r22
    1c7c:	21 f0       	breq	.+8      	; 0x1c86 <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh+0x14>
    1c7e:	9c 91       	ld	r25, X
    1c80:	98 2b       	or	r25, r24
    1c82:	9c 93       	st	X, r25
    1c84:	08 95       	ret
    1c86:	9c 91       	ld	r25, X
    1c88:	80 95       	com	r24
    1c8a:	89 23       	and	r24, r25
    1c8c:	8c 93       	st	X, r24
    1c8e:	08 95       	ret

00001c90 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh>:
    1c90:	fc 01       	movw	r30, r24
    1c92:	6f 3f       	cpi	r22, 0xFF	; 255
    1c94:	31 f4       	brne	.+12     	; 0x1ca2 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x12>
    1c96:	a2 81       	ldd	r26, Z+2	; 0x02
    1c98:	b3 81       	ldd	r27, Z+3	; 0x03
    1c9a:	8c 91       	ld	r24, X
    1c9c:	96 81       	ldd	r25, Z+6	; 0x06
    1c9e:	89 27       	eor	r24, r25
    1ca0:	0c c0       	rjmp	.+24     	; 0x1cba <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x2a>
    1ca2:	a2 81       	ldd	r26, Z+2	; 0x02
    1ca4:	b3 81       	ldd	r27, Z+3	; 0x03
    1ca6:	86 81       	ldd	r24, Z+6	; 0x06
    1ca8:	66 23       	and	r22, r22
    1caa:	21 f0       	breq	.+8      	; 0x1cb4 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x24>
    1cac:	9c 91       	ld	r25, X
    1cae:	98 2b       	or	r25, r24
    1cb0:	9c 93       	st	X, r25
    1cb2:	08 95       	ret
    1cb4:	9c 91       	ld	r25, X
    1cb6:	80 95       	com	r24
    1cb8:	89 23       	and	r24, r25
    1cba:	8c 93       	st	X, r24
    1cbc:	08 95       	ret

00001cbe <_ZN16OrangutanDigital9setOutputEhh>:
    1cbe:	a7 e0       	ldi	r26, 0x07	; 7
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	e5 e6       	ldi	r30, 0x65	; 101
    1cc4:	fe e0       	ldi	r31, 0x0E	; 14
    1cc6:	0c 94 45 16 	jmp	0x2c8a	; 0x2c8a <__prologue_saves__+0x1a>
    1cca:	28 2f       	mov	r18, r24
    1ccc:	f6 2e       	mov	r15, r22
    1cce:	8e 01       	movw	r16, r28
    1cd0:	0f 5f       	subi	r16, 0xFF	; 255
    1cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd4:	c8 01       	movw	r24, r16
    1cd6:	62 2f       	mov	r22, r18
    1cd8:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1cdc:	c8 01       	movw	r24, r16
    1cde:	6f 2d       	mov	r22, r15
    1ce0:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh>
    1ce4:	c8 01       	movw	r24, r16
    1ce6:	61 e0       	ldi	r22, 0x01	; 1
    1ce8:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh>
    1cec:	27 96       	adiw	r28, 0x07	; 7
    1cee:	e5 e0       	ldi	r30, 0x05	; 5
    1cf0:	0c 94 61 16 	jmp	0x2cc2	; 0x2cc2 <__epilogue_restores__+0x1a>

00001cf4 <_ZN15OrangutanMotors5init2Ev>:
    1cf4:	e0 eb       	ldi	r30, 0xB0	; 176
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	83 ef       	ldi	r24, 0xF3	; 243
    1cfa:	80 83       	st	Z, r24
    1cfc:	80 81       	ld	r24, Z
    1cfe:	84 bd       	out	0x24, r24	; 36
    1d00:	e1 eb       	ldi	r30, 0xB1	; 177
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	82 e0       	ldi	r24, 0x02	; 2
    1d06:	80 83       	st	Z, r24
    1d08:	80 81       	ld	r24, Z
    1d0a:	85 bd       	out	0x25, r24	; 37
    1d0c:	e4 eb       	ldi	r30, 0xB4	; 180
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	10 82       	st	Z, r1
    1d12:	80 81       	ld	r24, Z
    1d14:	e3 eb       	ldi	r30, 0xB3	; 179
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 83       	st	Z, r24
    1d1a:	80 81       	ld	r24, Z
    1d1c:	88 bd       	out	0x28, r24	; 40
    1d1e:	88 b5       	in	r24, 0x28	; 40
    1d20:	87 bd       	out	0x27, r24	; 39
    1d22:	86 e0       	ldi	r24, 0x06	; 6
    1d24:	60 e0       	ldi	r22, 0x00	; 0
    1d26:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <_ZN16OrangutanDigital9setOutputEhh>
    1d2a:	85 e0       	ldi	r24, 0x05	; 5
    1d2c:	60 e0       	ldi	r22, 0x00	; 0
    1d2e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <_ZN16OrangutanDigital9setOutputEhh>
    1d32:	8b e0       	ldi	r24, 0x0B	; 11
    1d34:	60 e0       	ldi	r22, 0x00	; 0
    1d36:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <_ZN16OrangutanDigital9setOutputEhh>
    1d3a:	83 e0       	ldi	r24, 0x03	; 3
    1d3c:	60 e0       	ldi	r22, 0x00	; 0
    1d3e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <_ZN16OrangutanDigital9setOutputEhh>
    1d42:	08 95       	ret

00001d44 <_ZN15OrangutanMotors4initEv>:
    1d44:	80 91 62 01 	lds	r24, 0x0162
    1d48:	88 23       	and	r24, r24
    1d4a:	29 f4       	brne	.+10     	; 0x1d56 <_ZN15OrangutanMotors4initEv+0x12>
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	80 93 62 01 	sts	0x0162, r24
    1d52:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <_ZN15OrangutanMotors5init2Ev>
    1d56:	08 95       	ret

00001d58 <_ZN15OrangutanMotors10setM1SpeedEi>:
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
    1d5c:	ec 01       	movw	r28, r24
    1d5e:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <_ZN15OrangutanMotors4initEv>
    1d62:	d7 ff       	sbrs	r29, 7
    1d64:	05 c0       	rjmp	.+10     	; 0x1d70 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    1d66:	d0 95       	com	r29
    1d68:	c1 95       	neg	r28
    1d6a:	df 4f       	sbci	r29, 0xFF	; 255
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	01 c0       	rjmp	.+2      	; 0x1d72 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	cf 3f       	cpi	r28, 0xFF	; 255
    1d74:	d1 05       	cpc	r29, r1
    1d76:	19 f0       	breq	.+6      	; 0x1d7e <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1d78:	14 f0       	brlt	.+4      	; 0x1d7e <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1d7a:	cf ef       	ldi	r28, 0xFF	; 255
    1d7c:	d0 e0       	ldi	r29, 0x00	; 0
    1d7e:	88 23       	and	r24, r24
    1d80:	19 f0       	breq	.+6      	; 0x1d88 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    1d82:	18 bc       	out	0x28, r1	; 40
    1d84:	c7 bd       	out	0x27, r28	; 39
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    1d88:	c8 bd       	out	0x28, r28	; 40
    1d8a:	17 bc       	out	0x27, r1	; 39
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	08 95       	ret

00001d92 <_ZN15OrangutanMotors10setM2SpeedEi>:
    1d92:	cf 93       	push	r28
    1d94:	df 93       	push	r29
    1d96:	ec 01       	movw	r28, r24
    1d98:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <_ZN15OrangutanMotors4initEv>
    1d9c:	d7 ff       	sbrs	r29, 7
    1d9e:	05 c0       	rjmp	.+10     	; 0x1daa <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    1da0:	d0 95       	com	r29
    1da2:	c1 95       	neg	r28
    1da4:	df 4f       	sbci	r29, 0xFF	; 255
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	01 c0       	rjmp	.+2      	; 0x1dac <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	cf 3f       	cpi	r28, 0xFF	; 255
    1dae:	d1 05       	cpc	r29, r1
    1db0:	19 f0       	breq	.+6      	; 0x1db8 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1db2:	14 f0       	brlt	.+4      	; 0x1db8 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1db4:	cf ef       	ldi	r28, 0xFF	; 255
    1db6:	d0 e0       	ldi	r29, 0x00	; 0
    1db8:	88 23       	and	r24, r24
    1dba:	29 f0       	breq	.+10     	; 0x1dc6 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    1dbc:	10 92 b4 00 	sts	0x00B4, r1
    1dc0:	c0 93 b3 00 	sts	0x00B3, r28
    1dc4:	04 c0       	rjmp	.+8      	; 0x1dce <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    1dc6:	c0 93 b4 00 	sts	0x00B4, r28
    1dca:	10 92 b3 00 	sts	0x00B3, r1
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	08 95       	ret

00001dd4 <_ZN15OrangutanMotors9setSpeedsEii>:
    1dd4:	cf 93       	push	r28
    1dd6:	df 93       	push	r29
    1dd8:	eb 01       	movw	r28, r22
    1dda:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <_ZN15OrangutanMotors10setM1SpeedEi>
    1dde:	ce 01       	movw	r24, r28
    1de0:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <_ZN15OrangutanMotors10setM2SpeedEi>
    1de4:	df 91       	pop	r29
    1de6:	cf 91       	pop	r28
    1de8:	08 95       	ret

00001dea <set_motors>:
    1dea:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <_ZN15OrangutanMotors9setSpeedsEii>
    1dee:	08 95       	ret

00001df0 <_ZN20OrangutanPushbuttons5init2Ev>:
    1df0:	84 b1       	in	r24, 0x04	; 4
    1df2:	8d 7c       	andi	r24, 0xCD	; 205
    1df4:	84 b9       	out	0x04, r24	; 4
    1df6:	85 b1       	in	r24, 0x05	; 5
    1df8:	82 63       	ori	r24, 0x32	; 50
    1dfa:	85 b9       	out	0x05, r24	; 5
    1dfc:	85 e0       	ldi	r24, 0x05	; 5
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	6f 93       	push	r22
    1e02:	64 e0       	ldi	r22, 0x04	; 4
    1e04:	6a 95       	dec	r22
    1e06:	f1 f7       	brne	.-4      	; 0x1e04 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    1e08:	6f 91       	pop	r22
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	c9 f7       	brne	.-14     	; 0x1e00 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    1e0e:	08 95       	ret

00001e10 <_ZN20OrangutanPushbuttons4initEv>:
    1e10:	80 91 63 01 	lds	r24, 0x0163
    1e14:	88 23       	and	r24, r24
    1e16:	29 f4       	brne	.+10     	; 0x1e22 <_ZN20OrangutanPushbuttons4initEv+0x12>
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	80 93 63 01 	sts	0x0163, r24
    1e1e:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <_ZN20OrangutanPushbuttons5init2Ev>
    1e22:	08 95       	ret

00001e24 <_ZN20OrangutanPushbuttons12waitForPressEh>:
    1e24:	1f 93       	push	r17
    1e26:	cf 93       	push	r28
    1e28:	df 93       	push	r29
    1e2a:	18 2f       	mov	r17, r24
    1e2c:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN20OrangutanPushbuttons4initEv>
    1e30:	c1 2f       	mov	r28, r17
    1e32:	d0 e0       	ldi	r29, 0x00	; 0
    1e34:	23 b1       	in	r18, 0x03	; 3
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	20 95       	com	r18
    1e3a:	30 95       	com	r19
    1e3c:	2c 23       	and	r18, r28
    1e3e:	3d 23       	and	r19, r29
    1e40:	21 15       	cp	r18, r1
    1e42:	31 05       	cpc	r19, r1
    1e44:	b9 f3       	breq	.-18     	; 0x1e34 <_ZN20OrangutanPushbuttons12waitForPressEh+0x10>
    1e46:	8a e0       	ldi	r24, 0x0A	; 10
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <delay_ms>
    1e4e:	23 b1       	in	r18, 0x03	; 3
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	20 95       	com	r18
    1e54:	30 95       	com	r19
    1e56:	2c 23       	and	r18, r28
    1e58:	3d 23       	and	r19, r29
    1e5a:	21 15       	cp	r18, r1
    1e5c:	31 05       	cpc	r19, r1
    1e5e:	51 f3       	breq	.-44     	; 0x1e34 <_ZN20OrangutanPushbuttons12waitForPressEh+0x10>
    1e60:	83 b1       	in	r24, 0x03	; 3
    1e62:	80 95       	com	r24
    1e64:	81 23       	and	r24, r17
    1e66:	df 91       	pop	r29
    1e68:	cf 91       	pop	r28
    1e6a:	1f 91       	pop	r17
    1e6c:	08 95       	ret

00001e6e <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    1e6e:	1f 93       	push	r17
    1e70:	18 2f       	mov	r17, r24
    1e72:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN20OrangutanPushbuttons4initEv>
    1e76:	83 b1       	in	r24, 0x03	; 3
    1e78:	81 23       	and	r24, r17
    1e7a:	e9 f3       	breq	.-6      	; 0x1e76 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1e7c:	8a e0       	ldi	r24, 0x0A	; 10
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <delay_ms>
    1e84:	83 b1       	in	r24, 0x03	; 3
    1e86:	81 23       	and	r24, r17
    1e88:	b1 f3       	breq	.-20     	; 0x1e76 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1e8a:	83 b1       	in	r24, 0x03	; 3
    1e8c:	81 23       	and	r24, r17
    1e8e:	1f 91       	pop	r17
    1e90:	08 95       	ret

00001e92 <_ZN20OrangutanPushbuttons13waitForButtonEh>:
    1e92:	1f 93       	push	r17
    1e94:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <_ZN20OrangutanPushbuttons12waitForPressEh>
    1e98:	18 2f       	mov	r17, r24
    1e9a:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    1e9e:	81 2f       	mov	r24, r17
    1ea0:	1f 91       	pop	r17
    1ea2:	08 95       	ret

00001ea4 <wait_for_button>:
    1ea4:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN20OrangutanPushbuttons13waitForButtonEh>
    1ea8:	08 95       	ret

00001eaa <_ZN20OrangutanPushbuttons9isPressedEh>:
    1eaa:	a1 e0       	ldi	r26, 0x01	; 1
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	eb e5       	ldi	r30, 0x5B	; 91
    1eb0:	ff e0       	ldi	r31, 0x0F	; 15
    1eb2:	0c 94 48 16 	jmp	0x2c90	; 0x2c90 <__prologue_saves__+0x20>
    1eb6:	89 83       	std	Y+1, r24	; 0x01
    1eb8:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN20OrangutanPushbuttons4initEv>
    1ebc:	93 b1       	in	r25, 0x03	; 3
    1ebe:	90 95       	com	r25
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	89 23       	and	r24, r25
    1ec4:	21 96       	adiw	r28, 0x01	; 1
    1ec6:	e2 e0       	ldi	r30, 0x02	; 2
    1ec8:	0c 94 64 16 	jmp	0x2cc8	; 0x2cc8 <__epilogue_restores__+0x20>

00001ecc <button_is_pressed>:
    1ecc:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <_ZN20OrangutanPushbuttons9isPressedEh>
    1ed0:	08 95       	ret

00001ed2 <_ZN18OrangutanResources10getFreeRAMEv>:
    1ed2:	a2 e0       	ldi	r26, 0x02	; 2
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	ef e6       	ldi	r30, 0x6F	; 111
    1ed8:	ff e0       	ldi	r31, 0x0F	; 15
    1eda:	0c 94 48 16 	jmp	0x2c90	; 0x2c90 <__prologue_saves__+0x20>
    1ede:	80 91 d2 01 	lds	r24, 0x01D2
    1ee2:	90 91 d3 01 	lds	r25, 0x01D3
    1ee6:	9e 01       	movw	r18, r28
    1ee8:	2f 5f       	subi	r18, 0xFF	; 255
    1eea:	3f 4f       	sbci	r19, 0xFF	; 255
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	19 f4       	brne	.+6      	; 0x1ef6 <_ZN18OrangutanResources10getFreeRAMEv+0x24>
    1ef0:	26 5d       	subi	r18, 0xD6	; 214
    1ef2:	31 40       	sbci	r19, 0x01	; 1
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <_ZN18OrangutanResources10getFreeRAMEv+0x28>
    1ef6:	28 1b       	sub	r18, r24
    1ef8:	39 0b       	sbc	r19, r25
    1efa:	3a 83       	std	Y+2, r19	; 0x02
    1efc:	29 83       	std	Y+1, r18	; 0x01
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	9a 81       	ldd	r25, Y+2	; 0x02
    1f02:	22 96       	adiw	r28, 0x02	; 2
    1f04:	e2 e0       	ldi	r30, 0x02	; 2
    1f06:	0c 94 64 16 	jmp	0x2cc8	; 0x2cc8 <__epilogue_restores__+0x20>

00001f0a <get_free_ram>:
    1f0a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <_ZN18OrangutanResources10getFreeRAMEv>
    1f0e:	08 95       	ret

00001f10 <_ZN13OrangutanTime17delayMicrosecondsEj>:
    1f10:	6f 93       	push	r22
    1f12:	64 e0       	ldi	r22, 0x04	; 4
    1f14:	6a 95       	dec	r22
    1f16:	f1 f7       	brne	.-4      	; 0x1f14 <_ZN13OrangutanTime17delayMicrosecondsEj+0x4>
    1f18:	6f 91       	pop	r22
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	c9 f7       	brne	.-14     	; 0x1f10 <_ZN13OrangutanTime17delayMicrosecondsEj>
    1f1e:	08 95       	ret

00001f20 <__vector_9>:
    1f20:	2f 92       	push	r2
    1f22:	8f 93       	push	r24
    1f24:	9f 93       	push	r25
    1f26:	2f b6       	in	r2, 0x3f	; 63
    1f28:	80 91 71 01 	lds	r24, 0x0171
    1f2c:	90 91 72 01 	lds	r25, 0x0172
    1f30:	01 96       	adiw	r24, 0x01	; 1
    1f32:	80 93 71 01 	sts	0x0171, r24
    1f36:	90 93 72 01 	sts	0x0172, r25
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	80 91 73 01 	lds	r24, 0x0173
    1f40:	89 1f       	adc	r24, r25
    1f42:	80 93 73 01 	sts	0x0173, r24
    1f46:	90 91 79 01 	lds	r25, 0x0179
    1f4a:	9c 5f       	subi	r25, 0xFC	; 252
    1f4c:	90 93 79 01 	sts	0x0179, r25
    1f50:	80 91 78 01 	lds	r24, 0x0178
    1f54:	80 51       	subi	r24, 0x10	; 16
    1f56:	97 42       	sbci	r25, 0x27	; 39
    1f58:	c0 f0       	brcs	.+48     	; 0x1f8a <end>
    1f5a:	90 93 79 01 	sts	0x0179, r25
    1f5e:	80 93 78 01 	sts	0x0178, r24
    1f62:	80 91 74 01 	lds	r24, 0x0174
    1f66:	90 91 75 01 	lds	r25, 0x0175
    1f6a:	01 96       	adiw	r24, 0x01	; 1
    1f6c:	80 93 74 01 	sts	0x0174, r24
    1f70:	90 93 75 01 	sts	0x0175, r25
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	80 91 76 01 	lds	r24, 0x0176
    1f7a:	89 1f       	adc	r24, r25
    1f7c:	80 93 76 01 	sts	0x0176, r24
    1f80:	80 91 77 01 	lds	r24, 0x0177
    1f84:	89 1f       	adc	r24, r25
    1f86:	80 93 77 01 	sts	0x0177, r24

00001f8a <end>:
    1f8a:	2f be       	out	0x3f, r2	; 63
    1f8c:	9f 91       	pop	r25
    1f8e:	8f 91       	pop	r24
    1f90:	2f 90       	pop	r2
    1f92:	18 95       	reti

00001f94 <_ZN13OrangutanTime17delayMillisecondsEj>:
    1f94:	cf 93       	push	r28
    1f96:	df 93       	push	r29
    1f98:	ec 01       	movw	r28, r24
    1f9a:	05 c0       	rjmp	.+10     	; 0x1fa6 <_ZN13OrangutanTime17delayMillisecondsEj+0x12>
    1f9c:	88 ee       	ldi	r24, 0xE8	; 232
    1f9e:	93 e0       	ldi	r25, 0x03	; 3
    1fa0:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <_ZN13OrangutanTime17delayMicrosecondsEj>
    1fa4:	21 97       	sbiw	r28, 0x01	; 1
    1fa6:	20 97       	sbiw	r28, 0x00	; 0
    1fa8:	c9 f7       	brne	.-14     	; 0x1f9c <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    1faa:	df 91       	pop	r29
    1fac:	cf 91       	pop	r28
    1fae:	08 95       	ret

00001fb0 <delay_ms>:
    1fb0:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <_ZN13OrangutanTime17delayMillisecondsEj>
    1fb4:	08 95       	ret

00001fb6 <_ZN13OrangutanTime5init2Ev>:
    1fb6:	e0 e7       	ldi	r30, 0x70	; 112
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	8e 7f       	andi	r24, 0xFE	; 254
    1fbe:	80 83       	st	Z, r24
    1fc0:	a0 eb       	ldi	r26, 0xB0	; 176
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	8c 91       	ld	r24, X
    1fc6:	83 60       	ori	r24, 0x03	; 3
    1fc8:	8c 93       	st	X, r24
    1fca:	a1 eb       	ldi	r26, 0xB1	; 177
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	8c 91       	ld	r24, X
    1fd0:	80 7f       	andi	r24, 0xF0	; 240
    1fd2:	8c 93       	st	X, r24
    1fd4:	8c 91       	ld	r24, X
    1fd6:	82 60       	ori	r24, 0x02	; 2
    1fd8:	8c 93       	st	X, r24
    1fda:	b8 9a       	sbi	0x17, 0	; 23
    1fdc:	80 81       	ld	r24, Z
    1fde:	81 60       	ori	r24, 0x01	; 1
    1fe0:	80 83       	st	Z, r24
    1fe2:	78 94       	sei
    1fe4:	08 95       	ret

00001fe6 <_ZN13OrangutanTime4initEv>:
    1fe6:	80 91 7a 01 	lds	r24, 0x017A
    1fea:	88 23       	and	r24, r24
    1fec:	29 f4       	brne	.+10     	; 0x1ff8 <_ZN13OrangutanTime4initEv+0x12>
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	80 93 7a 01 	sts	0x017A, r24
    1ff4:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <_ZN13OrangutanTime5init2Ev>
    1ff8:	08 95       	ret

00001ffa <_ZN13OrangutanTime2msEv>:
    1ffa:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <_ZN13OrangutanTime4initEv>
    1ffe:	e0 e7       	ldi	r30, 0x70	; 112
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	8e 7f       	andi	r24, 0xFE	; 254
    2006:	80 83       	st	Z, r24
    2008:	20 91 74 01 	lds	r18, 0x0174
    200c:	30 91 75 01 	lds	r19, 0x0175
    2010:	40 91 76 01 	lds	r20, 0x0176
    2014:	50 91 77 01 	lds	r21, 0x0177
    2018:	80 81       	ld	r24, Z
    201a:	81 60       	ori	r24, 0x01	; 1
    201c:	80 83       	st	Z, r24
    201e:	b9 01       	movw	r22, r18
    2020:	ca 01       	movw	r24, r20
    2022:	08 95       	ret

00002024 <get_ms>:
    2024:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <_ZN13OrangutanTime2msEv>
    2028:	08 95       	ret

0000202a <_ZN13OrangutanTime5resetEv>:
    202a:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <_ZN13OrangutanTime4initEv>
    202e:	e0 e7       	ldi	r30, 0x70	; 112
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	8e 7f       	andi	r24, 0xFE	; 254
    2036:	80 83       	st	Z, r24
    2038:	10 92 74 01 	sts	0x0174, r1
    203c:	10 92 75 01 	sts	0x0175, r1
    2040:	10 92 76 01 	sts	0x0176, r1
    2044:	10 92 77 01 	sts	0x0177, r1
    2048:	10 92 79 01 	sts	0x0179, r1
    204c:	10 92 78 01 	sts	0x0178, r1
    2050:	80 81       	ld	r24, Z
    2052:	81 60       	ori	r24, 0x01	; 1
    2054:	80 83       	st	Z, r24
    2056:	08 95       	ret

00002058 <calibrate_line_sensors>:
    2058:	68 2f       	mov	r22, r24
    205a:	8b e7       	ldi	r24, 0x7B	; 123
    205c:	91 e0       	ldi	r25, 0x01	; 1
    205e:	0e 94 66 15 	call	0x2acc	; 0x2acc <_ZN16PololuQTRSensors9calibrateEh>
    2062:	08 95       	ret

00002064 <read_line>:
    2064:	9c 01       	movw	r18, r24
    2066:	46 2f       	mov	r20, r22
    2068:	8b e7       	ldi	r24, 0x7B	; 123
    206a:	91 e0       	ldi	r25, 0x01	; 1
    206c:	b9 01       	movw	r22, r18
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	0e 94 c4 13 	call	0x2788	; 0x2788 <_ZN16PololuQTRSensors8readLineEPjhh>
    2074:	08 95       	ret

00002076 <get_line_sensors_calibrated_minimum_on>:
    2076:	80 91 7b 01 	lds	r24, 0x017B
    207a:	90 91 7c 01 	lds	r25, 0x017C
    207e:	08 95       	ret

00002080 <get_line_sensors_calibrated_maximum_on>:
    2080:	80 91 7d 01 	lds	r24, 0x017D
    2084:	90 91 7e 01 	lds	r25, 0x017E
    2088:	08 95       	ret

0000208a <_ZN9Pololu3pi4initEjh>:
    208a:	0f 93       	push	r16
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	00 d0       	rcall	.+0      	; 0x2092 <_ZN9Pololu3pi4initEjh+0x8>
    2092:	00 d0       	rcall	.+0      	; 0x2094 <_ZN9Pololu3pi4initEjh+0xa>
    2094:	0f 92       	push	r0
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	9c 01       	movw	r18, r24
    209c:	96 2f       	mov	r25, r22
    209e:	de 01       	movw	r26, r28
    20a0:	11 96       	adiw	r26, 0x01	; 1
    20a2:	e6 e2       	ldi	r30, 0x26	; 38
    20a4:	f1 e0       	ldi	r31, 0x01	; 1
    20a6:	85 e0       	ldi	r24, 0x05	; 5
    20a8:	01 90       	ld	r0, Z+
    20aa:	0d 92       	st	X+, r0
    20ac:	81 50       	subi	r24, 0x01	; 1
    20ae:	e1 f7       	brne	.-8      	; 0x20a8 <_ZN9Pololu3pi4initEjh+0x1e>
    20b0:	be 01       	movw	r22, r28
    20b2:	6f 5f       	subi	r22, 0xFF	; 255
    20b4:	7f 4f       	sbci	r23, 0xFF	; 255
    20b6:	99 23       	and	r25, r25
    20b8:	29 f0       	breq	.+10     	; 0x20c4 <_ZN9Pololu3pi4initEjh+0x3a>
    20ba:	8b e7       	ldi	r24, 0x7B	; 123
    20bc:	91 e0       	ldi	r25, 0x01	; 1
    20be:	45 e0       	ldi	r20, 0x05	; 5
    20c0:	0f ef       	ldi	r16, 0xFF	; 255
    20c2:	04 c0       	rjmp	.+8      	; 0x20cc <_ZN9Pololu3pi4initEjh+0x42>
    20c4:	8b e7       	ldi	r24, 0x7B	; 123
    20c6:	91 e0       	ldi	r25, 0x01	; 1
    20c8:	45 e0       	ldi	r20, 0x05	; 5
    20ca:	03 e1       	ldi	r16, 0x13	; 19
    20cc:	0e 94 df 10 	call	0x21be	; 0x21be <_ZN18PololuQTRSensorsRC4initEPhhjh>
    20d0:	8b e7       	ldi	r24, 0x7B	; 123
    20d2:	91 e0       	ldi	r25, 0x01	; 1
    20d4:	0e 94 b6 10 	call	0x216c	; 0x216c <_ZN16PololuQTRSensors11emittersOffEv>
    20d8:	0e 94 15 10 	call	0x202a	; 0x202a <_ZN13OrangutanTime5resetEv>
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	cf 91       	pop	r28
    20e8:	df 91       	pop	r29
    20ea:	0f 91       	pop	r16
    20ec:	08 95       	ret

000020ee <pololu_3pi_init>:
    20ee:	60 e0       	ldi	r22, 0x00	; 0
    20f0:	0e 94 45 10 	call	0x208a	; 0x208a <_ZN9Pololu3pi4initEjh>
    20f4:	08 95       	ret

000020f6 <_GLOBAL__I_pololu_3pi_init>:
    20f6:	08 95       	ret

000020f8 <_GLOBAL__D_pololu_3pi_init>:
    20f8:	8b e7       	ldi	r24, 0x7B	; 123
    20fa:	91 e0       	ldi	r25, 0x01	; 1
    20fc:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <_ZN16PololuQTRSensorsD1Ev>
    2100:	08 95       	ret

00002102 <delayMicroseconds>:
    2102:	6f 93       	push	r22
    2104:	64 e0       	ldi	r22, 0x04	; 4
    2106:	6a 95       	dec	r22
    2108:	f1 f7       	brne	.-4      	; 0x2106 <delayMicroseconds+0x4>
    210a:	6f 91       	pop	r22
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	c9 f7       	brne	.-14     	; 0x2102 <delayMicroseconds>
    2110:	08 95       	ret

00002112 <_ZN16PololuQTRSensors4initEhhh>:
    2112:	a7 e0       	ldi	r26, 0x07	; 7
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	ef e8       	ldi	r30, 0x8F	; 143
    2118:	f0 e1       	ldi	r31, 0x10	; 16
    211a:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <__prologue_saves__+0x1c>
    211e:	8c 01       	movw	r16, r24
    2120:	fc 01       	movw	r30, r24
    2122:	11 82       	std	Z+1, r1	; 0x01
    2124:	10 82       	st	Z, r1
    2126:	13 82       	std	Z+3, r1	; 0x03
    2128:	12 82       	std	Z+2, r1	; 0x02
    212a:	15 82       	std	Z+5, r1	; 0x05
    212c:	14 82       	std	Z+4, r1	; 0x04
    212e:	17 82       	std	Z+7, r1	; 0x07
    2130:	16 82       	std	Z+6, r1	; 0x06
    2132:	61 31       	cpi	r22, 0x11	; 17
    2134:	18 f0       	brcs	.+6      	; 0x213c <_ZN16PololuQTRSensors4initEhhh+0x2a>
    2136:	80 e1       	ldi	r24, 0x10	; 16
    2138:	80 87       	std	Z+8, r24	; 0x08
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    213c:	fc 01       	movw	r30, r24
    213e:	60 87       	std	Z+8, r22	; 0x08
    2140:	f8 01       	movw	r30, r16
    2142:	20 8b       	std	Z+16, r18	; 0x10
    2144:	ce 01       	movw	r24, r28
    2146:	01 96       	adiw	r24, 0x01	; 1
    2148:	64 2f       	mov	r22, r20
    214a:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    214e:	8f 81       	ldd	r24, Y+7	; 0x07
    2150:	f8 01       	movw	r30, r16
    2152:	81 87       	std	Z+9, r24	; 0x09
    2154:	8b 81       	ldd	r24, Y+3	; 0x03
    2156:	9c 81       	ldd	r25, Y+4	; 0x04
    2158:	93 87       	std	Z+11, r25	; 0x0b
    215a:	82 87       	std	Z+10, r24	; 0x0a
    215c:	8d 81       	ldd	r24, Y+5	; 0x05
    215e:	9e 81       	ldd	r25, Y+6	; 0x06
    2160:	95 87       	std	Z+13, r25	; 0x0d
    2162:	84 87       	std	Z+12, r24	; 0x0c
    2164:	27 96       	adiw	r28, 0x07	; 7
    2166:	e4 e0       	ldi	r30, 0x04	; 4
    2168:	0c 94 62 16 	jmp	0x2cc4	; 0x2cc4 <__epilogue_restores__+0x1c>

0000216c <_ZN16PololuQTRSensors11emittersOffEv>:
    216c:	fc 01       	movw	r30, r24
    216e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2170:	b5 85       	ldd	r27, Z+13	; 0x0d
    2172:	10 97       	sbiw	r26, 0x00	; 0
    2174:	79 f0       	breq	.+30     	; 0x2194 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    2176:	8c 91       	ld	r24, X
    2178:	91 85       	ldd	r25, Z+9	; 0x09
    217a:	89 2b       	or	r24, r25
    217c:	8c 93       	st	X, r24
    217e:	a2 85       	ldd	r26, Z+10	; 0x0a
    2180:	b3 85       	ldd	r27, Z+11	; 0x0b
    2182:	9c 91       	ld	r25, X
    2184:	81 85       	ldd	r24, Z+9	; 0x09
    2186:	80 95       	com	r24
    2188:	89 23       	and	r24, r25
    218a:	8c 93       	st	X, r24
    218c:	88 ec       	ldi	r24, 0xC8	; 200
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	0e 94 81 10 	call	0x2102	; 0x2102 <delayMicroseconds>
    2194:	08 95       	ret

00002196 <_ZN16PololuQTRSensors10emittersOnEv>:
    2196:	fc 01       	movw	r30, r24
    2198:	a4 85       	ldd	r26, Z+12	; 0x0c
    219a:	b5 85       	ldd	r27, Z+13	; 0x0d
    219c:	10 97       	sbiw	r26, 0x00	; 0
    219e:	71 f0       	breq	.+28     	; 0x21bc <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    21a0:	8c 91       	ld	r24, X
    21a2:	91 85       	ldd	r25, Z+9	; 0x09
    21a4:	89 2b       	or	r24, r25
    21a6:	8c 93       	st	X, r24
    21a8:	a2 85       	ldd	r26, Z+10	; 0x0a
    21aa:	b3 85       	ldd	r27, Z+11	; 0x0b
    21ac:	8c 91       	ld	r24, X
    21ae:	91 85       	ldd	r25, Z+9	; 0x09
    21b0:	89 2b       	or	r24, r25
    21b2:	8c 93       	st	X, r24
    21b4:	88 ec       	ldi	r24, 0xC8	; 200
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	0e 94 81 10 	call	0x2102	; 0x2102 <delayMicroseconds>
    21bc:	08 95       	ret

000021be <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    21be:	a7 e0       	ldi	r26, 0x07	; 7
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	e5 ee       	ldi	r30, 0xE5	; 229
    21c4:	f0 e1       	ldi	r31, 0x10	; 16
    21c6:	0c 94 38 16 	jmp	0x2c70	; 0x2c70 <__prologue_saves__>
    21ca:	7c 01       	movw	r14, r24
    21cc:	1b 01       	movw	r2, r22
    21ce:	64 2f       	mov	r22, r20
    21d0:	39 01       	movw	r6, r18
    21d2:	40 2f       	mov	r20, r16
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	0e 94 89 10 	call	0x2112	; 0x2112 <_ZN16PololuQTRSensors4initEhhh>
    21da:	97 01       	movw	r18, r14
    21dc:	2f 5b       	subi	r18, 0xBF	; 191
    21de:	3f 4f       	sbci	r19, 0xFF	; 255
    21e0:	f9 01       	movw	r30, r18
    21e2:	10 82       	st	Z, r1
    21e4:	d7 01       	movw	r26, r14
    21e6:	ae 5b       	subi	r26, 0xBE	; 190
    21e8:	bf 4f       	sbci	r27, 0xFF	; 255
    21ea:	1c 92       	st	X, r1
    21ec:	c7 01       	movw	r24, r14
    21ee:	8d 5b       	subi	r24, 0xBD	; 189
    21f0:	9f 4f       	sbci	r25, 0xFF	; 255
    21f2:	fc 01       	movw	r30, r24
    21f4:	10 82       	st	Z, r1
    21f6:	f7 01       	movw	r30, r14
    21f8:	77 86       	std	Z+15, r7	; 0x0f
    21fa:	66 86       	std	Z+14, r6	; 0x0e
    21fc:	66 24       	eor	r6, r6
    21fe:	2e 01       	movw	r4, r28
    2200:	08 94       	sec
    2202:	41 1c       	adc	r4, r1
    2204:	51 1c       	adc	r5, r1
    2206:	6c 01       	movw	r12, r24
    2208:	5d 01       	movw	r10, r26
    220a:	49 01       	movw	r8, r18
    220c:	29 c0       	rjmp	.+82     	; 0x2260 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    220e:	06 2d       	mov	r16, r6
    2210:	10 e0       	ldi	r17, 0x00	; 0
    2212:	f1 01       	movw	r30, r2
    2214:	e0 0f       	add	r30, r16
    2216:	f1 1f       	adc	r31, r17
    2218:	c2 01       	movw	r24, r4
    221a:	60 81       	ld	r22, Z
    221c:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2220:	2f 81       	ldd	r18, Y+7	; 0x07
    2222:	f7 01       	movw	r30, r14
    2224:	e0 0f       	add	r30, r16
    2226:	f1 1f       	adc	r31, r17
    2228:	21 8b       	std	Z+17, r18	; 0x11
    222a:	89 81       	ldd	r24, Y+1	; 0x01
    222c:	9a 81       	ldd	r25, Y+2	; 0x02
    222e:	f8 01       	movw	r30, r16
    2230:	ee 0f       	add	r30, r30
    2232:	ff 1f       	adc	r31, r31
    2234:	ee 0d       	add	r30, r14
    2236:	ff 1d       	adc	r31, r15
    2238:	92 a3       	std	Z+34, r25	; 0x22
    223a:	81 a3       	std	Z+33, r24	; 0x21
    223c:	83 32       	cpi	r24, 0x23	; 35
    223e:	91 05       	cpc	r25, r1
    2240:	11 f4       	brne	.+4      	; 0x2246 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    2242:	f4 01       	movw	r30, r8
    2244:	09 c0       	rjmp	.+18     	; 0x2258 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9a>
    2246:	86 32       	cpi	r24, 0x26	; 38
    2248:	91 05       	cpc	r25, r1
    224a:	11 f4       	brne	.+4      	; 0x2250 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    224c:	f5 01       	movw	r30, r10
    224e:	04 c0       	rjmp	.+8      	; 0x2258 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9a>
    2250:	89 32       	cpi	r24, 0x29	; 41
    2252:	91 05       	cpc	r25, r1
    2254:	21 f4       	brne	.+8      	; 0x225e <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa0>
    2256:	f6 01       	movw	r30, r12
    2258:	80 81       	ld	r24, Z
    225a:	82 2b       	or	r24, r18
    225c:	80 83       	st	Z, r24
    225e:	63 94       	inc	r6
    2260:	f7 01       	movw	r30, r14
    2262:	80 85       	ldd	r24, Z+8	; 0x08
    2264:	68 16       	cp	r6, r24
    2266:	98 f2       	brcs	.-90     	; 0x220e <_ZN18PololuQTRSensorsRC4initEPhhjh+0x50>
    2268:	27 96       	adiw	r28, 0x07	; 7
    226a:	e2 e1       	ldi	r30, 0x12	; 18
    226c:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <__epilogue_restores__>

00002270 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    2270:	a0 e0       	ldi	r26, 0x00	; 0
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	ee e3       	ldi	r30, 0x3E	; 62
    2276:	f1 e1       	ldi	r31, 0x11	; 17
    2278:	0c 94 3d 16 	jmp	0x2c7a	; 0x2c7a <__prologue_saves__+0xa>
    227c:	ec 01       	movw	r28, r24
    227e:	5b 01       	movw	r10, r22
    2280:	fc 01       	movw	r30, r24
    2282:	ef 5b       	subi	r30, 0xBF	; 191
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	90 80       	ld	r9, Z
    2288:	fc 01       	movw	r30, r24
    228a:	ee 5b       	subi	r30, 0xBE	; 190
    228c:	ff 4f       	sbci	r31, 0xFF	; 255
    228e:	80 80       	ld	r8, Z
    2290:	fc 01       	movw	r30, r24
    2292:	ed 5b       	subi	r30, 0xBD	; 189
    2294:	ff 4f       	sbci	r31, 0xFF	; 255
    2296:	70 80       	ld	r7, Z
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	09 c0       	rjmp	.+18     	; 0x22ae <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x3e>
    229c:	e8 2f       	mov	r30, r24
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	ee 0f       	add	r30, r30
    22a2:	ff 1f       	adc	r31, r31
    22a4:	ea 0d       	add	r30, r10
    22a6:	fb 1d       	adc	r31, r11
    22a8:	11 82       	std	Z+1, r1	; 0x01
    22aa:	10 82       	st	Z, r1
    22ac:	8f 5f       	subi	r24, 0xFF	; 255
    22ae:	98 85       	ldd	r25, Y+8	; 0x08
    22b0:	89 17       	cp	r24, r25
    22b2:	a0 f3       	brcs	.-24     	; 0x229c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x2c>
    22b4:	84 b1       	in	r24, 0x04	; 4
    22b6:	21 e4       	ldi	r18, 0x41	; 65
    22b8:	e2 2e       	mov	r14, r18
    22ba:	f1 2c       	mov	r15, r1
    22bc:	ec 0e       	add	r14, r28
    22be:	fd 1e       	adc	r15, r29
    22c0:	d7 01       	movw	r26, r14
    22c2:	9c 91       	ld	r25, X
    22c4:	89 2b       	or	r24, r25
    22c6:	84 b9       	out	0x04, r24	; 4
    22c8:	87 b1       	in	r24, 0x07	; 7
    22ca:	8e 01       	movw	r16, r28
    22cc:	0e 5b       	subi	r16, 0xBE	; 190
    22ce:	1f 4f       	sbci	r17, 0xFF	; 255
    22d0:	f8 01       	movw	r30, r16
    22d2:	90 81       	ld	r25, Z
    22d4:	89 2b       	or	r24, r25
    22d6:	87 b9       	out	0x07, r24	; 7
    22d8:	8a b1       	in	r24, 0x0a	; 10
    22da:	93 e4       	ldi	r25, 0x43	; 67
    22dc:	c9 2e       	mov	r12, r25
    22de:	d1 2c       	mov	r13, r1
    22e0:	cc 0e       	add	r12, r28
    22e2:	dd 1e       	adc	r13, r29
    22e4:	d6 01       	movw	r26, r12
    22e6:	9c 91       	ld	r25, X
    22e8:	89 2b       	or	r24, r25
    22ea:	8a b9       	out	0x0a, r24	; 10
    22ec:	85 b1       	in	r24, 0x05	; 5
    22ee:	f7 01       	movw	r30, r14
    22f0:	90 81       	ld	r25, Z
    22f2:	89 2b       	or	r24, r25
    22f4:	85 b9       	out	0x05, r24	; 5
    22f6:	88 b1       	in	r24, 0x08	; 8
    22f8:	d8 01       	movw	r26, r16
    22fa:	9c 91       	ld	r25, X
    22fc:	89 2b       	or	r24, r25
    22fe:	88 b9       	out	0x08, r24	; 8
    2300:	8b b1       	in	r24, 0x0b	; 11
    2302:	f6 01       	movw	r30, r12
    2304:	90 81       	ld	r25, Z
    2306:	89 2b       	or	r24, r25
    2308:	8b b9       	out	0x0b, r24	; 11
    230a:	8a e0       	ldi	r24, 0x0A	; 10
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	0e 94 81 10 	call	0x2102	; 0x2102 <delayMicroseconds>
    2312:	94 b1       	in	r25, 0x04	; 4
    2314:	d7 01       	movw	r26, r14
    2316:	8c 91       	ld	r24, X
    2318:	80 95       	com	r24
    231a:	89 23       	and	r24, r25
    231c:	84 b9       	out	0x04, r24	; 4
    231e:	97 b1       	in	r25, 0x07	; 7
    2320:	f8 01       	movw	r30, r16
    2322:	80 81       	ld	r24, Z
    2324:	80 95       	com	r24
    2326:	89 23       	and	r24, r25
    2328:	87 b9       	out	0x07, r24	; 7
    232a:	9a b1       	in	r25, 0x0a	; 10
    232c:	d6 01       	movw	r26, r12
    232e:	8c 91       	ld	r24, X
    2330:	80 95       	com	r24
    2332:	89 23       	and	r24, r25
    2334:	8a b9       	out	0x0a, r24	; 10
    2336:	95 b1       	in	r25, 0x05	; 5
    2338:	f7 01       	movw	r30, r14
    233a:	80 81       	ld	r24, Z
    233c:	80 95       	com	r24
    233e:	89 23       	and	r24, r25
    2340:	85 b9       	out	0x05, r24	; 5
    2342:	98 b1       	in	r25, 0x08	; 8
    2344:	d8 01       	movw	r26, r16
    2346:	8c 91       	ld	r24, X
    2348:	80 95       	com	r24
    234a:	89 23       	and	r24, r25
    234c:	88 b9       	out	0x08, r24	; 8
    234e:	9b b1       	in	r25, 0x0b	; 11
    2350:	f6 01       	movw	r30, r12
    2352:	80 81       	ld	r24, Z
    2354:	80 95       	com	r24
    2356:	89 23       	and	r24, r25
    2358:	8b b9       	out	0x0b, r24	; 11
    235a:	c0 90 b0 00 	lds	r12, 0x00B0
    235e:	e0 90 b1 00 	lds	r14, 0x00B1
    2362:	80 91 b0 00 	lds	r24, 0x00B0
    2366:	83 60       	ori	r24, 0x03	; 3
    2368:	80 93 b0 00 	sts	0x00B0, r24
    236c:	82 e0       	ldi	r24, 0x02	; 2
    236e:	80 93 b1 00 	sts	0x00B1, r24
    2372:	00 91 b2 00 	lds	r16, 0x00B2
    2376:	80 e0       	ldi	r24, 0x00	; 0
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	39 c0       	rjmp	.+114    	; 0x23ee <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x17e>
    237c:	20 91 b2 00 	lds	r18, 0x00B2
    2380:	20 1b       	sub	r18, r16
    2382:	82 0f       	add	r24, r18
    2384:	91 1d       	adc	r25, r1
    2386:	02 0f       	add	r16, r18
    2388:	f3 b0       	in	r15, 0x03	; 3
    238a:	f9 14       	cp	r15, r9
    238c:	09 f0       	breq	.+2      	; 0x2390 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x120>
    238e:	4d c0       	rjmp	.+154    	; 0x242a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    2390:	96 b0       	in	r9, 0x06	; 6
    2392:	98 14       	cp	r9, r8
    2394:	09 f0       	breq	.+2      	; 0x2398 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x128>
    2396:	49 c0       	rjmp	.+146    	; 0x242a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    2398:	29 b1       	in	r18, 0x09	; 9
    239a:	27 15       	cp	r18, r7
    239c:	09 f0       	breq	.+2      	; 0x23a0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x130>
    239e:	45 c0       	rjmp	.+138    	; 0x242a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    23a0:	24 c0       	rjmp	.+72     	; 0x23ea <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x17a>
    23a2:	21 2f       	mov	r18, r17
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	a9 01       	movw	r20, r18
    23a8:	44 0f       	add	r20, r20
    23aa:	55 1f       	adc	r21, r21
    23ac:	f5 01       	movw	r30, r10
    23ae:	e4 0f       	add	r30, r20
    23b0:	f5 1f       	adc	r31, r21
    23b2:	60 81       	ld	r22, Z
    23b4:	71 81       	ldd	r23, Z+1	; 0x01
    23b6:	61 15       	cp	r22, r1
    23b8:	71 05       	cpc	r23, r1
    23ba:	99 f4       	brne	.+38     	; 0x23e2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x172>
    23bc:	4c 0f       	add	r20, r28
    23be:	5d 1f       	adc	r21, r29
    23c0:	da 01       	movw	r26, r20
    23c2:	91 96       	adiw	r26, 0x21	; 33
    23c4:	4d 91       	ld	r20, X+
    23c6:	5c 91       	ld	r21, X
    23c8:	92 97       	sbiw	r26, 0x22	; 34
    23ca:	da 01       	movw	r26, r20
    23cc:	4c 91       	ld	r20, X
    23ce:	2c 0f       	add	r18, r28
    23d0:	3d 1f       	adc	r19, r29
    23d2:	d9 01       	movw	r26, r18
    23d4:	51 96       	adiw	r26, 0x11	; 17
    23d6:	2c 91       	ld	r18, X
    23d8:	51 97       	sbiw	r26, 0x11	; 17
    23da:	42 23       	and	r20, r18
    23dc:	11 f4       	brne	.+4      	; 0x23e2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x172>
    23de:	91 83       	std	Z+1, r25	; 0x01
    23e0:	80 83       	st	Z, r24
    23e2:	1f 5f       	subi	r17, 0xFF	; 255
    23e4:	28 85       	ldd	r18, Y+8	; 0x08
    23e6:	12 17       	cp	r17, r18
    23e8:	e0 f2       	brcs	.-72     	; 0x23a2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x132>
    23ea:	89 2c       	mov	r8, r9
    23ec:	9f 2c       	mov	r9, r15
    23ee:	2e 85       	ldd	r18, Y+14	; 0x0e
    23f0:	3f 85       	ldd	r19, Y+15	; 0x0f
    23f2:	82 17       	cp	r24, r18
    23f4:	93 07       	cpc	r25, r19
    23f6:	10 f2       	brcs	.-124    	; 0x237c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x10c>
    23f8:	c0 92 b0 00 	sts	0x00B0, r12
    23fc:	e0 92 b1 00 	sts	0x00B1, r14
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	0f c0       	rjmp	.+30     	; 0x2422 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1b2>
    2404:	e2 2f       	mov	r30, r18
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	ee 0f       	add	r30, r30
    240a:	ff 1f       	adc	r31, r31
    240c:	ea 0d       	add	r30, r10
    240e:	fb 1d       	adc	r31, r11
    2410:	80 81       	ld	r24, Z
    2412:	91 81       	ldd	r25, Z+1	; 0x01
    2414:	00 97       	sbiw	r24, 0x00	; 0
    2416:	21 f4       	brne	.+8      	; 0x2420 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1b0>
    2418:	8e 85       	ldd	r24, Y+14	; 0x0e
    241a:	9f 85       	ldd	r25, Y+15	; 0x0f
    241c:	91 83       	std	Z+1, r25	; 0x01
    241e:	80 83       	st	Z, r24
    2420:	2f 5f       	subi	r18, 0xFF	; 255
    2422:	88 85       	ldd	r24, Y+8	; 0x08
    2424:	28 17       	cp	r18, r24
    2426:	70 f3       	brcs	.-36     	; 0x2404 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x194>
    2428:	05 c0       	rjmp	.+10     	; 0x2434 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1c4>
    242a:	f3 b0       	in	r15, 0x03	; 3
    242c:	96 b0       	in	r9, 0x06	; 6
    242e:	79 b0       	in	r7, 0x09	; 9
    2430:	10 e0       	ldi	r17, 0x00	; 0
    2432:	d8 cf       	rjmp	.-80     	; 0x23e4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    2434:	cd b7       	in	r28, 0x3d	; 61
    2436:	de b7       	in	r29, 0x3e	; 62
    2438:	ed e0       	ldi	r30, 0x0D	; 13
    243a:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__epilogue_restores__+0xa>

0000243e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    243e:	ef 92       	push	r14
    2440:	ff 92       	push	r15
    2442:	0f 93       	push	r16
    2444:	1f 93       	push	r17
    2446:	cf 93       	push	r28
    2448:	df 93       	push	r29
    244a:	fc 01       	movw	r30, r24
    244c:	9b 01       	movw	r18, r22
    244e:	00 91 7c 00 	lds	r16, 0x007C
    2452:	10 91 7a 00 	lds	r17, 0x007A
    2456:	e7 b0       	in	r14, 0x07	; 7
    2458:	f8 b0       	in	r15, 0x08	; 8
    245a:	80 91 7a 00 	lds	r24, 0x007A
    245e:	86 fd       	sbrc	r24, 6
    2460:	fc cf       	rjmp	.-8      	; 0x245a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	0a c0       	rjmp	.+20     	; 0x247a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3c>
    2466:	a8 2f       	mov	r26, r24
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	aa 0f       	add	r26, r26
    246c:	bb 1f       	adc	r27, r27
    246e:	a2 0f       	add	r26, r18
    2470:	b3 1f       	adc	r27, r19
    2472:	11 96       	adiw	r26, 0x01	; 1
    2474:	1c 92       	st	X, r1
    2476:	1e 92       	st	-X, r1
    2478:	8f 5f       	subi	r24, 0xFF	; 255
    247a:	90 85       	ldd	r25, Z+8	; 0x08
    247c:	89 17       	cp	r24, r25
    247e:	98 f3       	brcs	.-26     	; 0x2466 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x28>
    2480:	97 b1       	in	r25, 0x07	; 7
    2482:	82 a1       	ldd	r24, Z+34	; 0x22
    2484:	80 95       	com	r24
    2486:	89 23       	and	r24, r25
    2488:	87 b9       	out	0x07, r24	; 7
    248a:	98 b1       	in	r25, 0x08	; 8
    248c:	82 a1       	ldd	r24, Z+34	; 0x22
    248e:	80 95       	com	r24
    2490:	89 23       	and	r24, r25
    2492:	88 b9       	out	0x08, r24	; 8
    2494:	87 e8       	ldi	r24, 0x87	; 135
    2496:	80 93 7a 00 	sts	0x007A, r24
    249a:	70 e0       	ldi	r23, 0x00	; 0
    249c:	29 c0       	rjmp	.+82     	; 0x24f0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    249e:	df 01       	movw	r26, r30
    24a0:	a6 0f       	add	r26, r22
    24a2:	b1 1d       	adc	r27, r1
    24a4:	51 96       	adiw	r26, 0x11	; 17
    24a6:	8c 91       	ld	r24, X
    24a8:	51 97       	sbiw	r26, 0x11	; 17
    24aa:	80 64       	ori	r24, 0x40	; 64
    24ac:	80 93 7c 00 	sts	0x007C, r24
    24b0:	80 91 7a 00 	lds	r24, 0x007A
    24b4:	80 64       	ori	r24, 0x40	; 64
    24b6:	80 93 7a 00 	sts	0x007A, r24
    24ba:	80 91 7a 00 	lds	r24, 0x007A
    24be:	86 fd       	sbrc	r24, 6
    24c0:	fc cf       	rjmp	.-8      	; 0x24ba <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x7c>
    24c2:	a6 2f       	mov	r26, r22
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	aa 0f       	add	r26, r26
    24c8:	bb 1f       	adc	r27, r27
    24ca:	a2 0f       	add	r26, r18
    24cc:	b3 1f       	adc	r27, r19
    24ce:	40 91 78 00 	lds	r20, 0x0078
    24d2:	50 91 79 00 	lds	r21, 0x0079
    24d6:	8d 91       	ld	r24, X+
    24d8:	9c 91       	ld	r25, X
    24da:	11 97       	sbiw	r26, 0x01	; 1
    24dc:	84 0f       	add	r24, r20
    24de:	95 1f       	adc	r25, r21
    24e0:	11 96       	adiw	r26, 0x01	; 1
    24e2:	9c 93       	st	X, r25
    24e4:	8e 93       	st	-X, r24
    24e6:	6f 5f       	subi	r22, 0xFF	; 255
    24e8:	80 85       	ldd	r24, Z+8	; 0x08
    24ea:	68 17       	cp	r22, r24
    24ec:	c0 f2       	brcs	.-80     	; 0x249e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x60>
    24ee:	7f 5f       	subi	r23, 0xFF	; 255
    24f0:	81 a1       	ldd	r24, Z+33	; 0x21
    24f2:	78 17       	cp	r23, r24
    24f4:	10 f4       	brcc	.+4      	; 0x24fa <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xbc>
    24f6:	60 e0       	ldi	r22, 0x00	; 0
    24f8:	f7 cf       	rjmp	.-18     	; 0x24e8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xaa>
    24fa:	40 e0       	ldi	r20, 0x00	; 0
    24fc:	14 c0       	rjmp	.+40     	; 0x2526 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe8>
    24fe:	c4 2f       	mov	r28, r20
    2500:	d0 e0       	ldi	r29, 0x00	; 0
    2502:	cc 0f       	add	r28, r28
    2504:	dd 1f       	adc	r29, r29
    2506:	c2 0f       	add	r28, r18
    2508:	d3 1f       	adc	r29, r19
    250a:	61 a1       	ldd	r22, Z+33	; 0x21
    250c:	70 e0       	ldi	r23, 0x00	; 0
    250e:	cb 01       	movw	r24, r22
    2510:	95 95       	asr	r25
    2512:	87 95       	ror	r24
    2514:	a8 81       	ld	r26, Y
    2516:	b9 81       	ldd	r27, Y+1	; 0x01
    2518:	8a 0f       	add	r24, r26
    251a:	9b 1f       	adc	r25, r27
    251c:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <__udivmodhi4>
    2520:	79 83       	std	Y+1, r23	; 0x01
    2522:	68 83       	st	Y, r22
    2524:	4f 5f       	subi	r20, 0xFF	; 255
    2526:	80 85       	ldd	r24, Z+8	; 0x08
    2528:	48 17       	cp	r20, r24
    252a:	48 f3       	brcs	.-46     	; 0x24fe <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xc0>
    252c:	00 93 7c 00 	sts	0x007C, r16
    2530:	10 93 7a 00 	sts	0x007A, r17
    2534:	f8 b8       	out	0x08, r15	; 8
    2536:	e7 b8       	out	0x07, r14	; 7
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	e6 e0       	ldi	r30, 0x06	; 6
    253e:	0c 94 60 16 	jmp	0x2cc0	; 0x2cc0 <__epilogue_restores__+0x18>

00002542 <_ZN16PololuQTRSensors4readEPjh>:
    2542:	a0 e2       	ldi	r26, 0x20	; 32
    2544:	b0 e0       	ldi	r27, 0x00	; 0
    2546:	e7 ea       	ldi	r30, 0xA7	; 167
    2548:	f2 e1       	ldi	r31, 0x12	; 18
    254a:	0c 94 43 16 	jmp	0x2c86	; 0x2c86 <__prologue_saves__+0x16>
    254e:	8c 01       	movw	r16, r24
    2550:	7b 01       	movw	r14, r22
    2552:	d4 2e       	mov	r13, r20
    2554:	84 2f       	mov	r24, r20
    2556:	81 50       	subi	r24, 0x01	; 1
    2558:	82 30       	cpi	r24, 0x02	; 2
    255a:	18 f4       	brcc	.+6      	; 0x2562 <_ZN16PololuQTRSensors4readEPjh+0x20>
    255c:	c8 01       	movw	r24, r16
    255e:	0e 94 cb 10 	call	0x2196	; 0x2196 <_ZN16PololuQTRSensors10emittersOnEv>
    2562:	d8 01       	movw	r26, r16
    2564:	50 96       	adiw	r26, 0x10	; 16
    2566:	8c 91       	ld	r24, X
    2568:	50 97       	sbiw	r26, 0x10	; 16
    256a:	88 23       	and	r24, r24
    256c:	89 f4       	brne	.+34     	; 0x2590 <_ZN16PololuQTRSensors4readEPjh+0x4e>
    256e:	c8 01       	movw	r24, r16
    2570:	b7 01       	movw	r22, r14
    2572:	0e 94 38 11 	call	0x2270	; 0x2270 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2576:	c8 01       	movw	r24, r16
    2578:	0e 94 b6 10 	call	0x216c	; 0x216c <_ZN16PololuQTRSensors11emittersOffEv>
    257c:	bd 2d       	mov	r27, r13
    257e:	b2 30       	cpi	r27, 0x02	; 2
    2580:	d9 f5       	brne	.+118    	; 0x25f8 <_ZN16PololuQTRSensors4readEPjh+0xb6>
    2582:	c8 01       	movw	r24, r16
    2584:	be 01       	movw	r22, r28
    2586:	6f 5f       	subi	r22, 0xFF	; 255
    2588:	7f 4f       	sbci	r23, 0xFF	; 255
    258a:	0e 94 38 11 	call	0x2270	; 0x2270 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    258e:	10 c0       	rjmp	.+32     	; 0x25b0 <_ZN16PololuQTRSensors4readEPjh+0x6e>
    2590:	c8 01       	movw	r24, r16
    2592:	b7 01       	movw	r22, r14
    2594:	0e 94 1f 12 	call	0x243e	; 0x243e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2598:	c8 01       	movw	r24, r16
    259a:	0e 94 b6 10 	call	0x216c	; 0x216c <_ZN16PololuQTRSensors11emittersOffEv>
    259e:	ed 2d       	mov	r30, r13
    25a0:	e2 30       	cpi	r30, 0x02	; 2
    25a2:	51 f5       	brne	.+84     	; 0x25f8 <_ZN16PololuQTRSensors4readEPjh+0xb6>
    25a4:	c8 01       	movw	r24, r16
    25a6:	be 01       	movw	r22, r28
    25a8:	6f 5f       	subi	r22, 0xFF	; 255
    25aa:	7f 4f       	sbci	r23, 0xFF	; 255
    25ac:	0e 94 1f 12 	call	0x243e	; 0x243e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    25b0:	60 e0       	ldi	r22, 0x00	; 0
    25b2:	ae 01       	movw	r20, r28
    25b4:	4f 5f       	subi	r20, 0xFF	; 255
    25b6:	5f 4f       	sbci	r21, 0xFF	; 255
    25b8:	1b c0       	rjmp	.+54     	; 0x25f0 <_ZN16PololuQTRSensors4readEPjh+0xae>
    25ba:	86 2f       	mov	r24, r22
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	88 0f       	add	r24, r24
    25c0:	99 1f       	adc	r25, r25
    25c2:	f7 01       	movw	r30, r14
    25c4:	e8 0f       	add	r30, r24
    25c6:	f9 1f       	adc	r31, r25
    25c8:	84 0f       	add	r24, r20
    25ca:	95 1f       	adc	r25, r21
    25cc:	d8 01       	movw	r26, r16
    25ce:	1e 96       	adiw	r26, 0x0e	; 14
    25d0:	2d 91       	ld	r18, X+
    25d2:	3c 91       	ld	r19, X
    25d4:	1f 97       	sbiw	r26, 0x0f	; 15
    25d6:	dc 01       	movw	r26, r24
    25d8:	8d 91       	ld	r24, X+
    25da:	9c 91       	ld	r25, X
    25dc:	11 97       	sbiw	r26, 0x01	; 1
    25de:	28 1b       	sub	r18, r24
    25e0:	39 0b       	sbc	r19, r25
    25e2:	80 81       	ld	r24, Z
    25e4:	91 81       	ldd	r25, Z+1	; 0x01
    25e6:	82 0f       	add	r24, r18
    25e8:	93 1f       	adc	r25, r19
    25ea:	91 83       	std	Z+1, r25	; 0x01
    25ec:	80 83       	st	Z, r24
    25ee:	6f 5f       	subi	r22, 0xFF	; 255
    25f0:	f8 01       	movw	r30, r16
    25f2:	80 85       	ldd	r24, Z+8	; 0x08
    25f4:	68 17       	cp	r22, r24
    25f6:	08 f3       	brcs	.-62     	; 0x25ba <_ZN16PololuQTRSensors4readEPjh+0x78>
    25f8:	a0 96       	adiw	r28, 0x20	; 32
    25fa:	e7 e0       	ldi	r30, 0x07	; 7
    25fc:	0c 94 5f 16 	jmp	0x2cbe	; 0x2cbe <__epilogue_restores__+0x16>

00002600 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    2600:	8f 92       	push	r8
    2602:	9f 92       	push	r9
    2604:	af 92       	push	r10
    2606:	bf 92       	push	r11
    2608:	cf 92       	push	r12
    260a:	df 92       	push	r13
    260c:	ff 92       	push	r15
    260e:	0f 93       	push	r16
    2610:	1f 93       	push	r17
    2612:	cf 93       	push	r28
    2614:	df 93       	push	r29
    2616:	ec 01       	movw	r28, r24
    2618:	c6 2e       	mov	r12, r22
    261a:	07 2f       	mov	r16, r23
    261c:	f4 2e       	mov	r15, r20
    261e:	42 30       	cpi	r20, 0x02	; 2
    2620:	11 f0       	breq	.+4      	; 0x2626 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x26>
    2622:	ff 20       	and	r15, r15
    2624:	51 f4       	brne	.+20     	; 0x263a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3a>
    2626:	8c 81       	ldd	r24, Y+4	; 0x04
    2628:	9d 81       	ldd	r25, Y+5	; 0x05
    262a:	00 97       	sbiw	r24, 0x00	; 0
    262c:	09 f4       	brne	.+2      	; 0x2630 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x30>
    262e:	a0 c0       	rjmp	.+320    	; 0x2770 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    2630:	8e 81       	ldd	r24, Y+6	; 0x06
    2632:	9f 81       	ldd	r25, Y+7	; 0x07
    2634:	00 97       	sbiw	r24, 0x00	; 0
    2636:	09 f4       	brne	.+2      	; 0x263a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3a>
    2638:	9b c0       	rjmp	.+310    	; 0x2770 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    263a:	8f 2d       	mov	r24, r15
    263c:	81 50       	subi	r24, 0x01	; 1
    263e:	82 30       	cpi	r24, 0x02	; 2
    2640:	50 f4       	brcc	.+20     	; 0x2656 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x56>
    2642:	88 81       	ld	r24, Y
    2644:	99 81       	ldd	r25, Y+1	; 0x01
    2646:	00 97       	sbiw	r24, 0x00	; 0
    2648:	09 f4       	brne	.+2      	; 0x264c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x4c>
    264a:	92 c0       	rjmp	.+292    	; 0x2770 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    264c:	8a 81       	ldd	r24, Y+2	; 0x02
    264e:	9b 81       	ldd	r25, Y+3	; 0x03
    2650:	00 97       	sbiw	r24, 0x00	; 0
    2652:	09 f4       	brne	.+2      	; 0x2656 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x56>
    2654:	8d c0       	rjmp	.+282    	; 0x2770 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    2656:	ce 01       	movw	r24, r28
    2658:	6c 2d       	mov	r22, r12
    265a:	70 2f       	mov	r23, r16
    265c:	4f 2d       	mov	r20, r15
    265e:	0e 94 a1 12 	call	0x2542	; 0x2542 <_ZN16PololuQTRSensors4readEPjh>
    2662:	ac 2c       	mov	r10, r12
    2664:	b0 2e       	mov	r11, r16
    2666:	00 e0       	ldi	r16, 0x00	; 0
    2668:	10 e0       	ldi	r17, 0x00	; 0
    266a:	88 24       	eor	r8, r8
    266c:	99 24       	eor	r9, r9
    266e:	7a c0       	rjmp	.+244    	; 0x2764 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x164>
    2670:	8f 2d       	mov	r24, r15
    2672:	81 30       	cpi	r24, 0x01	; 1
    2674:	59 f4       	brne	.+22     	; 0x268c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x8c>
    2676:	ea 81       	ldd	r30, Y+2	; 0x02
    2678:	fb 81       	ldd	r31, Y+3	; 0x03
    267a:	e0 0f       	add	r30, r16
    267c:	f1 1f       	adc	r31, r17
    267e:	c0 80       	ld	r12, Z
    2680:	d1 80       	ldd	r13, Z+1	; 0x01
    2682:	e8 81       	ld	r30, Y
    2684:	f9 81       	ldd	r31, Y+1	; 0x01
    2686:	e0 0f       	add	r30, r16
    2688:	f1 1f       	adc	r31, r17
    268a:	0d c0       	rjmp	.+26     	; 0x26a6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    268c:	8c 81       	ldd	r24, Y+4	; 0x04
    268e:	9d 81       	ldd	r25, Y+5	; 0x05
    2690:	ff 20       	and	r15, r15
    2692:	61 f4       	brne	.+24     	; 0x26ac <_ZN16PololuQTRSensors14readCalibratedEPjh+0xac>
    2694:	ee 81       	ldd	r30, Y+6	; 0x06
    2696:	ff 81       	ldd	r31, Y+7	; 0x07
    2698:	e0 0f       	add	r30, r16
    269a:	f1 1f       	adc	r31, r17
    269c:	c0 80       	ld	r12, Z
    269e:	d1 80       	ldd	r13, Z+1	; 0x01
    26a0:	80 0f       	add	r24, r16
    26a2:	91 1f       	adc	r25, r17
    26a4:	fc 01       	movw	r30, r24
    26a6:	40 81       	ld	r20, Z
    26a8:	51 81       	ldd	r21, Z+1	; 0x01
    26aa:	2b c0       	rjmp	.+86     	; 0x2702 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x102>
    26ac:	80 0f       	add	r24, r16
    26ae:	91 1f       	adc	r25, r17
    26b0:	fc 01       	movw	r30, r24
    26b2:	80 81       	ld	r24, Z
    26b4:	91 81       	ldd	r25, Z+1	; 0x01
    26b6:	e8 81       	ld	r30, Y
    26b8:	f9 81       	ldd	r31, Y+1	; 0x01
    26ba:	e0 0f       	add	r30, r16
    26bc:	f1 1f       	adc	r31, r17
    26be:	40 81       	ld	r20, Z
    26c0:	51 81       	ldd	r21, Z+1	; 0x01
    26c2:	ce 84       	ldd	r12, Y+14	; 0x0e
    26c4:	df 84       	ldd	r13, Y+15	; 0x0f
    26c6:	84 17       	cp	r24, r20
    26c8:	95 07       	cpc	r25, r21
    26ca:	10 f4       	brcc	.+4      	; 0x26d0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd0>
    26cc:	a6 01       	movw	r20, r12
    26ce:	04 c0       	rjmp	.+8      	; 0x26d8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd8>
    26d0:	4c 0d       	add	r20, r12
    26d2:	5d 1d       	adc	r21, r13
    26d4:	48 1b       	sub	r20, r24
    26d6:	59 0b       	sbc	r21, r25
    26d8:	ee 81       	ldd	r30, Y+6	; 0x06
    26da:	ff 81       	ldd	r31, Y+7	; 0x07
    26dc:	e0 0f       	add	r30, r16
    26de:	f1 1f       	adc	r31, r17
    26e0:	80 81       	ld	r24, Z
    26e2:	91 81       	ldd	r25, Z+1	; 0x01
    26e4:	ea 81       	ldd	r30, Y+2	; 0x02
    26e6:	fb 81       	ldd	r31, Y+3	; 0x03
    26e8:	e0 0f       	add	r30, r16
    26ea:	f1 1f       	adc	r31, r17
    26ec:	20 81       	ld	r18, Z
    26ee:	31 81       	ldd	r19, Z+1	; 0x01
    26f0:	ce 84       	ldd	r12, Y+14	; 0x0e
    26f2:	df 84       	ldd	r13, Y+15	; 0x0f
    26f4:	82 17       	cp	r24, r18
    26f6:	93 07       	cpc	r25, r19
    26f8:	20 f0       	brcs	.+8      	; 0x2702 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x102>
    26fa:	c2 0e       	add	r12, r18
    26fc:	d3 1e       	adc	r13, r19
    26fe:	c8 1a       	sub	r12, r24
    2700:	d9 0a       	sbc	r13, r25
    2702:	c4 1a       	sub	r12, r20
    2704:	d5 0a       	sbc	r13, r21
    2706:	d1 f0       	breq	.+52     	; 0x273c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2708:	f5 01       	movw	r30, r10
    270a:	60 81       	ld	r22, Z
    270c:	71 81       	ldd	r23, Z+1	; 0x01
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	9a 01       	movw	r18, r20
    2714:	40 e0       	ldi	r20, 0x00	; 0
    2716:	50 e0       	ldi	r21, 0x00	; 0
    2718:	62 1b       	sub	r22, r18
    271a:	73 0b       	sbc	r23, r19
    271c:	84 0b       	sbc	r24, r20
    271e:	95 0b       	sbc	r25, r21
    2720:	28 ee       	ldi	r18, 0xE8	; 232
    2722:	33 e0       	ldi	r19, 0x03	; 3
    2724:	40 e0       	ldi	r20, 0x00	; 0
    2726:	50 e0       	ldi	r21, 0x00	; 0
    2728:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <__mulsi3>
    272c:	96 01       	movw	r18, r12
    272e:	40 e0       	ldi	r20, 0x00	; 0
    2730:	50 e0       	ldi	r21, 0x00	; 0
    2732:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <__divmodsi4>
    2736:	37 fd       	sbrc	r19, 7
    2738:	0a c0       	rjmp	.+20     	; 0x274e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x14e>
    273a:	02 c0       	rjmp	.+4      	; 0x2740 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x140>
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	f3 e0       	ldi	r31, 0x03	; 3
    2742:	29 3e       	cpi	r18, 0xE9	; 233
    2744:	3f 07       	cpc	r19, r31
    2746:	2c f0       	brlt	.+10     	; 0x2752 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x152>
    2748:	28 ee       	ldi	r18, 0xE8	; 232
    274a:	33 e0       	ldi	r19, 0x03	; 3
    274c:	02 c0       	rjmp	.+4      	; 0x2752 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x152>
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	f5 01       	movw	r30, r10
    2754:	21 93       	st	Z+, r18
    2756:	31 93       	st	Z+, r19
    2758:	5f 01       	movw	r10, r30
    275a:	08 94       	sec
    275c:	81 1c       	adc	r8, r1
    275e:	91 1c       	adc	r9, r1
    2760:	0e 5f       	subi	r16, 0xFE	; 254
    2762:	1f 4f       	sbci	r17, 0xFF	; 255
    2764:	88 85       	ldd	r24, Y+8	; 0x08
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	88 16       	cp	r8, r24
    276a:	99 06       	cpc	r9, r25
    276c:	0c f4       	brge	.+2      	; 0x2770 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    276e:	80 cf       	rjmp	.-256    	; 0x2670 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x70>
    2770:	df 91       	pop	r29
    2772:	cf 91       	pop	r28
    2774:	1f 91       	pop	r17
    2776:	0f 91       	pop	r16
    2778:	ff 90       	pop	r15
    277a:	df 90       	pop	r13
    277c:	cf 90       	pop	r12
    277e:	bf 90       	pop	r11
    2780:	af 90       	pop	r10
    2782:	9f 90       	pop	r9
    2784:	8f 90       	pop	r8
    2786:	08 95       	ret

00002788 <_ZN16PololuQTRSensors8readLineEPjhh>:
    2788:	a5 e0       	ldi	r26, 0x05	; 5
    278a:	b0 e0       	ldi	r27, 0x00	; 0
    278c:	ea ec       	ldi	r30, 0xCA	; 202
    278e:	f3 e1       	ldi	r31, 0x13	; 19
    2790:	0c 94 38 16 	jmp	0x2c70	; 0x2c70 <__prologue_saves__>
    2794:	4c 01       	movw	r8, r24
    2796:	c6 2e       	mov	r12, r22
    2798:	e7 2e       	mov	r14, r23
    279a:	2d 83       	std	Y+5, r18	; 0x05
    279c:	0e 94 00 13 	call	0x2600	; 0x2600 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    27a0:	d4 01       	movw	r26, r8
    27a2:	18 96       	adiw	r26, 0x08	; 8
    27a4:	4c 90       	ld	r4, X
    27a6:	18 97       	sbiw	r26, 0x08	; 8
    27a8:	de 2c       	mov	r13, r14
    27aa:	64 2d       	mov	r22, r4
    27ac:	70 e0       	ldi	r23, 0x00	; 0
    27ae:	80 e0       	ldi	r24, 0x00	; 0
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	28 ee       	ldi	r18, 0xE8	; 232
    27b4:	33 e0       	ldi	r19, 0x03	; 3
    27b6:	40 e0       	ldi	r20, 0x00	; 0
    27b8:	50 e0       	ldi	r21, 0x00	; 0
    27ba:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <__mulsi3>
    27be:	69 83       	std	Y+1, r22	; 0x01
    27c0:	7a 83       	std	Y+2, r23	; 0x02
    27c2:	8b 83       	std	Y+3, r24	; 0x03
    27c4:	9c 83       	std	Y+4, r25	; 0x04
    27c6:	ee 24       	eor	r14, r14
    27c8:	ff 24       	eor	r15, r15
    27ca:	87 01       	movw	r16, r14
    27cc:	66 24       	eor	r6, r6
    27ce:	77 24       	eor	r7, r7
    27d0:	88 24       	eor	r8, r8
    27d2:	99 24       	eor	r9, r9
    27d4:	54 01       	movw	r10, r8
    27d6:	55 24       	eor	r5, r5
    27d8:	36 c0       	rjmp	.+108    	; 0x2846 <_ZN16PololuQTRSensors8readLineEPjhh+0xbe>
    27da:	f6 01       	movw	r30, r12
    27dc:	30 81       	ld	r19, Z
    27de:	21 81       	ldd	r18, Z+1	; 0x01
    27e0:	42 e0       	ldi	r20, 0x02	; 2
    27e2:	24 2e       	mov	r2, r20
    27e4:	31 2c       	mov	r3, r1
    27e6:	c2 0c       	add	r12, r2
    27e8:	d3 1c       	adc	r13, r3
    27ea:	c9 01       	movw	r24, r18
    27ec:	49 2f       	mov	r20, r25
    27ee:	58 2f       	mov	r21, r24
    27f0:	1a 01       	movw	r2, r20
    27f2:	2d 81       	ldd	r18, Y+5	; 0x05
    27f4:	22 23       	and	r18, r18
    27f6:	29 f0       	breq	.+10     	; 0x2802 <_ZN16PololuQTRSensors8readLineEPjhh+0x7a>
    27f8:	88 ee       	ldi	r24, 0xE8	; 232
    27fa:	93 e0       	ldi	r25, 0x03	; 3
    27fc:	82 19       	sub	r24, r2
    27fe:	93 09       	sbc	r25, r3
    2800:	1c 01       	movw	r2, r24
    2802:	99 ec       	ldi	r25, 0xC9	; 201
    2804:	29 16       	cp	r2, r25
    2806:	31 04       	cpc	r3, r1
    2808:	2c f4       	brge	.+10     	; 0x2814 <_ZN16PololuQTRSensors8readLineEPjhh+0x8c>
    280a:	a3 e3       	ldi	r26, 0x33	; 51
    280c:	2a 16       	cp	r2, r26
    280e:	31 04       	cpc	r3, r1
    2810:	94 f0       	brlt	.+36     	; 0x2836 <_ZN16PololuQTRSensors8readLineEPjhh+0xae>
    2812:	02 c0       	rjmp	.+4      	; 0x2818 <_ZN16PololuQTRSensors8readLineEPjhh+0x90>
    2814:	55 24       	eor	r5, r5
    2816:	53 94       	inc	r5
    2818:	b1 01       	movw	r22, r2
    281a:	88 27       	eor	r24, r24
    281c:	77 fd       	sbrc	r23, 7
    281e:	80 95       	com	r24
    2820:	98 2f       	mov	r25, r24
    2822:	a8 01       	movw	r20, r16
    2824:	97 01       	movw	r18, r14
    2826:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <__mulsi3>
    282a:	86 0e       	add	r8, r22
    282c:	97 1e       	adc	r9, r23
    282e:	a8 1e       	adc	r10, r24
    2830:	b9 1e       	adc	r11, r25
    2832:	62 0c       	add	r6, r2
    2834:	73 1c       	adc	r7, r3
    2836:	88 ee       	ldi	r24, 0xE8	; 232
    2838:	93 e0       	ldi	r25, 0x03	; 3
    283a:	a0 e0       	ldi	r26, 0x00	; 0
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	e8 0e       	add	r14, r24
    2840:	f9 1e       	adc	r15, r25
    2842:	0a 1f       	adc	r16, r26
    2844:	1b 1f       	adc	r17, r27
    2846:	89 81       	ldd	r24, Y+1	; 0x01
    2848:	9a 81       	ldd	r25, Y+2	; 0x02
    284a:	ab 81       	ldd	r26, Y+3	; 0x03
    284c:	bc 81       	ldd	r27, Y+4	; 0x04
    284e:	e8 16       	cp	r14, r24
    2850:	f9 06       	cpc	r15, r25
    2852:	0a 07       	cpc	r16, r26
    2854:	1b 07       	cpc	r17, r27
    2856:	09 f6       	brne	.-126    	; 0x27da <_ZN16PololuQTRSensors8readLineEPjhh+0x52>
    2858:	55 20       	and	r5, r5
    285a:	f1 f4       	brne	.+60     	; 0x2898 <_ZN16PololuQTRSensors8readLineEPjhh+0x110>
    285c:	55 24       	eor	r5, r5
    285e:	08 94       	sec
    2860:	41 08       	sbc	r4, r1
    2862:	51 08       	sbc	r5, r1
    2864:	24 ef       	ldi	r18, 0xF4	; 244
    2866:	31 e0       	ldi	r19, 0x01	; 1
    2868:	42 9e       	mul	r4, r18
    286a:	c0 01       	movw	r24, r0
    286c:	43 9e       	mul	r4, r19
    286e:	90 0d       	add	r25, r0
    2870:	52 9e       	mul	r5, r18
    2872:	90 0d       	add	r25, r0
    2874:	11 24       	eor	r1, r1
    2876:	20 91 bf 01 	lds	r18, 0x01BF
    287a:	30 91 c0 01 	lds	r19, 0x01C0
    287e:	28 17       	cp	r18, r24
    2880:	39 07       	cpc	r19, r25
    2882:	b4 f0       	brlt	.+44     	; 0x28b0 <_ZN16PololuQTRSensors8readLineEPjhh+0x128>
    2884:	88 ee       	ldi	r24, 0xE8	; 232
    2886:	93 e0       	ldi	r25, 0x03	; 3
    2888:	48 9e       	mul	r4, r24
    288a:	90 01       	movw	r18, r0
    288c:	49 9e       	mul	r4, r25
    288e:	30 0d       	add	r19, r0
    2890:	58 9e       	mul	r5, r24
    2892:	30 0d       	add	r19, r0
    2894:	11 24       	eor	r1, r1
    2896:	0e c0       	rjmp	.+28     	; 0x28b4 <_ZN16PololuQTRSensors8readLineEPjhh+0x12c>
    2898:	93 01       	movw	r18, r6
    289a:	40 e0       	ldi	r20, 0x00	; 0
    289c:	50 e0       	ldi	r21, 0x00	; 0
    289e:	c5 01       	movw	r24, r10
    28a0:	b4 01       	movw	r22, r8
    28a2:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <__udivmodsi4>
    28a6:	20 93 bf 01 	sts	0x01BF, r18
    28aa:	30 93 c0 01 	sts	0x01C0, r19
    28ae:	02 c0       	rjmp	.+4      	; 0x28b4 <_ZN16PololuQTRSensors8readLineEPjhh+0x12c>
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	c9 01       	movw	r24, r18
    28b6:	25 96       	adiw	r28, 0x05	; 5
    28b8:	e2 e1       	ldi	r30, 0x12	; 18
    28ba:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <__epilogue_restores__>

000028be <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    28be:	a7 e6       	ldi	r26, 0x67	; 103
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	e5 e6       	ldi	r30, 0x65	; 101
    28c4:	f4 e1       	ldi	r31, 0x14	; 20
    28c6:	0c 94 38 16 	jmp	0x2c70	; 0x2c70 <__prologue_saves__>
    28ca:	8c 01       	movw	r16, r24
    28cc:	4b 01       	movw	r8, r22
    28ce:	6a 01       	movw	r12, r20
    28d0:	a6 96       	adiw	r28, 0x26	; 38
    28d2:	2f af       	std	Y+63, r18	; 0x3f
    28d4:	a6 97       	sbiw	r28, 0x26	; 38
    28d6:	da 01       	movw	r26, r20
    28d8:	8d 91       	ld	r24, X+
    28da:	9c 91       	ld	r25, X
    28dc:	11 97       	sbiw	r26, 0x01	; 1
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	e9 f4       	brne	.+58     	; 0x291c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x5e>
    28e2:	f8 01       	movw	r30, r16
    28e4:	80 85       	ldd	r24, Z+8	; 0x08
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	88 0f       	add	r24, r24
    28ea:	99 1f       	adc	r25, r25
    28ec:	0e 94 84 16 	call	0x2d08	; 0x2d08 <malloc>
    28f0:	d6 01       	movw	r26, r12
    28f2:	11 96       	adiw	r26, 0x01	; 1
    28f4:	9c 93       	st	X, r25
    28f6:	8e 93       	st	-X, r24
    28f8:	00 97       	sbiw	r24, 0x00	; 0
    28fa:	09 f4       	brne	.+2      	; 0x28fe <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x40>
    28fc:	e2 c0       	rjmp	.+452    	; 0x2ac2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x204>
    28fe:	fc 01       	movw	r30, r24
    2900:	80 e0       	ldi	r24, 0x00	; 0
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	03 c0       	rjmp	.+6      	; 0x290c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x4e>
    2906:	11 92       	st	Z+, r1
    2908:	11 92       	st	Z+, r1
    290a:	01 96       	adiw	r24, 0x01	; 1
    290c:	d8 01       	movw	r26, r16
    290e:	18 96       	adiw	r26, 0x08	; 8
    2910:	2c 91       	ld	r18, X
    2912:	18 97       	sbiw	r26, 0x08	; 8
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	82 17       	cp	r24, r18
    2918:	93 07       	cpc	r25, r19
    291a:	ac f3       	brlt	.-22     	; 0x2906 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x48>
    291c:	f4 01       	movw	r30, r8
    291e:	80 81       	ld	r24, Z
    2920:	91 81       	ldd	r25, Z+1	; 0x01
    2922:	00 97       	sbiw	r24, 0x00	; 0
    2924:	89 f0       	breq	.+34     	; 0x2948 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8a>
    2926:	ee 24       	eor	r14, r14
    2928:	ff 24       	eor	r15, r15
    292a:	5e 01       	movw	r10, r28
    292c:	08 94       	sec
    292e:	a1 1c       	adc	r10, r1
    2930:	b1 1c       	adc	r11, r1
    2932:	b1 e4       	ldi	r27, 0x41	; 65
    2934:	6b 2e       	mov	r6, r27
    2936:	71 2c       	mov	r7, r1
    2938:	6c 0e       	add	r6, r28
    293a:	7d 1e       	adc	r7, r29
    293c:	a1 e2       	ldi	r26, 0x21	; 33
    293e:	4a 2e       	mov	r4, r26
    2940:	51 2c       	mov	r5, r1
    2942:	4c 0e       	add	r4, r28
    2944:	5d 1e       	adc	r5, r29
    2946:	23 c0       	rjmp	.+70     	; 0x298e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xd0>
    2948:	d8 01       	movw	r26, r16
    294a:	18 96       	adiw	r26, 0x08	; 8
    294c:	8c 91       	ld	r24, X
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	88 0f       	add	r24, r24
    2952:	99 1f       	adc	r25, r25
    2954:	0e 94 84 16 	call	0x2d08	; 0x2d08 <malloc>
    2958:	f4 01       	movw	r30, r8
    295a:	91 83       	std	Z+1, r25	; 0x01
    295c:	80 83       	st	Z, r24
    295e:	00 97       	sbiw	r24, 0x00	; 0
    2960:	09 f4       	brne	.+2      	; 0x2964 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xa6>
    2962:	af c0       	rjmp	.+350    	; 0x2ac2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x204>
    2964:	fc 01       	movw	r30, r24
    2966:	80 e0       	ldi	r24, 0x00	; 0
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	d8 01       	movw	r26, r16
    296c:	07 c0       	rjmp	.+14     	; 0x297c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xbe>
    296e:	1e 96       	adiw	r26, 0x0e	; 14
    2970:	2d 91       	ld	r18, X+
    2972:	3c 91       	ld	r19, X
    2974:	1f 97       	sbiw	r26, 0x0f	; 15
    2976:	21 93       	st	Z+, r18
    2978:	31 93       	st	Z+, r19
    297a:	01 96       	adiw	r24, 0x01	; 1
    297c:	18 96       	adiw	r26, 0x08	; 8
    297e:	2c 91       	ld	r18, X
    2980:	18 97       	sbiw	r26, 0x08	; 8
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	82 17       	cp	r24, r18
    2986:	93 07       	cpc	r25, r19
    2988:	94 f3       	brlt	.-28     	; 0x296e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb0>
    298a:	8d 01       	movw	r16, r26
    298c:	cc cf       	rjmp	.-104    	; 0x2926 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x68>
    298e:	c8 01       	movw	r24, r16
    2990:	b5 01       	movw	r22, r10
    2992:	a6 96       	adiw	r28, 0x26	; 38
    2994:	4f ad       	ldd	r20, Y+63	; 0x3f
    2996:	a6 97       	sbiw	r28, 0x26	; 38
    2998:	0e 94 a1 12 	call	0x2542	; 0x2542 <_ZN16PololuQTRSensors4readEPjh>
    299c:	d8 01       	movw	r26, r16
    299e:	18 96       	adiw	r26, 0x08	; 8
    29a0:	8c 91       	ld	r24, X
    29a2:	18 97       	sbiw	r26, 0x08	; 8
    29a4:	e8 2f       	mov	r30, r24
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	a5 96       	adiw	r28, 0x25	; 37
    29aa:	ff af       	std	Y+63, r31	; 0x3f
    29ac:	ee af       	std	Y+62, r30	; 0x3e
    29ae:	a5 97       	sbiw	r28, 0x25	; 37
    29b0:	13 01       	movw	r2, r6
    29b2:	f5 01       	movw	r30, r10
    29b4:	a3 96       	adiw	r28, 0x23	; 35
    29b6:	5f ae       	std	Y+63, r5	; 0x3f
    29b8:	4e ae       	std	Y+62, r4	; 0x3e
    29ba:	a3 97       	sbiw	r28, 0x23	; 35
    29bc:	93 01       	movw	r18, r6
    29be:	40 e0       	ldi	r20, 0x00	; 0
    29c0:	50 e0       	ldi	r21, 0x00	; 0
    29c2:	a8 96       	adiw	r28, 0x28	; 40
    29c4:	5f ae       	std	Y+63, r5	; 0x3f
    29c6:	4e ae       	std	Y+62, r4	; 0x3e
    29c8:	a8 97       	sbiw	r28, 0x28	; 40
    29ca:	37 c0       	rjmp	.+110    	; 0x2a3a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17c>
    29cc:	e1 14       	cp	r14, r1
    29ce:	f1 04       	cpc	r15, r1
    29d0:	61 f0       	breq	.+24     	; 0x29ea <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x12c>
    29d2:	a8 96       	adiw	r28, 0x28	; 40
    29d4:	ae ad       	ldd	r26, Y+62	; 0x3e
    29d6:	bf ad       	ldd	r27, Y+63	; 0x3f
    29d8:	a8 97       	sbiw	r28, 0x28	; 40
    29da:	6d 91       	ld	r22, X+
    29dc:	7c 91       	ld	r23, X
    29de:	11 97       	sbiw	r26, 0x01	; 1
    29e0:	80 81       	ld	r24, Z
    29e2:	91 81       	ldd	r25, Z+1	; 0x01
    29e4:	68 17       	cp	r22, r24
    29e6:	79 07       	cpc	r23, r25
    29e8:	60 f4       	brcc	.+24     	; 0x2a02 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x144>
    29ea:	80 81       	ld	r24, Z
    29ec:	91 81       	ldd	r25, Z+1	; 0x01
    29ee:	a8 96       	adiw	r28, 0x28	; 40
    29f0:	ae ad       	ldd	r26, Y+62	; 0x3e
    29f2:	bf ad       	ldd	r27, Y+63	; 0x3f
    29f4:	a8 97       	sbiw	r28, 0x28	; 40
    29f6:	11 96       	adiw	r26, 0x01	; 1
    29f8:	9c 93       	st	X, r25
    29fa:	8e 93       	st	-X, r24
    29fc:	e1 14       	cp	r14, r1
    29fe:	f1 04       	cpc	r15, r1
    2a00:	49 f0       	breq	.+18     	; 0x2a14 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x156>
    2a02:	d9 01       	movw	r26, r18
    2a04:	6d 91       	ld	r22, X+
    2a06:	7c 91       	ld	r23, X
    2a08:	11 97       	sbiw	r26, 0x01	; 1
    2a0a:	80 81       	ld	r24, Z
    2a0c:	91 81       	ldd	r25, Z+1	; 0x01
    2a0e:	86 17       	cp	r24, r22
    2a10:	97 07       	cpc	r25, r23
    2a12:	28 f4       	brcc	.+10     	; 0x2a1e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x160>
    2a14:	80 81       	ld	r24, Z
    2a16:	91 81       	ldd	r25, Z+1	; 0x01
    2a18:	d9 01       	movw	r26, r18
    2a1a:	8d 93       	st	X+, r24
    2a1c:	9c 93       	st	X, r25
    2a1e:	4f 5f       	subi	r20, 0xFF	; 255
    2a20:	5f 4f       	sbci	r21, 0xFF	; 255
    2a22:	2e 5f       	subi	r18, 0xFE	; 254
    2a24:	3f 4f       	sbci	r19, 0xFF	; 255
    2a26:	32 96       	adiw	r30, 0x02	; 2
    2a28:	a8 96       	adiw	r28, 0x28	; 40
    2a2a:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a2c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a2e:	a8 97       	sbiw	r28, 0x28	; 40
    2a30:	02 96       	adiw	r24, 0x02	; 2
    2a32:	a8 96       	adiw	r28, 0x28	; 40
    2a34:	9f af       	std	Y+63, r25	; 0x3f
    2a36:	8e af       	std	Y+62, r24	; 0x3e
    2a38:	a8 97       	sbiw	r28, 0x28	; 40
    2a3a:	a5 96       	adiw	r28, 0x25	; 37
    2a3c:	ae ad       	ldd	r26, Y+62	; 0x3e
    2a3e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2a40:	a5 97       	sbiw	r28, 0x25	; 37
    2a42:	4a 17       	cp	r20, r26
    2a44:	5b 07       	cpc	r21, r27
    2a46:	14 f2       	brlt	.-124    	; 0x29cc <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x10e>
    2a48:	08 94       	sec
    2a4a:	e1 1c       	adc	r14, r1
    2a4c:	f1 1c       	adc	r15, r1
    2a4e:	ba e0       	ldi	r27, 0x0A	; 10
    2a50:	eb 16       	cp	r14, r27
    2a52:	f1 04       	cpc	r15, r1
    2a54:	09 f0       	breq	.+2      	; 0x2a58 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x19a>
    2a56:	9b cf       	rjmp	.-202    	; 0x298e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xd0>
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	2c c0       	rjmp	.+88     	; 0x2ab6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1f8>
    2a5e:	f1 01       	movw	r30, r2
    2a60:	41 91       	ld	r20, Z+
    2a62:	51 91       	ld	r21, Z+
    2a64:	1f 01       	movw	r2, r30
    2a66:	bc 01       	movw	r22, r24
    2a68:	66 0f       	add	r22, r22
    2a6a:	77 1f       	adc	r23, r23
    2a6c:	d6 01       	movw	r26, r12
    2a6e:	ed 91       	ld	r30, X+
    2a70:	fc 91       	ld	r31, X
    2a72:	11 97       	sbiw	r26, 0x01	; 1
    2a74:	e6 0f       	add	r30, r22
    2a76:	f7 1f       	adc	r31, r23
    2a78:	20 81       	ld	r18, Z
    2a7a:	31 81       	ldd	r19, Z+1	; 0x01
    2a7c:	24 17       	cp	r18, r20
    2a7e:	35 07       	cpc	r19, r21
    2a80:	10 f4       	brcc	.+4      	; 0x2a86 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1c8>
    2a82:	51 83       	std	Z+1, r21	; 0x01
    2a84:	40 83       	st	Z, r20
    2a86:	a3 96       	adiw	r28, 0x23	; 35
    2a88:	ee ad       	ldd	r30, Y+62	; 0x3e
    2a8a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2a8c:	a3 97       	sbiw	r28, 0x23	; 35
    2a8e:	41 91       	ld	r20, Z+
    2a90:	51 91       	ld	r21, Z+
    2a92:	a3 96       	adiw	r28, 0x23	; 35
    2a94:	ff af       	std	Y+63, r31	; 0x3f
    2a96:	ee af       	std	Y+62, r30	; 0x3e
    2a98:	a3 97       	sbiw	r28, 0x23	; 35
    2a9a:	d4 01       	movw	r26, r8
    2a9c:	ed 91       	ld	r30, X+
    2a9e:	fc 91       	ld	r31, X
    2aa0:	11 97       	sbiw	r26, 0x01	; 1
    2aa2:	e6 0f       	add	r30, r22
    2aa4:	f7 1f       	adc	r31, r23
    2aa6:	20 81       	ld	r18, Z
    2aa8:	31 81       	ldd	r19, Z+1	; 0x01
    2aaa:	42 17       	cp	r20, r18
    2aac:	53 07       	cpc	r21, r19
    2aae:	10 f4       	brcc	.+4      	; 0x2ab4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1f6>
    2ab0:	51 83       	std	Z+1, r21	; 0x01
    2ab2:	40 83       	st	Z, r20
    2ab4:	01 96       	adiw	r24, 0x01	; 1
    2ab6:	f8 01       	movw	r30, r16
    2ab8:	20 85       	ldd	r18, Z+8	; 0x08
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	82 17       	cp	r24, r18
    2abe:	93 07       	cpc	r25, r19
    2ac0:	74 f2       	brlt	.-100    	; 0x2a5e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1a0>
    2ac2:	c9 59       	subi	r28, 0x99	; 153
    2ac4:	df 4f       	sbci	r29, 0xFF	; 255
    2ac6:	e2 e1       	ldi	r30, 0x12	; 18
    2ac8:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <__epilogue_restores__>

00002acc <_ZN16PololuQTRSensors9calibrateEh>:
    2acc:	1f 93       	push	r17
    2ace:	cf 93       	push	r28
    2ad0:	df 93       	push	r29
    2ad2:	ec 01       	movw	r28, r24
    2ad4:	16 2f       	mov	r17, r22
    2ad6:	86 2f       	mov	r24, r22
    2ad8:	81 50       	subi	r24, 0x01	; 1
    2ada:	82 30       	cpi	r24, 0x02	; 2
    2adc:	58 f4       	brcc	.+22     	; 0x2af4 <_ZN16PololuQTRSensors9calibrateEh+0x28>
    2ade:	ae 01       	movw	r20, r28
    2ae0:	4e 5f       	subi	r20, 0xFE	; 254
    2ae2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ae4:	ce 01       	movw	r24, r28
    2ae6:	be 01       	movw	r22, r28
    2ae8:	21 e0       	ldi	r18, 0x01	; 1
    2aea:	0e 94 5f 14 	call	0x28be	; 0x28be <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2aee:	12 30       	cpi	r17, 0x02	; 2
    2af0:	19 f0       	breq	.+6      	; 0x2af8 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    2af2:	0c c0       	rjmp	.+24     	; 0x2b0c <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2af4:	66 23       	and	r22, r22
    2af6:	51 f4       	brne	.+20     	; 0x2b0c <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2af8:	be 01       	movw	r22, r28
    2afa:	6c 5f       	subi	r22, 0xFC	; 252
    2afc:	7f 4f       	sbci	r23, 0xFF	; 255
    2afe:	ae 01       	movw	r20, r28
    2b00:	4a 5f       	subi	r20, 0xFA	; 250
    2b02:	5f 4f       	sbci	r21, 0xFF	; 255
    2b04:	ce 01       	movw	r24, r28
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	0e 94 5f 14 	call	0x28be	; 0x28be <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2b0c:	df 91       	pop	r29
    2b0e:	cf 91       	pop	r28
    2b10:	1f 91       	pop	r17
    2b12:	08 95       	ret

00002b14 <_ZN16PololuQTRSensorsD1Ev>:
    2b14:	cf 93       	push	r28
    2b16:	df 93       	push	r29
    2b18:	ec 01       	movw	r28, r24
    2b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b1e:	00 97       	sbiw	r24, 0x00	; 0
    2b20:	11 f0       	breq	.+4      	; 0x2b26 <_ZN16PololuQTRSensorsD1Ev+0x12>
    2b22:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <free>
    2b26:	8e 81       	ldd	r24, Y+6	; 0x06
    2b28:	9f 81       	ldd	r25, Y+7	; 0x07
    2b2a:	00 97       	sbiw	r24, 0x00	; 0
    2b2c:	11 f0       	breq	.+4      	; 0x2b32 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    2b2e:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <free>
    2b32:	88 81       	ld	r24, Y
    2b34:	99 81       	ldd	r25, Y+1	; 0x01
    2b36:	00 97       	sbiw	r24, 0x00	; 0
    2b38:	11 f0       	breq	.+4      	; 0x2b3e <_ZN16PololuQTRSensorsD1Ev+0x2a>
    2b3a:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <free>
    2b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b40:	9d 81       	ldd	r25, Y+5	; 0x05
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	11 f0       	breq	.+4      	; 0x2b4a <_ZN16PololuQTRSensorsD1Ev+0x36>
    2b46:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <free>
    2b4a:	df 91       	pop	r29
    2b4c:	cf 91       	pop	r28
    2b4e:	08 95       	ret

00002b50 <__mulsi3>:
    2b50:	db 01       	movw	r26, r22
    2b52:	8f 93       	push	r24
    2b54:	9f 93       	push	r25
    2b56:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__muluhisi3>
    2b5a:	bf 91       	pop	r27
    2b5c:	af 91       	pop	r26
    2b5e:	a2 9f       	mul	r26, r18
    2b60:	80 0d       	add	r24, r0
    2b62:	91 1d       	adc	r25, r1
    2b64:	a3 9f       	mul	r26, r19
    2b66:	90 0d       	add	r25, r0
    2b68:	b2 9f       	mul	r27, r18
    2b6a:	90 0d       	add	r25, r0
    2b6c:	11 24       	eor	r1, r1
    2b6e:	08 95       	ret

00002b70 <__udivmodqi4>:
    2b70:	99 1b       	sub	r25, r25
    2b72:	79 e0       	ldi	r23, 0x09	; 9
    2b74:	04 c0       	rjmp	.+8      	; 0x2b7e <__udivmodqi4_ep>

00002b76 <__udivmodqi4_loop>:
    2b76:	99 1f       	adc	r25, r25
    2b78:	96 17       	cp	r25, r22
    2b7a:	08 f0       	brcs	.+2      	; 0x2b7e <__udivmodqi4_ep>
    2b7c:	96 1b       	sub	r25, r22

00002b7e <__udivmodqi4_ep>:
    2b7e:	88 1f       	adc	r24, r24
    2b80:	7a 95       	dec	r23
    2b82:	c9 f7       	brne	.-14     	; 0x2b76 <__udivmodqi4_loop>
    2b84:	80 95       	com	r24
    2b86:	08 95       	ret

00002b88 <__udivmodhi4>:
    2b88:	aa 1b       	sub	r26, r26
    2b8a:	bb 1b       	sub	r27, r27
    2b8c:	51 e1       	ldi	r21, 0x11	; 17
    2b8e:	07 c0       	rjmp	.+14     	; 0x2b9e <__udivmodhi4_ep>

00002b90 <__udivmodhi4_loop>:
    2b90:	aa 1f       	adc	r26, r26
    2b92:	bb 1f       	adc	r27, r27
    2b94:	a6 17       	cp	r26, r22
    2b96:	b7 07       	cpc	r27, r23
    2b98:	10 f0       	brcs	.+4      	; 0x2b9e <__udivmodhi4_ep>
    2b9a:	a6 1b       	sub	r26, r22
    2b9c:	b7 0b       	sbc	r27, r23

00002b9e <__udivmodhi4_ep>:
    2b9e:	88 1f       	adc	r24, r24
    2ba0:	99 1f       	adc	r25, r25
    2ba2:	5a 95       	dec	r21
    2ba4:	a9 f7       	brne	.-22     	; 0x2b90 <__udivmodhi4_loop>
    2ba6:	80 95       	com	r24
    2ba8:	90 95       	com	r25
    2baa:	bc 01       	movw	r22, r24
    2bac:	cd 01       	movw	r24, r26
    2bae:	08 95       	ret

00002bb0 <__divmodhi4>:
    2bb0:	97 fb       	bst	r25, 7
    2bb2:	07 2e       	mov	r0, r23
    2bb4:	16 f4       	brtc	.+4      	; 0x2bba <__divmodhi4+0xa>
    2bb6:	00 94       	com	r0
    2bb8:	07 d0       	rcall	.+14     	; 0x2bc8 <__divmodhi4_neg1>
    2bba:	77 fd       	sbrc	r23, 7
    2bbc:	09 d0       	rcall	.+18     	; 0x2bd0 <__divmodhi4_neg2>
    2bbe:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <__udivmodhi4>
    2bc2:	07 fc       	sbrc	r0, 7
    2bc4:	05 d0       	rcall	.+10     	; 0x2bd0 <__divmodhi4_neg2>
    2bc6:	3e f4       	brtc	.+14     	; 0x2bd6 <__divmodhi4_exit>

00002bc8 <__divmodhi4_neg1>:
    2bc8:	90 95       	com	r25
    2bca:	81 95       	neg	r24
    2bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    2bce:	08 95       	ret

00002bd0 <__divmodhi4_neg2>:
    2bd0:	70 95       	com	r23
    2bd2:	61 95       	neg	r22
    2bd4:	7f 4f       	sbci	r23, 0xFF	; 255

00002bd6 <__divmodhi4_exit>:
    2bd6:	08 95       	ret

00002bd8 <__udivmodsi4>:
    2bd8:	a1 e2       	ldi	r26, 0x21	; 33
    2bda:	1a 2e       	mov	r1, r26
    2bdc:	aa 1b       	sub	r26, r26
    2bde:	bb 1b       	sub	r27, r27
    2be0:	fd 01       	movw	r30, r26
    2be2:	0d c0       	rjmp	.+26     	; 0x2bfe <__udivmodsi4_ep>

00002be4 <__udivmodsi4_loop>:
    2be4:	aa 1f       	adc	r26, r26
    2be6:	bb 1f       	adc	r27, r27
    2be8:	ee 1f       	adc	r30, r30
    2bea:	ff 1f       	adc	r31, r31
    2bec:	a2 17       	cp	r26, r18
    2bee:	b3 07       	cpc	r27, r19
    2bf0:	e4 07       	cpc	r30, r20
    2bf2:	f5 07       	cpc	r31, r21
    2bf4:	20 f0       	brcs	.+8      	; 0x2bfe <__udivmodsi4_ep>
    2bf6:	a2 1b       	sub	r26, r18
    2bf8:	b3 0b       	sbc	r27, r19
    2bfa:	e4 0b       	sbc	r30, r20
    2bfc:	f5 0b       	sbc	r31, r21

00002bfe <__udivmodsi4_ep>:
    2bfe:	66 1f       	adc	r22, r22
    2c00:	77 1f       	adc	r23, r23
    2c02:	88 1f       	adc	r24, r24
    2c04:	99 1f       	adc	r25, r25
    2c06:	1a 94       	dec	r1
    2c08:	69 f7       	brne	.-38     	; 0x2be4 <__udivmodsi4_loop>
    2c0a:	60 95       	com	r22
    2c0c:	70 95       	com	r23
    2c0e:	80 95       	com	r24
    2c10:	90 95       	com	r25
    2c12:	9b 01       	movw	r18, r22
    2c14:	ac 01       	movw	r20, r24
    2c16:	bd 01       	movw	r22, r26
    2c18:	cf 01       	movw	r24, r30
    2c1a:	08 95       	ret

00002c1c <__divmodsi4>:
    2c1c:	05 2e       	mov	r0, r21
    2c1e:	97 fb       	bst	r25, 7
    2c20:	1e f4       	brtc	.+6      	; 0x2c28 <__divmodsi4+0xc>
    2c22:	00 94       	com	r0
    2c24:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__negsi2>
    2c28:	57 fd       	sbrc	r21, 7
    2c2a:	07 d0       	rcall	.+14     	; 0x2c3a <__divmodsi4_neg2>
    2c2c:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <__udivmodsi4>
    2c30:	07 fc       	sbrc	r0, 7
    2c32:	03 d0       	rcall	.+6      	; 0x2c3a <__divmodsi4_neg2>
    2c34:	4e f4       	brtc	.+18     	; 0x2c48 <__divmodsi4_exit>
    2c36:	0c 94 25 16 	jmp	0x2c4a	; 0x2c4a <__negsi2>

00002c3a <__divmodsi4_neg2>:
    2c3a:	50 95       	com	r21
    2c3c:	40 95       	com	r20
    2c3e:	30 95       	com	r19
    2c40:	21 95       	neg	r18
    2c42:	3f 4f       	sbci	r19, 0xFF	; 255
    2c44:	4f 4f       	sbci	r20, 0xFF	; 255
    2c46:	5f 4f       	sbci	r21, 0xFF	; 255

00002c48 <__divmodsi4_exit>:
    2c48:	08 95       	ret

00002c4a <__negsi2>:
    2c4a:	90 95       	com	r25
    2c4c:	80 95       	com	r24
    2c4e:	70 95       	com	r23
    2c50:	61 95       	neg	r22
    2c52:	7f 4f       	sbci	r23, 0xFF	; 255
    2c54:	8f 4f       	sbci	r24, 0xFF	; 255
    2c56:	9f 4f       	sbci	r25, 0xFF	; 255
    2c58:	08 95       	ret

00002c5a <__muluhisi3>:
    2c5a:	0e 94 75 16 	call	0x2cea	; 0x2cea <__umulhisi3>
    2c5e:	a5 9f       	mul	r26, r21
    2c60:	90 0d       	add	r25, r0
    2c62:	b4 9f       	mul	r27, r20
    2c64:	90 0d       	add	r25, r0
    2c66:	a4 9f       	mul	r26, r20
    2c68:	80 0d       	add	r24, r0
    2c6a:	91 1d       	adc	r25, r1
    2c6c:	11 24       	eor	r1, r1
    2c6e:	08 95       	ret

00002c70 <__prologue_saves__>:
    2c70:	2f 92       	push	r2
    2c72:	3f 92       	push	r3
    2c74:	4f 92       	push	r4
    2c76:	5f 92       	push	r5
    2c78:	6f 92       	push	r6
    2c7a:	7f 92       	push	r7
    2c7c:	8f 92       	push	r8
    2c7e:	9f 92       	push	r9
    2c80:	af 92       	push	r10
    2c82:	bf 92       	push	r11
    2c84:	cf 92       	push	r12
    2c86:	df 92       	push	r13
    2c88:	ef 92       	push	r14
    2c8a:	ff 92       	push	r15
    2c8c:	0f 93       	push	r16
    2c8e:	1f 93       	push	r17
    2c90:	cf 93       	push	r28
    2c92:	df 93       	push	r29
    2c94:	cd b7       	in	r28, 0x3d	; 61
    2c96:	de b7       	in	r29, 0x3e	; 62
    2c98:	ca 1b       	sub	r28, r26
    2c9a:	db 0b       	sbc	r29, r27
    2c9c:	0f b6       	in	r0, 0x3f	; 63
    2c9e:	f8 94       	cli
    2ca0:	de bf       	out	0x3e, r29	; 62
    2ca2:	0f be       	out	0x3f, r0	; 63
    2ca4:	cd bf       	out	0x3d, r28	; 61
    2ca6:	09 94       	ijmp

00002ca8 <__epilogue_restores__>:
    2ca8:	2a 88       	ldd	r2, Y+18	; 0x12
    2caa:	39 88       	ldd	r3, Y+17	; 0x11
    2cac:	48 88       	ldd	r4, Y+16	; 0x10
    2cae:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cb0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cb2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2cb4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2cb6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2cb8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2cba:	b9 84       	ldd	r11, Y+9	; 0x09
    2cbc:	c8 84       	ldd	r12, Y+8	; 0x08
    2cbe:	df 80       	ldd	r13, Y+7	; 0x07
    2cc0:	ee 80       	ldd	r14, Y+6	; 0x06
    2cc2:	fd 80       	ldd	r15, Y+5	; 0x05
    2cc4:	0c 81       	ldd	r16, Y+4	; 0x04
    2cc6:	1b 81       	ldd	r17, Y+3	; 0x03
    2cc8:	aa 81       	ldd	r26, Y+2	; 0x02
    2cca:	b9 81       	ldd	r27, Y+1	; 0x01
    2ccc:	ce 0f       	add	r28, r30
    2cce:	d1 1d       	adc	r29, r1
    2cd0:	0f b6       	in	r0, 0x3f	; 63
    2cd2:	f8 94       	cli
    2cd4:	de bf       	out	0x3e, r29	; 62
    2cd6:	0f be       	out	0x3f, r0	; 63
    2cd8:	cd bf       	out	0x3d, r28	; 61
    2cda:	ed 01       	movw	r28, r26
    2cdc:	08 95       	ret

00002cde <__tablejump2__>:
    2cde:	ee 0f       	add	r30, r30
    2ce0:	ff 1f       	adc	r31, r31

00002ce2 <__tablejump__>:
    2ce2:	05 90       	lpm	r0, Z+
    2ce4:	f4 91       	lpm	r31, Z
    2ce6:	e0 2d       	mov	r30, r0
    2ce8:	09 94       	ijmp

00002cea <__umulhisi3>:
    2cea:	a2 9f       	mul	r26, r18
    2cec:	b0 01       	movw	r22, r0
    2cee:	b3 9f       	mul	r27, r19
    2cf0:	c0 01       	movw	r24, r0
    2cf2:	a3 9f       	mul	r26, r19
    2cf4:	70 0d       	add	r23, r0
    2cf6:	81 1d       	adc	r24, r1
    2cf8:	11 24       	eor	r1, r1
    2cfa:	91 1d       	adc	r25, r1
    2cfc:	b2 9f       	mul	r27, r18
    2cfe:	70 0d       	add	r23, r0
    2d00:	81 1d       	adc	r24, r1
    2d02:	11 24       	eor	r1, r1
    2d04:	91 1d       	adc	r25, r1
    2d06:	08 95       	ret

00002d08 <malloc>:
    2d08:	cf 93       	push	r28
    2d0a:	df 93       	push	r29
    2d0c:	82 30       	cpi	r24, 0x02	; 2
    2d0e:	91 05       	cpc	r25, r1
    2d10:	10 f4       	brcc	.+4      	; 0x2d16 <malloc+0xe>
    2d12:	82 e0       	ldi	r24, 0x02	; 2
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	e0 91 d4 01 	lds	r30, 0x01D4
    2d1a:	f0 91 d5 01 	lds	r31, 0x01D5
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	a0 e0       	ldi	r26, 0x00	; 0
    2d24:	b0 e0       	ldi	r27, 0x00	; 0
    2d26:	30 97       	sbiw	r30, 0x00	; 0
    2d28:	39 f1       	breq	.+78     	; 0x2d78 <malloc+0x70>
    2d2a:	40 81       	ld	r20, Z
    2d2c:	51 81       	ldd	r21, Z+1	; 0x01
    2d2e:	48 17       	cp	r20, r24
    2d30:	59 07       	cpc	r21, r25
    2d32:	b8 f0       	brcs	.+46     	; 0x2d62 <malloc+0x5a>
    2d34:	48 17       	cp	r20, r24
    2d36:	59 07       	cpc	r21, r25
    2d38:	71 f4       	brne	.+28     	; 0x2d56 <malloc+0x4e>
    2d3a:	82 81       	ldd	r24, Z+2	; 0x02
    2d3c:	93 81       	ldd	r25, Z+3	; 0x03
    2d3e:	10 97       	sbiw	r26, 0x00	; 0
    2d40:	29 f0       	breq	.+10     	; 0x2d4c <malloc+0x44>
    2d42:	13 96       	adiw	r26, 0x03	; 3
    2d44:	9c 93       	st	X, r25
    2d46:	8e 93       	st	-X, r24
    2d48:	12 97       	sbiw	r26, 0x02	; 2
    2d4a:	2c c0       	rjmp	.+88     	; 0x2da4 <malloc+0x9c>
    2d4c:	90 93 d5 01 	sts	0x01D5, r25
    2d50:	80 93 d4 01 	sts	0x01D4, r24
    2d54:	27 c0       	rjmp	.+78     	; 0x2da4 <malloc+0x9c>
    2d56:	21 15       	cp	r18, r1
    2d58:	31 05       	cpc	r19, r1
    2d5a:	31 f0       	breq	.+12     	; 0x2d68 <malloc+0x60>
    2d5c:	42 17       	cp	r20, r18
    2d5e:	53 07       	cpc	r21, r19
    2d60:	18 f0       	brcs	.+6      	; 0x2d68 <malloc+0x60>
    2d62:	a9 01       	movw	r20, r18
    2d64:	db 01       	movw	r26, r22
    2d66:	01 c0       	rjmp	.+2      	; 0x2d6a <malloc+0x62>
    2d68:	ef 01       	movw	r28, r30
    2d6a:	9a 01       	movw	r18, r20
    2d6c:	bd 01       	movw	r22, r26
    2d6e:	df 01       	movw	r26, r30
    2d70:	02 80       	ldd	r0, Z+2	; 0x02
    2d72:	f3 81       	ldd	r31, Z+3	; 0x03
    2d74:	e0 2d       	mov	r30, r0
    2d76:	d7 cf       	rjmp	.-82     	; 0x2d26 <malloc+0x1e>
    2d78:	21 15       	cp	r18, r1
    2d7a:	31 05       	cpc	r19, r1
    2d7c:	f9 f0       	breq	.+62     	; 0x2dbc <malloc+0xb4>
    2d7e:	28 1b       	sub	r18, r24
    2d80:	39 0b       	sbc	r19, r25
    2d82:	24 30       	cpi	r18, 0x04	; 4
    2d84:	31 05       	cpc	r19, r1
    2d86:	80 f4       	brcc	.+32     	; 0x2da8 <malloc+0xa0>
    2d88:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d8c:	61 15       	cp	r22, r1
    2d8e:	71 05       	cpc	r23, r1
    2d90:	21 f0       	breq	.+8      	; 0x2d9a <malloc+0x92>
    2d92:	fb 01       	movw	r30, r22
    2d94:	93 83       	std	Z+3, r25	; 0x03
    2d96:	82 83       	std	Z+2, r24	; 0x02
    2d98:	04 c0       	rjmp	.+8      	; 0x2da2 <malloc+0x9a>
    2d9a:	90 93 d5 01 	sts	0x01D5, r25
    2d9e:	80 93 d4 01 	sts	0x01D4, r24
    2da2:	fe 01       	movw	r30, r28
    2da4:	32 96       	adiw	r30, 0x02	; 2
    2da6:	44 c0       	rjmp	.+136    	; 0x2e30 <malloc+0x128>
    2da8:	fe 01       	movw	r30, r28
    2daa:	e2 0f       	add	r30, r18
    2dac:	f3 1f       	adc	r31, r19
    2dae:	81 93       	st	Z+, r24
    2db0:	91 93       	st	Z+, r25
    2db2:	22 50       	subi	r18, 0x02	; 2
    2db4:	31 09       	sbc	r19, r1
    2db6:	39 83       	std	Y+1, r19	; 0x01
    2db8:	28 83       	st	Y, r18
    2dba:	3a c0       	rjmp	.+116    	; 0x2e30 <malloc+0x128>
    2dbc:	20 91 d2 01 	lds	r18, 0x01D2
    2dc0:	30 91 d3 01 	lds	r19, 0x01D3
    2dc4:	23 2b       	or	r18, r19
    2dc6:	41 f4       	brne	.+16     	; 0x2dd8 <malloc+0xd0>
    2dc8:	20 91 2d 01 	lds	r18, 0x012D
    2dcc:	30 91 2e 01 	lds	r19, 0x012E
    2dd0:	30 93 d3 01 	sts	0x01D3, r19
    2dd4:	20 93 d2 01 	sts	0x01D2, r18
    2dd8:	20 91 2b 01 	lds	r18, 0x012B
    2ddc:	30 91 2c 01 	lds	r19, 0x012C
    2de0:	21 15       	cp	r18, r1
    2de2:	31 05       	cpc	r19, r1
    2de4:	41 f4       	brne	.+16     	; 0x2df6 <malloc+0xee>
    2de6:	2d b7       	in	r18, 0x3d	; 61
    2de8:	3e b7       	in	r19, 0x3e	; 62
    2dea:	40 91 2f 01 	lds	r20, 0x012F
    2dee:	50 91 30 01 	lds	r21, 0x0130
    2df2:	24 1b       	sub	r18, r20
    2df4:	35 0b       	sbc	r19, r21
    2df6:	e0 91 d2 01 	lds	r30, 0x01D2
    2dfa:	f0 91 d3 01 	lds	r31, 0x01D3
    2dfe:	e2 17       	cp	r30, r18
    2e00:	f3 07       	cpc	r31, r19
    2e02:	a0 f4       	brcc	.+40     	; 0x2e2c <malloc+0x124>
    2e04:	2e 1b       	sub	r18, r30
    2e06:	3f 0b       	sbc	r19, r31
    2e08:	28 17       	cp	r18, r24
    2e0a:	39 07       	cpc	r19, r25
    2e0c:	78 f0       	brcs	.+30     	; 0x2e2c <malloc+0x124>
    2e0e:	ac 01       	movw	r20, r24
    2e10:	4e 5f       	subi	r20, 0xFE	; 254
    2e12:	5f 4f       	sbci	r21, 0xFF	; 255
    2e14:	24 17       	cp	r18, r20
    2e16:	35 07       	cpc	r19, r21
    2e18:	48 f0       	brcs	.+18     	; 0x2e2c <malloc+0x124>
    2e1a:	4e 0f       	add	r20, r30
    2e1c:	5f 1f       	adc	r21, r31
    2e1e:	50 93 d3 01 	sts	0x01D3, r21
    2e22:	40 93 d2 01 	sts	0x01D2, r20
    2e26:	81 93       	st	Z+, r24
    2e28:	91 93       	st	Z+, r25
    2e2a:	02 c0       	rjmp	.+4      	; 0x2e30 <malloc+0x128>
    2e2c:	e0 e0       	ldi	r30, 0x00	; 0
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	cf 01       	movw	r24, r30
    2e32:	df 91       	pop	r29
    2e34:	cf 91       	pop	r28
    2e36:	08 95       	ret

00002e38 <free>:
    2e38:	cf 93       	push	r28
    2e3a:	df 93       	push	r29
    2e3c:	00 97       	sbiw	r24, 0x00	; 0
    2e3e:	09 f4       	brne	.+2      	; 0x2e42 <free+0xa>
    2e40:	87 c0       	rjmp	.+270    	; 0x2f50 <free+0x118>
    2e42:	fc 01       	movw	r30, r24
    2e44:	32 97       	sbiw	r30, 0x02	; 2
    2e46:	13 82       	std	Z+3, r1	; 0x03
    2e48:	12 82       	std	Z+2, r1	; 0x02
    2e4a:	c0 91 d4 01 	lds	r28, 0x01D4
    2e4e:	d0 91 d5 01 	lds	r29, 0x01D5
    2e52:	20 97       	sbiw	r28, 0x00	; 0
    2e54:	81 f4       	brne	.+32     	; 0x2e76 <free+0x3e>
    2e56:	20 81       	ld	r18, Z
    2e58:	31 81       	ldd	r19, Z+1	; 0x01
    2e5a:	28 0f       	add	r18, r24
    2e5c:	39 1f       	adc	r19, r25
    2e5e:	80 91 d2 01 	lds	r24, 0x01D2
    2e62:	90 91 d3 01 	lds	r25, 0x01D3
    2e66:	82 17       	cp	r24, r18
    2e68:	93 07       	cpc	r25, r19
    2e6a:	79 f5       	brne	.+94     	; 0x2eca <free+0x92>
    2e6c:	f0 93 d3 01 	sts	0x01D3, r31
    2e70:	e0 93 d2 01 	sts	0x01D2, r30
    2e74:	6d c0       	rjmp	.+218    	; 0x2f50 <free+0x118>
    2e76:	de 01       	movw	r26, r28
    2e78:	20 e0       	ldi	r18, 0x00	; 0
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	ae 17       	cp	r26, r30
    2e7e:	bf 07       	cpc	r27, r31
    2e80:	50 f4       	brcc	.+20     	; 0x2e96 <free+0x5e>
    2e82:	12 96       	adiw	r26, 0x02	; 2
    2e84:	4d 91       	ld	r20, X+
    2e86:	5c 91       	ld	r21, X
    2e88:	13 97       	sbiw	r26, 0x03	; 3
    2e8a:	9d 01       	movw	r18, r26
    2e8c:	41 15       	cp	r20, r1
    2e8e:	51 05       	cpc	r21, r1
    2e90:	09 f1       	breq	.+66     	; 0x2ed4 <free+0x9c>
    2e92:	da 01       	movw	r26, r20
    2e94:	f3 cf       	rjmp	.-26     	; 0x2e7c <free+0x44>
    2e96:	b3 83       	std	Z+3, r27	; 0x03
    2e98:	a2 83       	std	Z+2, r26	; 0x02
    2e9a:	40 81       	ld	r20, Z
    2e9c:	51 81       	ldd	r21, Z+1	; 0x01
    2e9e:	84 0f       	add	r24, r20
    2ea0:	95 1f       	adc	r25, r21
    2ea2:	8a 17       	cp	r24, r26
    2ea4:	9b 07       	cpc	r25, r27
    2ea6:	71 f4       	brne	.+28     	; 0x2ec4 <free+0x8c>
    2ea8:	8d 91       	ld	r24, X+
    2eaa:	9c 91       	ld	r25, X
    2eac:	11 97       	sbiw	r26, 0x01	; 1
    2eae:	84 0f       	add	r24, r20
    2eb0:	95 1f       	adc	r25, r21
    2eb2:	02 96       	adiw	r24, 0x02	; 2
    2eb4:	91 83       	std	Z+1, r25	; 0x01
    2eb6:	80 83       	st	Z, r24
    2eb8:	12 96       	adiw	r26, 0x02	; 2
    2eba:	8d 91       	ld	r24, X+
    2ebc:	9c 91       	ld	r25, X
    2ebe:	13 97       	sbiw	r26, 0x03	; 3
    2ec0:	93 83       	std	Z+3, r25	; 0x03
    2ec2:	82 83       	std	Z+2, r24	; 0x02
    2ec4:	21 15       	cp	r18, r1
    2ec6:	31 05       	cpc	r19, r1
    2ec8:	29 f4       	brne	.+10     	; 0x2ed4 <free+0x9c>
    2eca:	f0 93 d5 01 	sts	0x01D5, r31
    2ece:	e0 93 d4 01 	sts	0x01D4, r30
    2ed2:	3e c0       	rjmp	.+124    	; 0x2f50 <free+0x118>
    2ed4:	d9 01       	movw	r26, r18
    2ed6:	13 96       	adiw	r26, 0x03	; 3
    2ed8:	fc 93       	st	X, r31
    2eda:	ee 93       	st	-X, r30
    2edc:	12 97       	sbiw	r26, 0x02	; 2
    2ede:	4d 91       	ld	r20, X+
    2ee0:	5d 91       	ld	r21, X+
    2ee2:	a4 0f       	add	r26, r20
    2ee4:	b5 1f       	adc	r27, r21
    2ee6:	ea 17       	cp	r30, r26
    2ee8:	fb 07       	cpc	r31, r27
    2eea:	79 f4       	brne	.+30     	; 0x2f0a <free+0xd2>
    2eec:	80 81       	ld	r24, Z
    2eee:	91 81       	ldd	r25, Z+1	; 0x01
    2ef0:	84 0f       	add	r24, r20
    2ef2:	95 1f       	adc	r25, r21
    2ef4:	02 96       	adiw	r24, 0x02	; 2
    2ef6:	d9 01       	movw	r26, r18
    2ef8:	11 96       	adiw	r26, 0x01	; 1
    2efa:	9c 93       	st	X, r25
    2efc:	8e 93       	st	-X, r24
    2efe:	82 81       	ldd	r24, Z+2	; 0x02
    2f00:	93 81       	ldd	r25, Z+3	; 0x03
    2f02:	13 96       	adiw	r26, 0x03	; 3
    2f04:	9c 93       	st	X, r25
    2f06:	8e 93       	st	-X, r24
    2f08:	12 97       	sbiw	r26, 0x02	; 2
    2f0a:	e0 e0       	ldi	r30, 0x00	; 0
    2f0c:	f0 e0       	ldi	r31, 0x00	; 0
    2f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f10:	9b 81       	ldd	r25, Y+3	; 0x03
    2f12:	00 97       	sbiw	r24, 0x00	; 0
    2f14:	19 f0       	breq	.+6      	; 0x2f1c <free+0xe4>
    2f16:	fe 01       	movw	r30, r28
    2f18:	ec 01       	movw	r28, r24
    2f1a:	f9 cf       	rjmp	.-14     	; 0x2f0e <free+0xd6>
    2f1c:	ce 01       	movw	r24, r28
    2f1e:	02 96       	adiw	r24, 0x02	; 2
    2f20:	28 81       	ld	r18, Y
    2f22:	39 81       	ldd	r19, Y+1	; 0x01
    2f24:	82 0f       	add	r24, r18
    2f26:	93 1f       	adc	r25, r19
    2f28:	20 91 d2 01 	lds	r18, 0x01D2
    2f2c:	30 91 d3 01 	lds	r19, 0x01D3
    2f30:	28 17       	cp	r18, r24
    2f32:	39 07       	cpc	r19, r25
    2f34:	69 f4       	brne	.+26     	; 0x2f50 <free+0x118>
    2f36:	30 97       	sbiw	r30, 0x00	; 0
    2f38:	29 f4       	brne	.+10     	; 0x2f44 <free+0x10c>
    2f3a:	10 92 d5 01 	sts	0x01D5, r1
    2f3e:	10 92 d4 01 	sts	0x01D4, r1
    2f42:	02 c0       	rjmp	.+4      	; 0x2f48 <free+0x110>
    2f44:	13 82       	std	Z+3, r1	; 0x03
    2f46:	12 82       	std	Z+2, r1	; 0x02
    2f48:	d0 93 d3 01 	sts	0x01D3, r29
    2f4c:	c0 93 d2 01 	sts	0x01D2, r28
    2f50:	df 91       	pop	r29
    2f52:	cf 91       	pop	r28
    2f54:	08 95       	ret

00002f56 <__eerd_word_m328p>:
    2f56:	a8 e1       	ldi	r26, 0x18	; 24
    2f58:	b0 e0       	ldi	r27, 0x00	; 0
    2f5a:	42 e0       	ldi	r20, 0x02	; 2
    2f5c:	50 e0       	ldi	r21, 0x00	; 0
    2f5e:	0c 94 b8 17 	jmp	0x2f70	; 0x2f70 <__eerd_blraw_m328p>

00002f62 <__eewr_word_m328p>:
    2f62:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <__eewr_byte_m328p>
    2f66:	27 2f       	mov	r18, r23
    2f68:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <__eewr_r18_m328p>

00002f6c <__eerd_block_m328p>:
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22

00002f70 <__eerd_blraw_m328p>:
    2f70:	fc 01       	movw	r30, r24
    2f72:	f9 99       	sbic	0x1f, 1	; 31
    2f74:	fe cf       	rjmp	.-4      	; 0x2f72 <__eerd_blraw_m328p+0x2>
    2f76:	06 c0       	rjmp	.+12     	; 0x2f84 <__eerd_blraw_m328p+0x14>
    2f78:	f2 bd       	out	0x22, r31	; 34
    2f7a:	e1 bd       	out	0x21, r30	; 33
    2f7c:	f8 9a       	sbi	0x1f, 0	; 31
    2f7e:	31 96       	adiw	r30, 0x01	; 1
    2f80:	00 b4       	in	r0, 0x20	; 32
    2f82:	0d 92       	st	X+, r0
    2f84:	41 50       	subi	r20, 0x01	; 1
    2f86:	50 40       	sbci	r21, 0x00	; 0
    2f88:	b8 f7       	brcc	.-18     	; 0x2f78 <__eerd_blraw_m328p+0x8>
    2f8a:	08 95       	ret

00002f8c <__eewr_byte_m328p>:
    2f8c:	26 2f       	mov	r18, r22

00002f8e <__eewr_r18_m328p>:
    2f8e:	f9 99       	sbic	0x1f, 1	; 31
    2f90:	fe cf       	rjmp	.-4      	; 0x2f8e <__eewr_r18_m328p>
    2f92:	1f ba       	out	0x1f, r1	; 31
    2f94:	92 bd       	out	0x22, r25	; 34
    2f96:	81 bd       	out	0x21, r24	; 33
    2f98:	20 bd       	out	0x20, r18	; 32
    2f9a:	0f b6       	in	r0, 0x3f	; 63
    2f9c:	f8 94       	cli
    2f9e:	fa 9a       	sbi	0x1f, 2	; 31
    2fa0:	f9 9a       	sbi	0x1f, 1	; 31
    2fa2:	0f be       	out	0x3f, r0	; 63
    2fa4:	01 96       	adiw	r24, 0x01	; 1
    2fa6:	08 95       	ret

00002fa8 <__do_global_dtors>:
    2fa8:	10 e0       	ldi	r17, 0x00	; 0
    2faa:	c4 e8       	ldi	r28, 0x84	; 132
    2fac:	d0 e0       	ldi	r29, 0x00	; 0
    2fae:	04 c0       	rjmp	.+8      	; 0x2fb8 <__do_global_dtors+0x10>
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <__tablejump__>
    2fb6:	22 96       	adiw	r28, 0x02	; 2
    2fb8:	c8 38       	cpi	r28, 0x88	; 136
    2fba:	d1 07       	cpc	r29, r17
    2fbc:	c9 f7       	brne	.-14     	; 0x2fb0 <__do_global_dtors+0x8>
    2fbe:	f8 94       	cli

00002fc0 <__stop_program>:
    2fc0:	ff cf       	rjmp	.-2      	; 0x2fc0 <__stop_program>
