
FYP - Line Maze.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00002fd6  0000308a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002fd6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  00800150  00800150  000030da  2**0
                  ALLOC
  3 .eeprom       00000014  00810000  00810000  000030da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00006b94  00000000  00000000  000030f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00008e23  00000000  00000000  00009c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000030  00000000  00000000  00012aa7  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000110  00000000  00000000  00012ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002b8d  00000000  00000000  00012be7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000006f7  00000000  00000000  00015774  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000d40  00000000  00000000  00015e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000400  00000000  00000000  00016bac  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000d0e  00000000  00000000  00016fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001771  00000000  00000000  00017cba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000240  00000000  00000000  0001942b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 44 00 	jmp	0x88	; 0x88 <__dtors_end>
       4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 9a 0f 	jmp	0x1f34	; 0x1f34 <__vector_9>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <__vector_13>
      38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 1f       	adc	r16, r16
      70:	1f 1f       	adc	r17, r31
      72:	1f 1f       	adc	r17, r31
      74:	1f 1f       	adc	r17, r31

00000076 <_ZL5bloop>:
      76:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

00000080 <__ctors_start>:
      80:	e8 07       	cpc	r30, r24
      82:	85 10       	cpse	r8, r5

00000084 <__ctors_end>:
      84:	ed 07       	cpc	r30, r29
      86:	86 10       	cpse	r8, r6

00000088 <__dtors_end>:
      88:	11 24       	eor	r1, r1
      8a:	1f be       	out	0x3f, r1	; 63
      8c:	cf ef       	ldi	r28, 0xFF	; 255
      8e:	d8 e0       	ldi	r29, 0x08	; 8
      90:	de bf       	out	0x3e, r29	; 62
      92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
      94:	11 e0       	ldi	r17, 0x01	; 1
      96:	a0 e0       	ldi	r26, 0x00	; 0
      98:	b1 e0       	ldi	r27, 0x01	; 1
      9a:	e6 ed       	ldi	r30, 0xD6	; 214
      9c:	ff e2       	ldi	r31, 0x2F	; 47
      9e:	02 c0       	rjmp	.+4      	; 0xa4 <__do_copy_data+0x10>
      a0:	05 90       	lpm	r0, Z+
      a2:	0d 92       	st	X+, r0
      a4:	a0 35       	cpi	r26, 0x50	; 80
      a6:	b1 07       	cpc	r27, r17
      a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0xc>

000000aa <__do_clear_bss>:
      aa:	21 e0       	ldi	r18, 0x01	; 1
      ac:	a0 e5       	ldi	r26, 0x50	; 80
      ae:	b1 e0       	ldi	r27, 0x01	; 1
      b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
      b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
      b4:	a6 3d       	cpi	r26, 0xD6	; 214
      b6:	b2 07       	cpc	r27, r18
      b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>

000000ba <__do_global_ctors>:
      ba:	10 e0       	ldi	r17, 0x00	; 0
      bc:	c4 e8       	ldi	r28, 0x84	; 132
      be:	d0 e0       	ldi	r29, 0x00	; 0
      c0:	04 c0       	rjmp	.+8      	; 0xca <__do_global_ctors+0x10>
      c2:	22 97       	sbiw	r28, 0x02	; 2
      c4:	fe 01       	movw	r30, r28
      c6:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__tablejump__>
      ca:	c0 38       	cpi	r28, 0x80	; 128
      cc:	d1 07       	cpc	r29, r17
      ce:	c9 f7       	brne	.-14     	; 0xc2 <__do_global_ctors+0x8>
      d0:	0e 94 72 07 	call	0xee4	; 0xee4 <main>
      d4:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__do_global_dtors>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <_ZN10cDirection11getOppositeEv>:
			faceInt = 4;
		}
		return static_cast<Direction>(faceInt - 1);
	}
	Direction getOpposite(){
		int faceInt = dir;
      dc:	fc 01       	movw	r30, r24
      de:	80 81       	ld	r24, Z
      e0:	90 e0       	ldi	r25, 0x00	; 0
		if (faceInt >= 3) {
      e2:	83 30       	cpi	r24, 0x03	; 3
      e4:	91 05       	cpc	r25, r1
      e6:	14 f0       	brlt	.+4      	; 0xec <_ZN10cDirection11getOppositeEv+0x10>
			faceInt = -1;
      e8:	8f ef       	ldi	r24, 0xFF	; 255
      ea:	9f ef       	ldi	r25, 0xFF	; 255
		}
		Direction temp = static_cast<Direction>(faceInt + 1);
      ec:	8f 5f       	subi	r24, 0xFF	; 255
		faceInt = temp;
      ee:	90 e0       	ldi	r25, 0x00	; 0
		if (faceInt >= 3) {
      f0:	83 30       	cpi	r24, 0x03	; 3
      f2:	91 05       	cpc	r25, r1
      f4:	11 f4       	brne	.+4      	; 0xfa <_ZN10cDirection11getOppositeEv+0x1e>
			faceInt = -1;
      f6:	8f ef       	ldi	r24, 0xFF	; 255
      f8:	9f ef       	ldi	r25, 0xFF	; 255
		}
		return static_cast<Direction>(faceInt + 1);
	}
      fa:	8f 5f       	subi	r24, 0xFF	; 255
      fc:	08 95       	ret

000000fe <_ZN4nodeC1Ev>:
	node* connections[4]; // 0 = South (where mouse came from), 1 = West, 2 = North, 3 = East
	int8_t costs[4];
	int8_t gCost;
	node* parent;

	node(){
      fe:	fc 01       	movw	r30, r24
		this->visited = false;
     100:	12 82       	std	Z+2, r1	; 0x02
		for (int i=0; i<4; i++){
			this->connections[i] = NULL;
     102:	14 82       	std	Z+4, r1	; 0x04
     104:	13 82       	std	Z+3, r1	; 0x03
			this->costs[i] = -1;
     106:	8f ef       	ldi	r24, 0xFF	; 255
     108:	83 87       	std	Z+11, r24	; 0x0b
	node* parent;

	node(){
		this->visited = false;
		for (int i=0; i<4; i++){
			this->connections[i] = NULL;
     10a:	16 82       	std	Z+6, r1	; 0x06
     10c:	15 82       	std	Z+5, r1	; 0x05
			this->costs[i] = -1;
     10e:	84 87       	std	Z+12, r24	; 0x0c
	node* parent;

	node(){
		this->visited = false;
		for (int i=0; i<4; i++){
			this->connections[i] = NULL;
     110:	10 86       	std	Z+8, r1	; 0x08
     112:	17 82       	std	Z+7, r1	; 0x07
			this->costs[i] = -1;
     114:	85 87       	std	Z+13, r24	; 0x0d
	node* parent;

	node(){
		this->visited = false;
		for (int i=0; i<4; i++){
			this->connections[i] = NULL;
     116:	12 86       	std	Z+10, r1	; 0x0a
     118:	11 86       	std	Z+9, r1	; 0x09
			this->costs[i] = -1;
     11a:	86 87       	std	Z+14, r24	; 0x0e
     11c:	87 87       	std	Z+15, r24	; 0x0f
     11e:	11 8a       	std	Z+17, r1	; 0x11
     120:	10 8a       	std	Z+16, r1	; 0x10
     122:	08 95       	ret

00000124 <_ZN4nodeD1Ev>:
			this->gCost = -1;
			this->parent = NULL;
		}
	}
	~node(){
     124:	ef 92       	push	r14
     126:	ff 92       	push	r15
     128:	0f 93       	push	r16
     12a:	1f 93       	push	r17
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	7c 01       	movw	r14, r24
     132:	c0 e0       	ldi	r28, 0x00	; 0
     134:	d0 e0       	ldi	r29, 0x00	; 0
     136:	f7 01       	movw	r30, r14
     138:	ec 0f       	add	r30, r28
     13a:	fd 1f       	adc	r31, r29
		for (int i=0; i<4; i++){
			delete connections[i];
     13c:	03 81       	ldd	r16, Z+3	; 0x03
     13e:	14 81       	ldd	r17, Z+4	; 0x04
     140:	01 15       	cp	r16, r1
     142:	11 05       	cpc	r17, r1
     144:	31 f0       	breq	.+12     	; 0x152 <_ZN4nodeD1Ev+0x2e>
     146:	c8 01       	movw	r24, r16
     148:	0e 94 92 00 	call	0x124	; 0x124 <_ZN4nodeD1Ev>
void* operator new(size_t objsize) {
	return malloc(objsize);
}

void operator delete(void* obj) {
	free(obj);
     14c:	c8 01       	movw	r24, r16
     14e:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <free>
     152:	22 96       	adiw	r28, 0x02	; 2
			this->gCost = -1;
			this->parent = NULL;
		}
	}
	~node(){
		for (int i=0; i<4; i++){
     154:	c8 30       	cpi	r28, 0x08	; 8
     156:	d1 05       	cpc	r29, r1
     158:	71 f7       	brne	.-36     	; 0x136 <_ZN4nodeD1Ev+0x12>
			delete connections[i];
		}
	}
     15a:	df 91       	pop	r29
     15c:	cf 91       	pop	r28
     15e:	1f 91       	pop	r17
     160:	0f 91       	pop	r16
     162:	ff 90       	pop	r15
     164:	ef 90       	pop	r14
     166:	08 95       	ret

00000168 <_ZN9NodeStack4pushEP4node9Direction>:
	
	StackNode* _getNodeByPosition(StackNode* n, position p);
	StackNode* _getNodeWithUnvisitedConnections(StackNode* n);
};

void NodeStack::push(node* n, Direction d) {
     168:	ef 92       	push	r14
     16a:	ff 92       	push	r15
     16c:	0f 93       	push	r16
     16e:	1f 93       	push	r17
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	1f 92       	push	r1
     176:	cd b7       	in	r28, 0x3d	; 61
     178:	de b7       	in	r29, 0x3e	; 62
     17a:	7c 01       	movw	r14, r24
     17c:	8b 01       	movw	r16, r22
#define UTILITY_H_

#include <stdlib.h>

void* operator new(size_t objsize) {
	return malloc(objsize);
     17e:	85 e0       	ldi	r24, 0x05	; 5
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	49 83       	std	Y+1, r20	; 0x01
     184:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <malloc>
     188:	fc 01       	movw	r30, r24
	top = new StackNode(n, top, d);
     18a:	d7 01       	movw	r26, r14
     18c:	8d 91       	ld	r24, X+
     18e:	9c 91       	ld	r25, X
     190:	11 97       	sbiw	r26, 0x01	; 1
	struct StackNode {
		node* data;
		StackNode* next;
		Direction enteredFrom;

		StackNode(node* newData, StackNode* nextNode, Direction d) : data(newData), next(nextNode), enteredFrom(d) {}
     192:	11 83       	std	Z+1, r17	; 0x01
     194:	00 83       	st	Z, r16
     196:	93 83       	std	Z+3, r25	; 0x03
     198:	82 83       	std	Z+2, r24	; 0x02
     19a:	49 81       	ldd	r20, Y+1	; 0x01
     19c:	44 83       	std	Z+4, r20	; 0x04
	StackNode* _getNodeByPosition(StackNode* n, position p);
	StackNode* _getNodeWithUnvisitedConnections(StackNode* n);
};

void NodeStack::push(node* n, Direction d) {
	top = new StackNode(n, top, d);
     19e:	ed 93       	st	X+, r30
     1a0:	fc 93       	st	X, r31
}
     1a2:	0f 90       	pop	r0
     1a4:	df 91       	pop	r29
     1a6:	cf 91       	pop	r28
     1a8:	1f 91       	pop	r17
     1aa:	0f 91       	pop	r16
     1ac:	ff 90       	pop	r15
     1ae:	ef 90       	pop	r14
     1b0:	08 95       	ret

000001b2 <_ZN9NodeStack3popEv>:

Direction NodeStack::pop() {
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
	}
	return NULL;
}

bool NodeStack::isEmpty() {
	if (top == 0) {
     1b6:	fc 01       	movw	r30, r24
     1b8:	c0 81       	ld	r28, Z
     1ba:	d1 81       	ldd	r29, Z+1	; 0x01
     1bc:	20 97       	sbiw	r28, 0x00	; 0
     1be:	11 f4       	brne	.+4      	; 0x1c4 <_ZN9NodeStack3popEv+0x12>
		delete topNode;
		Direction d = topNode->enteredFrom;
		return d;
		//return data;
	}
	return NORTH;
     1c0:	82 e0       	ldi	r24, 0x02	; 2
     1c2:	09 c0       	rjmp	.+18     	; 0x1d6 <_ZN9NodeStack3popEv+0x24>
}

Direction NodeStack::pop() {
	if ( !isEmpty() ) {
		StackNode *topNode = top;
		top = top->next;
     1c4:	2a 81       	ldd	r18, Y+2	; 0x02
     1c6:	3b 81       	ldd	r19, Y+3	; 0x03
     1c8:	fc 01       	movw	r30, r24
     1ca:	31 83       	std	Z+1, r19	; 0x01
     1cc:	20 83       	st	Z, r18
}

void operator delete(void* obj) {
	free(obj);
     1ce:	ce 01       	movw	r24, r28
     1d0:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <free>
		//node* data = topNode->data;
		delete topNode;
		Direction d = topNode->enteredFrom;
     1d4:	8c 81       	ldd	r24, Y+4	; 0x04
		return d;
		//return data;
	}
	return NORTH;
}
     1d6:	df 91       	pop	r29
     1d8:	cf 91       	pop	r28
     1da:	08 95       	ret

000001dc <_ZN9NodeStack6getTopEv>:
	}
	return NULL;
}

bool NodeStack::isEmpty() {
	if (top == 0) {
     1dc:	dc 01       	movw	r26, r24
     1de:	ed 91       	ld	r30, X+
     1e0:	fc 91       	ld	r31, X
     1e2:	30 97       	sbiw	r30, 0x00	; 0
     1e4:	19 f4       	brne	.+6      	; 0x1ec <_ZN9NodeStack6getTopEv+0x10>

node* NodeStack::getTop() {
	if ( !isEmpty() ) {
		return top->data;
	}
	return NULL;
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	08 95       	ret
	return NORTH;
}

node* NodeStack::getTop() {
	if ( !isEmpty() ) {
		return top->data;
     1ec:	80 81       	ld	r24, Z
     1ee:	91 81       	ldd	r25, Z+1	; 0x01
	}
	return NULL;
}
     1f0:	08 95       	ret

000001f2 <_Z22load_custom_charactersv>:
	
	speed = 60;
}

void load_custom_characters(){
	lcd_load_custom_character(levels+0,0); // no offset, e.g. one bar
     1f2:	60 e0       	ldi	r22, 0x00	; 0
     1f4:	88 e6       	ldi	r24, 0x68	; 104
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	0e 94 de 0c 	call	0x19bc	; 0x19bc <lcd_load_custom_character>
	lcd_load_custom_character(levels+1,1); // two bars
     1fc:	61 e0       	ldi	r22, 0x01	; 1
     1fe:	89 e6       	ldi	r24, 0x69	; 105
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 de 0c 	call	0x19bc	; 0x19bc <lcd_load_custom_character>
	lcd_load_custom_character(levels+2,2); // etc...
     206:	62 e0       	ldi	r22, 0x02	; 2
     208:	8a e6       	ldi	r24, 0x6A	; 106
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 de 0c 	call	0x19bc	; 0x19bc <lcd_load_custom_character>
	lcd_load_custom_character(levels+3,3);
     210:	63 e0       	ldi	r22, 0x03	; 3
     212:	8b e6       	ldi	r24, 0x6B	; 107
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 de 0c 	call	0x19bc	; 0x19bc <lcd_load_custom_character>
	lcd_load_custom_character(levels+4,4);
     21a:	64 e0       	ldi	r22, 0x04	; 4
     21c:	8c e6       	ldi	r24, 0x6C	; 108
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 de 0c 	call	0x19bc	; 0x19bc <lcd_load_custom_character>
	lcd_load_custom_character(levels+5,5);
     224:	65 e0       	ldi	r22, 0x05	; 5
     226:	8d e6       	ldi	r24, 0x6D	; 109
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 de 0c 	call	0x19bc	; 0x19bc <lcd_load_custom_character>
	lcd_load_custom_character(levels+6,6);
     22e:	66 e0       	ldi	r22, 0x06	; 6
     230:	8e e6       	ldi	r24, 0x6E	; 110
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	0e 94 de 0c 	call	0x19bc	; 0x19bc <lcd_load_custom_character>
	clear();
     238:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <clear>

0000023c <_Z16display_readingsPKj>:
}

void display_readings(const unsigned int *calibrated_values){
     23c:	cf 92       	push	r12
     23e:	df 92       	push	r13
     240:	ef 92       	push	r14
     242:	ff 92       	push	r15
     244:	0f 93       	push	r16
     246:	1f 93       	push	r17
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
     24c:	cd b7       	in	r28, 0x3d	; 61
     24e:	de b7       	in	r29, 0x3e	; 62
     250:	2a 97       	sbiw	r28, 0x0a	; 10
     252:	0f b6       	in	r0, 0x3f	; 63
     254:	f8 94       	cli
     256:	de bf       	out	0x3e, r29	; 62
     258:	0f be       	out	0x3f, r0	; 63
     25a:	cd bf       	out	0x3d, r28	; 61
     25c:	7c 01       	movw	r14, r24
	print(" ");
     25e:	8b e3       	ldi	r24, 0x3B	; 59
     260:	91 e0       	ldi	r25, 0x01	; 1
     262:	0e 94 75 0d 	call	0x1aea	; 0x1aea <print>
     266:	87 01       	movw	r16, r14
	unsigned char i;
	for(i=0;i<5;i++) {
     268:	d1 2c       	mov	r13, r1
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     26a:	8a e0       	ldi	r24, 0x0A	; 10
     26c:	c8 2e       	mov	r12, r24
		char c = display_characters[calibrated_values[i]/101];
     26e:	95 e6       	ldi	r25, 0x65	; 101
     270:	e9 2e       	mov	r14, r25
     272:	f1 2c       	mov	r15, r1

void display_readings(const unsigned int *calibrated_values){
	print(" ");
	unsigned char i;
	for(i=0;i<5;i++) {
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     274:	e1 e3       	ldi	r30, 0x31	; 49
     276:	f1 e0       	ldi	r31, 0x01	; 1
     278:	de 01       	movw	r26, r28
     27a:	11 96       	adiw	r26, 0x01	; 1
     27c:	8c 2d       	mov	r24, r12
     27e:	01 90       	ld	r0, Z+
     280:	0d 92       	st	X+, r0
     282:	8a 95       	dec	r24
     284:	e1 f7       	brne	.-8      	; 0x27e <_Z16display_readingsPKj+0x42>
		char c = display_characters[calibrated_values[i]/101];
     286:	f8 01       	movw	r30, r16
     288:	81 91       	ld	r24, Z+
     28a:	91 91       	ld	r25, Z+
     28c:	8f 01       	movw	r16, r30
     28e:	b7 01       	movw	r22, r14
     290:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <__udivmodhi4>
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	8c 0f       	add	r24, r28
     29a:	9d 1f       	adc	r25, r29
     29c:	68 0f       	add	r22, r24
     29e:	79 1f       	adc	r23, r25
		print_character(c);
     2a0:	fb 01       	movw	r30, r22
     2a2:	80 81       	ld	r24, Z
     2a4:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <print_character>
}

void display_readings(const unsigned int *calibrated_values){
	print(" ");
	unsigned char i;
	for(i=0;i<5;i++) {
     2a8:	d3 94       	inc	r13
     2aa:	f5 e0       	ldi	r31, 0x05	; 5
     2ac:	df 12       	cpse	r13, r31
     2ae:	e2 cf       	rjmp	.-60     	; 0x274 <_Z16display_readingsPKj+0x38>
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
		char c = display_characters[calibrated_values[i]/101];
		print_character(c);
	}
}
     2b0:	2a 96       	adiw	r28, 0x0a	; 10
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	f8 94       	cli
     2b6:	de bf       	out	0x3e, r29	; 62
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	cd bf       	out	0x3d, r28	; 61
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	1f 91       	pop	r17
     2c2:	0f 91       	pop	r16
     2c4:	ff 90       	pop	r15
     2c6:	ef 90       	pop	r14
     2c8:	df 90       	pop	r13
     2ca:	cf 90       	pop	r12
     2cc:	08 95       	ret

000002ce <_Z5hCostP4nodeS0_>:
		return (top == 0);
	}
	node* operator[] (int8_t i) { return nodes[i]; }
};

int8_t hCost(node* a, node* b){
     2ce:	fc 01       	movw	r30, r24
	int8_t x1 = a->pos.x,
     2d0:	80 81       	ld	r24, Z
	x2 = b->pos.x,
     2d2:	db 01       	movw	r26, r22
     2d4:	3c 91       	ld	r19, X
	y1 = a->pos.y,
     2d6:	91 81       	ldd	r25, Z+1	; 0x01
	y2 = b->pos.y;
     2d8:	11 96       	adiw	r26, 0x01	; 1
     2da:	2c 91       	ld	r18, X

	int8_t xDiff = (x1 > x2) ? x1 - x2 : x2 - x1;
     2dc:	38 17       	cp	r19, r24
     2de:	14 f4       	brge	.+4      	; 0x2e4 <_Z5hCostP4nodeS0_+0x16>
     2e0:	83 1b       	sub	r24, r19
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <_Z5hCostP4nodeS0_+0x1a>
     2e4:	38 1b       	sub	r19, r24
     2e6:	83 2f       	mov	r24, r19
	int8_t yDiff = (y1 > y2) ? y1 - y2 : y2 - y1;
     2e8:	29 17       	cp	r18, r25
     2ea:	14 f4       	brge	.+4      	; 0x2f0 <_Z5hCostP4nodeS0_+0x22>
     2ec:	92 1b       	sub	r25, r18
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <_Z5hCostP4nodeS0_+0x26>
     2f0:	29 1b       	sub	r18, r25
     2f2:	92 2f       	mov	r25, r18
	int8_t totalDiff = xDiff + yDiff;

	return totalDiff;
}
     2f4:	89 0f       	add	r24, r25
     2f6:	08 95       	ret

000002f8 <_Z15saveCalibrationv>:
	}
	
	return costCounter;
}

void saveCalibration(){
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	c0 e0       	ldi	r28, 0x00	; 0
     2fe:	d0 e0       	ldi	r29, 0x00	; 0
	int i;
	for(i=0;i<5;i++){
		eeprom_write_word(
		&calibrated_minimum_on[i],
		get_line_sensors_calibrated_minimum_on()[i]
     300:	0e 94 45 10 	call	0x208a	; 0x208a <get_line_sensors_calibrated_minimum_on>
		);
     304:	8c 0f       	add	r24, r28
     306:	9d 1f       	adc	r25, r29
     308:	fc 01       	movw	r30, r24
     30a:	60 81       	ld	r22, Z
     30c:	71 81       	ldd	r23, Z+1	; 0x01
     30e:	ce 01       	movw	r24, r28
     310:	80 50       	subi	r24, 0x00	; 0
     312:	90 40       	sbci	r25, 0x00	; 0
     314:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__eewr_word_m328p>

		eeprom_write_word(
		&calibrated_maximum_on[i],
		get_line_sensors_calibrated_maximum_on()[i]
     318:	0e 94 4a 10 	call	0x2094	; 0x2094 <get_line_sensors_calibrated_maximum_on>
		);
     31c:	8c 0f       	add	r24, r28
     31e:	9d 1f       	adc	r25, r29
     320:	fc 01       	movw	r30, r24
     322:	60 81       	ld	r22, Z
     324:	71 81       	ldd	r23, Z+1	; 0x01
     326:	ce 01       	movw	r24, r28
     328:	86 5f       	subi	r24, 0xF6	; 246
     32a:	9f 4f       	sbci	r25, 0xFF	; 255
     32c:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <__eewr_word_m328p>
     330:	22 96       	adiw	r28, 0x02	; 2
	return costCounter;
}

void saveCalibration(){
	int i;
	for(i=0;i<5;i++){
     332:	ca 30       	cpi	r28, 0x0A	; 10
     334:	d1 05       	cpc	r29, r1
     336:	21 f7       	brne	.-56     	; 0x300 <_Z15saveCalibrationv+0x8>
		eeprom_write_word(
		&calibrated_maximum_on[i],
		get_line_sensors_calibrated_maximum_on()[i]
		);
	}
}
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	08 95       	ret

0000033e <_Z9calibratev>:
		char c = display_characters[calibrated_values[i]/101];
		print_character(c);
	}
}

void calibrate(){
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
	unsigned int counter;
	delay_ms(1000);
     342:	88 ee       	ldi	r24, 0xE8	; 232
     344:	93 e0       	ldi	r25, 0x03	; 3
     346:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <delay_ms>
     34a:	cc ee       	ldi	r28, 0xEC	; 236
     34c:	df ef       	ldi	r29, 0xFF	; 255
	for(counter=0;counter<80;counter++){
		if(counter < 20 || counter >= 60){
     34e:	c8 32       	cpi	r28, 0x28	; 40
     350:	d1 05       	cpc	r29, r1
     352:	28 f0       	brcs	.+10     	; 0x35e <_Z9calibratev+0x20>
			set_motors(40,-40);
     354:	68 ed       	ldi	r22, 0xD8	; 216
     356:	7f ef       	ldi	r23, 0xFF	; 255
     358:	88 e2       	ldi	r24, 0x28	; 40
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	04 c0       	rjmp	.+8      	; 0x366 <_Z9calibratev+0x28>
			} else {
			set_motors(-40,40);
     35e:	68 e2       	ldi	r22, 0x28	; 40
     360:	70 e0       	ldi	r23, 0x00	; 0
     362:	88 ed       	ldi	r24, 0xD8	; 216
     364:	9f ef       	ldi	r25, 0xFF	; 255
     366:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <set_motors>
		}
		calibrate_line_sensors(IR_EMITTERS_ON);
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	0e 94 36 10 	call	0x206c	; 0x206c <calibrate_line_sensors>
		delay_ms(20);
     370:	84 e1       	ldi	r24, 0x14	; 20
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <delay_ms>
     378:	21 96       	adiw	r28, 0x01	; 1
}

void calibrate(){
	unsigned int counter;
	delay_ms(1000);
	for(counter=0;counter<80;counter++){
     37a:	cc 33       	cpi	r28, 0x3C	; 60
     37c:	d1 05       	cpc	r29, r1
     37e:	39 f7       	brne	.-50     	; 0x34e <_Z9calibratev+0x10>
			set_motors(-40,40);
		}
		calibrate_line_sensors(IR_EMITTERS_ON);
		delay_ms(20);
	}
	set_motors(0,0);
     380:	60 e0       	ldi	r22, 0x00	; 0
     382:	70 e0       	ldi	r23, 0x00	; 0
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <set_motors>
	
	saveCalibration();
}
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
		calibrate_line_sensors(IR_EMITTERS_ON);
		delay_ms(20);
	}
	set_motors(0,0);
	
	saveCalibration();
     390:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <_Z15saveCalibrationv>

00000394 <_Z15loadCalibrationv>:
		get_line_sensors_calibrated_maximum_on()[i]
		);
	}
}

void loadCalibration(){
     394:	0f 93       	push	r16
     396:	1f 93       	push	r17
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
	calibrate_line_sensors(IR_EMITTERS_ON); // need to do this to allocate the arrays
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	0e 94 36 10 	call	0x206c	; 0x206c <calibrate_line_sensors>
     3a2:	c0 e0       	ldi	r28, 0x00	; 0
     3a4:	d0 e0       	ldi	r29, 0x00	; 0
	int i;
	for(i=0;i<5;i++){
		get_line_sensors_calibrated_minimum_on()[i] =
     3a6:	0e 94 45 10 	call	0x208a	; 0x208a <get_line_sensors_calibrated_minimum_on>
     3aa:	8c 01       	movw	r16, r24
     3ac:	0c 0f       	add	r16, r28
     3ae:	1d 1f       	adc	r17, r29
		eeprom_read_word(&calibrated_minimum_on[i]);
     3b0:	ce 01       	movw	r24, r28
     3b2:	80 50       	subi	r24, 0x00	; 0
     3b4:	90 40       	sbci	r25, 0x00	; 0
     3b6:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <__eerd_word_m328p>
     3ba:	f8 01       	movw	r30, r16
     3bc:	91 83       	std	Z+1, r25	; 0x01
     3be:	80 83       	st	Z, r24

		get_line_sensors_calibrated_maximum_on()[i] =
     3c0:	0e 94 4a 10 	call	0x2094	; 0x2094 <get_line_sensors_calibrated_maximum_on>
     3c4:	8c 01       	movw	r16, r24
     3c6:	0c 0f       	add	r16, r28
     3c8:	1d 1f       	adc	r17, r29
		eeprom_read_word(&calibrated_maximum_on[i]);
     3ca:	ce 01       	movw	r24, r28
     3cc:	86 5f       	subi	r24, 0xF6	; 246
     3ce:	9f 4f       	sbci	r25, 0xFF	; 255
     3d0:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <__eerd_word_m328p>
     3d4:	f8 01       	movw	r30, r16
     3d6:	91 83       	std	Z+1, r25	; 0x01
     3d8:	80 83       	st	Z, r24
     3da:	22 96       	adiw	r28, 0x02	; 2
}

void loadCalibration(){
	calibrate_line_sensors(IR_EMITTERS_ON); // need to do this to allocate the arrays
	int i;
	for(i=0;i<5;i++){
     3dc:	ca 30       	cpi	r28, 0x0A	; 10
     3de:	d1 05       	cpc	r29, r1
     3e0:	11 f7       	brne	.-60     	; 0x3a6 <_Z15loadCalibrationv+0x12>
		eeprom_read_word(&calibrated_minimum_on[i]);

		get_line_sensors_calibrated_maximum_on()[i] =
		eeprom_read_word(&calibrated_maximum_on[i]);
	}
}
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	08 95       	ret

000003ec <_Z10initialisev>:
#include "lineMaze.h"

void initialise(){
	pololu_3pi_init(2000);
     3ec:	80 ed       	ldi	r24, 0xD0	; 208
     3ee:	97 e0       	ldi	r25, 0x07	; 7
     3f0:	0e 94 81 10 	call	0x2102	; 0x2102 <pololu_3pi_init>
	load_custom_characters();
     3f4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_Z22load_custom_charactersv>
	load_custom_characters();
     3f8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_Z22load_custom_charactersv>
	loadCalibration();
     3fc:	0e 94 ca 01 	call	0x394	; 0x394 <_Z15loadCalibrationv>
	play_from_program_space(bloop);
     400:	86 e7       	ldi	r24, 0x76	; 118
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 1b 0c 	call	0x1836	; 0x1836 <play_from_program_space>
	
	foundFinish = false;
     408:	10 92 ce 01 	sts	0x01CE, r1
	isLeft = false;
     40c:	10 92 d0 01 	sts	0x01D0, r1
	isRight = false;
     410:	10 92 cf 01 	sts	0x01CF, r1
	isForward = false;
     414:	10 92 d1 01 	sts	0x01D1, r1
	
	currentDir.dir = NORTH;
     418:	82 e0       	ldi	r24, 0x02	; 2
     41a:	80 93 cd 01 	sts	0x01CD, r24
	currentPos.x = 0;
     41e:	10 92 cb 01 	sts	0x01CB, r1
	currentPos.y = 0;
     422:	10 92 cc 01 	sts	0x01CC, r1
	
	costCounter = 0;
     426:	10 92 c4 01 	sts	0x01C4, r1
	
	speed = 60;
     42a:	8c e3       	ldi	r24, 0x3C	; 60
     42c:	80 93 c3 01 	sts	0x01C3, r24
     430:	08 95       	ret

00000432 <_Z4stopv>:
	}
	stop();
}

void stop(){
	set_motors(0, 0);
     432:	60 e0       	ldi	r22, 0x00	; 0
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <set_motors>

0000043e <_Z4turn4Turn>:
		get_line_sensors_calibrated_maximum_on()[i] =
		eeprom_read_word(&calibrated_maximum_on[i]);
	}
}

void turn(Turn t){
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
     446:	2a 97       	sbiw	r28, 0x0a	; 10
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	f8 94       	cli
     44c:	de bf       	out	0x3e, r29	; 62
     44e:	0f be       	out	0x3f, r0	; 63
     450:	cd bf       	out	0x3d, r28	; 61
	unsigned int sensors[5];
	unsigned int turnCalibration = 500;
	
	switch(t){
     452:	81 30       	cpi	r24, 0x01	; 1
     454:	61 f1       	breq	.+88     	; 0x4ae <_Z4turn4Turn+0x70>
     456:	70 f0       	brcs	.+28     	; 0x474 <_Z4turn4Turn+0x36>
     458:	82 30       	cpi	r24, 0x02	; 2
     45a:	09 f0       	breq	.+2      	; 0x45e <_Z4turn4Turn+0x20>
     45c:	5d c0       	rjmp	.+186    	; 0x518 <_Z4turn4Turn+0xda>
			read_line(sensors,IR_EMITTERS_ON);
		}
		currentDir.next();
		break;
		case BACK:
		set_motors(40, -40);
     45e:	68 ed       	ldi	r22, 0xD8	; 216
     460:	7f ef       	ldi	r23, 0xFF	; 255
     462:	88 e2       	ldi	r24, 0x28	; 40
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <set_motors>
		delay_ms(700);
     46a:	8c eb       	ldi	r24, 0xBC	; 188
     46c:	92 e0       	ldi	r25, 0x02	; 2
     46e:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <delay_ms>
     472:	34 c0       	rjmp	.+104    	; 0x4dc <_Z4turn4Turn+0x9e>
	unsigned int sensors[5];
	unsigned int turnCalibration = 500;
	
	switch(t){
		case LEFT:
		set_motors(-40, 40);
     474:	68 e2       	ldi	r22, 0x28	; 40
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	88 ed       	ldi	r24, 0xD8	; 216
     47a:	9f ef       	ldi	r25, 0xFF	; 255
     47c:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <set_motors>
		delay_ms(100);
     480:	84 e6       	ldi	r24, 0x64	; 100
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <delay_ms>
		read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] < turnCalibration){
			read_line(sensors,IR_EMITTERS_ON);
     488:	61 e0       	ldi	r22, 0x01	; 1
     48a:	ce 01       	movw	r24, r28
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	0e 94 3c 10 	call	0x2078	; 0x2078 <read_line>
	switch(t){
		case LEFT:
		set_motors(-40, 40);
		delay_ms(100);
		read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] < turnCalibration){
     492:	8d 81       	ldd	r24, Y+5	; 0x05
     494:	9e 81       	ldd	r25, Y+6	; 0x06
     496:	84 3f       	cpi	r24, 0xF4	; 244
     498:	91 40       	sbci	r25, 0x01	; 1
     49a:	b0 f3       	brcs	.-20     	; 0x488 <_Z4turn4Turn+0x4a>
			faceInt = -1;
		}
		this->dir = static_cast<Direction>(faceInt + 1);
	}
	void previous() {
		int faceInt = dir;
     49c:	80 91 cd 01 	lds	r24, 0x01CD
     4a0:	90 e0       	ldi	r25, 0x00	; 0
		if (faceInt <= 0) {
     4a2:	00 97       	sbiw	r24, 0x00	; 0
     4a4:	11 f4       	brne	.+4      	; 0x4aa <_Z4turn4Turn+0x6c>
			faceInt = 4;
     4a6:	84 e0       	ldi	r24, 0x04	; 4
     4a8:	90 e0       	ldi	r25, 0x00	; 0
		}
		this->dir = static_cast<Direction>(faceInt - 1);
     4aa:	81 50       	subi	r24, 0x01	; 1
     4ac:	33 c0       	rjmp	.+102    	; 0x514 <_Z4turn4Turn+0xd6>
			read_line(sensors,IR_EMITTERS_ON);
		}
		currentDir.previous();
		break;
		case RIGHT:
		set_motors(40, -40);
     4ae:	68 ed       	ldi	r22, 0xD8	; 216
     4b0:	7f ef       	ldi	r23, 0xFF	; 255
     4b2:	88 e2       	ldi	r24, 0x28	; 40
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <set_motors>
		delay_ms(100);
     4ba:	84 e6       	ldi	r24, 0x64	; 100
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <delay_ms>
		read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] < turnCalibration){
			read_line(sensors,IR_EMITTERS_ON);
     4c2:	61 e0       	ldi	r22, 0x01	; 1
     4c4:	ce 01       	movw	r24, r28
     4c6:	01 96       	adiw	r24, 0x01	; 1
     4c8:	0e 94 3c 10 	call	0x2078	; 0x2078 <read_line>
		break;
		case RIGHT:
		set_motors(40, -40);
		delay_ms(100);
		read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] < turnCalibration){
     4cc:	8d 81       	ldd	r24, Y+5	; 0x05
     4ce:	9e 81       	ldd	r25, Y+6	; 0x06
     4d0:	84 3f       	cpi	r24, 0xF4	; 244
     4d2:	91 40       	sbci	r25, 0x01	; 1
     4d4:	b0 f3       	brcs	.-20     	; 0x4c2 <_Z4turn4Turn+0x84>

struct cDirection {
	Direction dir;

	void next() {
		int faceInt = dir;
     4d6:	80 91 cd 01 	lds	r24, 0x01CD
     4da:	15 c0       	rjmp	.+42     	; 0x506 <_Z4turn4Turn+0xc8>
		case BACK:
		set_motors(40, -40);
		delay_ms(700);
		read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] < turnCalibration){
			read_line(sensors,IR_EMITTERS_ON);
     4dc:	61 e0       	ldi	r22, 0x01	; 1
     4de:	ce 01       	movw	r24, r28
     4e0:	01 96       	adiw	r24, 0x01	; 1
     4e2:	0e 94 3c 10 	call	0x2078	; 0x2078 <read_line>
		break;
		case BACK:
		set_motors(40, -40);
		delay_ms(700);
		read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] < turnCalibration){
     4e6:	8d 81       	ldd	r24, Y+5	; 0x05
     4e8:	9e 81       	ldd	r25, Y+6	; 0x06
     4ea:	84 3f       	cpi	r24, 0xF4	; 244
     4ec:	91 40       	sbci	r25, 0x01	; 1
     4ee:	b0 f3       	brcs	.-20     	; 0x4dc <_Z4turn4Turn+0x9e>
			read_line(sensors,IR_EMITTERS_ON);
		}
		stop();
     4f0:	0e 94 19 02 	call	0x432	; 0x432 <_Z4stopv>
     4f4:	80 91 cd 01 	lds	r24, 0x01CD
     4f8:	90 e0       	ldi	r25, 0x00	; 0
		if (faceInt == 3) {
     4fa:	83 30       	cpi	r24, 0x03	; 3
     4fc:	91 05       	cpc	r25, r1
     4fe:	11 f4       	brne	.+4      	; 0x504 <_Z4turn4Turn+0xc6>
			faceInt = -1;
     500:	8f ef       	ldi	r24, 0xFF	; 255
     502:	9f ef       	ldi	r25, 0xFF	; 255
		}
		this->dir = static_cast<Direction>(faceInt + 1);
     504:	8f 5f       	subi	r24, 0xFF	; 255

struct cDirection {
	Direction dir;

	void next() {
		int faceInt = dir;
     506:	90 e0       	ldi	r25, 0x00	; 0
		if (faceInt == 3) {
     508:	83 30       	cpi	r24, 0x03	; 3
     50a:	91 05       	cpc	r25, r1
     50c:	11 f4       	brne	.+4      	; 0x512 <_Z4turn4Turn+0xd4>
			faceInt = -1;
     50e:	8f ef       	ldi	r24, 0xFF	; 255
     510:	9f ef       	ldi	r25, 0xFF	; 255
		}
		this->dir = static_cast<Direction>(faceInt + 1);
     512:	8f 5f       	subi	r24, 0xFF	; 255
     514:	80 93 cd 01 	sts	0x01CD, r24
		currentDir.next();
		break;
		default:
		break;
	}
	stop();
     518:	0e 94 19 02 	call	0x432	; 0x432 <_Z4stopv>
}
     51c:	2a 96       	adiw	r28, 0x0a	; 10
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	f8 94       	cli
     522:	de bf       	out	0x3e, r29	; 62
     524:	0f be       	out	0x3f, r0	; 63
     526:	cd bf       	out	0x3d, r28	; 61
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	08 95       	ret

0000052e <_Z7faceDir9Direction>:
	}
	
	return 0;
}

void faceDir(Direction d){
     52e:	cf 93       	push	r28
     530:	c8 2f       	mov	r28, r24
			faceInt = 4;
		}
		this->dir = static_cast<Direction>(faceInt - 1);
	}
	Direction getNext() {
		int faceInt = dir;
     532:	80 91 cd 01 	lds	r24, 0x01CD
     536:	28 2f       	mov	r18, r24
     538:	30 e0       	ldi	r19, 0x00	; 0
		if (faceInt >= 3) {
     53a:	23 30       	cpi	r18, 0x03	; 3
     53c:	31 05       	cpc	r19, r1
     53e:	0c f0       	brlt	.+2      	; 0x542 <_Z7faceDir9Direction+0x14>
			faceInt = -1;
     540:	8f ef       	ldi	r24, 0xFF	; 255
		}
		return static_cast<Direction>(faceInt + 1);
     542:	8f 5f       	subi	r24, 0xFF	; 255
	if (currentDir.getNext() == d){
     544:	8c 13       	cpse	r24, r28
     546:	02 c0       	rjmp	.+4      	; 0x54c <_Z7faceDir9Direction+0x1e>
		turn(RIGHT);
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	11 c0       	rjmp	.+34     	; 0x56e <_Z7faceDir9Direction+0x40>
	}
	Direction getPrevious() {
		int faceInt = dir;
		if (faceInt <= 0) {
     54c:	21 15       	cp	r18, r1
     54e:	31 05       	cpc	r19, r1
     550:	11 f4       	brne	.+4      	; 0x556 <_Z7faceDir9Direction+0x28>
			faceInt = 4;
     552:	24 e0       	ldi	r18, 0x04	; 4
     554:	30 e0       	ldi	r19, 0x00	; 0
		}
		return static_cast<Direction>(faceInt - 1);
     556:	21 50       	subi	r18, 0x01	; 1
		} else if(currentDir.getPrevious() == d){
     558:	2c 13       	cpse	r18, r28
     55a:	02 c0       	rjmp	.+4      	; 0x560 <_Z7faceDir9Direction+0x32>
		turn(LEFT);
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	07 c0       	rjmp	.+14     	; 0x56e <_Z7faceDir9Direction+0x40>
		} else if(currentDir.getOpposite() == d){
     560:	8d ec       	ldi	r24, 0xCD	; 205
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN10cDirection11getOppositeEv>
     568:	8c 13       	cpse	r24, r28
     56a:	04 c0       	rjmp	.+8      	; 0x574 <_Z7faceDir9Direction+0x46>
		turn(BACK);
     56c:	82 e0       	ldi	r24, 0x02	; 2
	}
}
     56e:	cf 91       	pop	r28
	if (currentDir.getNext() == d){
		turn(RIGHT);
		} else if(currentDir.getPrevious() == d){
		turn(LEFT);
		} else if(currentDir.getOpposite() == d){
		turn(BACK);
     570:	0c 94 1f 02 	jmp	0x43e	; 0x43e <_Z4turn4Turn>
	}
}
     574:	cf 91       	pop	r28
     576:	08 95       	ret

00000578 <_Z13followSegmentv>:

void stop(){
	set_motors(0, 0);
}

int8_t followSegment(){
     578:	2f 92       	push	r2
     57a:	3f 92       	push	r3
     57c:	4f 92       	push	r4
     57e:	5f 92       	push	r5
     580:	6f 92       	push	r6
     582:	7f 92       	push	r7
     584:	8f 92       	push	r8
     586:	9f 92       	push	r9
     588:	af 92       	push	r10
     58a:	bf 92       	push	r11
     58c:	cf 92       	push	r12
     58e:	df 92       	push	r13
     590:	ef 92       	push	r14
     592:	ff 92       	push	r15
     594:	0f 93       	push	r16
     596:	1f 93       	push	r17
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
     59c:	cd b7       	in	r28, 0x3d	; 61
     59e:	de b7       	in	r29, 0x3e	; 62
     5a0:	2a 97       	sbiw	r28, 0x0a	; 10
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
static inline unsigned long millis(void) { return get_ms(); }
     5ac:	0e 94 1c 10 	call	0x2038	; 0x2038 <get_ms>
     5b0:	4b 01       	movw	r8, r22
     5b2:	5c 01       	movw	r10, r24
	unsigned long startTime = millis();
	
	int last_proportional = 0;
	long integral=0;
     5b4:	c1 2c       	mov	r12, r1
     5b6:	d1 2c       	mov	r13, r1
     5b8:	76 01       	movw	r14, r12
}

int8_t followSegment(){
	unsigned long startTime = millis();
	
	int last_proportional = 0;
     5ba:	21 2c       	mov	r2, r1
     5bc:	31 2c       	mov	r3, r1
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     5be:	60 e1       	ldi	r22, 0x10	; 16
     5c0:	46 2e       	mov	r4, r22
     5c2:	67 e2       	ldi	r22, 0x27	; 39
     5c4:	56 2e       	mov	r5, r22
     5c6:	61 2c       	mov	r6, r1
     5c8:	71 2c       	mov	r7, r1
		// Normally, we will be following a line.  The code below is
		// similar to the 3pi-linefollower-pid example, but the maximum
		// speed is turned down to 60 for reliability.
		
		// Get the position of the line.
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     5ca:	61 e0       	ldi	r22, 0x01	; 1
     5cc:	ce 01       	movw	r24, r28
     5ce:	01 96       	adiw	r24, 0x01	; 1
     5d0:	0e 94 3c 10 	call	0x2078	; 0x2078 <read_line>
		
		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 1900;
     5d4:	8c 01       	movw	r16, r24
     5d6:	0c 56       	subi	r16, 0x6C	; 108
     5d8:	17 40       	sbci	r17, 0x07	; 7
		
		// Compute the derivative (change) and integral (sum) of the
		// position.
		int derivative = proportional - last_proportional;
		integral += proportional;
     5da:	c8 01       	movw	r24, r16
     5dc:	aa 27       	eor	r26, r26
     5de:	97 fd       	sbrc	r25, 7
     5e0:	a0 95       	com	r26
     5e2:	ba 2f       	mov	r27, r26
     5e4:	c8 0e       	add	r12, r24
     5e6:	d9 1e       	adc	r13, r25
     5e8:	ea 1e       	adc	r14, r26
     5ea:	fb 1e       	adc	r15, r27
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     5ec:	c7 01       	movw	r24, r14
     5ee:	b6 01       	movw	r22, r12
     5f0:	a3 01       	movw	r20, r6
     5f2:	92 01       	movw	r18, r4
     5f4:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__divmodsi4>
		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 1900;
		
		// Compute the derivative (change) and integral (sum) of the
		// position.
		int derivative = proportional - last_proportional;
     5f8:	b8 01       	movw	r22, r16
     5fa:	62 19       	sub	r22, r2
     5fc:	73 09       	sbc	r23, r3
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     5fe:	cb 01       	movw	r24, r22
     600:	88 0f       	add	r24, r24
     602:	99 1f       	adc	r25, r25
     604:	86 0f       	add	r24, r22
     606:	97 1f       	adc	r25, r23
     608:	97 fd       	sbrc	r25, 7
     60a:	01 96       	adiw	r24, 0x01	; 1
     60c:	fc 01       	movw	r30, r24
     60e:	f5 95       	asr	r31
     610:	e7 95       	ror	r30
     612:	e2 0f       	add	r30, r18
     614:	f3 1f       	adc	r31, r19
     616:	c8 01       	movw	r24, r16
     618:	64 e1       	ldi	r22, 0x14	; 20
     61a:	70 e0       	ldi	r23, 0x00	; 0
     61c:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <__divmodhi4>
		
		// Compute the actual motor settings.  We never set either motor
		// to a negative value.
		const int max = speed; // the maximum speed
     620:	80 91 c3 01 	lds	r24, 0x01C3
     624:	99 27       	eor	r25, r25
     626:	87 fd       	sbrc	r24, 7
     628:	90 95       	com	r25
     62a:	e6 0f       	add	r30, r22
     62c:	f7 1f       	adc	r31, r23
     62e:	8e 17       	cp	r24, r30
     630:	9f 07       	cpc	r25, r31
     632:	0c f4       	brge	.+2      	; 0x636 <_Z13followSegmentv+0xbe>
     634:	fc 01       	movw	r30, r24
		if(power_difference > max) {
			power_difference = max;
		}
		if(power_difference < -max) {
     636:	44 27       	eor	r20, r20
     638:	55 27       	eor	r21, r21
     63a:	48 1b       	sub	r20, r24
     63c:	59 0b       	sbc	r21, r25
     63e:	9f 01       	movw	r18, r30
     640:	e4 17       	cp	r30, r20
     642:	f5 07       	cpc	r31, r21
     644:	0c f4       	brge	.+2      	; 0x648 <_Z13followSegmentv+0xd0>
     646:	9a 01       	movw	r18, r20
			power_difference = -max;
		}
		
		if(power_difference < 0) {
			set_motors(max+power_difference,max);
     648:	bc 01       	movw	r22, r24
		}
		if(power_difference < -max) {
			power_difference = -max;
		}
		
		if(power_difference < 0) {
     64a:	37 ff       	sbrs	r19, 7
     64c:	03 c0       	rjmp	.+6      	; 0x654 <_Z13followSegmentv+0xdc>
			set_motors(max+power_difference,max);
     64e:	82 0f       	add	r24, r18
     650:	93 1f       	adc	r25, r19
     652:	02 c0       	rjmp	.+4      	; 0x658 <_Z13followSegmentv+0xe0>
			} else {
			set_motors(max,max-power_difference);
     654:	62 1b       	sub	r22, r18
     656:	73 0b       	sbc	r23, r19
     658:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <set_motors>
		// We use the inner three sensors (1, 2, and 3) for
		// determining whether there is a line straight ahead, and the
		// sensors 0 and 4 for detecting lines going to the left and
		// right.

		if(sensors[1] < threshhold && sensors[2] < threshhold && sensors[3] < threshhold){
     65c:	8b 81       	ldd	r24, Y+3	; 0x03
     65e:	9c 81       	ldd	r25, Y+4	; 0x04
     660:	8e 35       	cpi	r24, 0x5E	; 94
     662:	91 40       	sbci	r25, 0x01	; 1
     664:	e8 f4       	brcc	.+58     	; 0x6a0 <_Z13followSegmentv+0x128>
     666:	8d 81       	ldd	r24, Y+5	; 0x05
     668:	9e 81       	ldd	r25, Y+6	; 0x06
     66a:	8e 35       	cpi	r24, 0x5E	; 94
     66c:	91 40       	sbci	r25, 0x01	; 1
     66e:	c0 f4       	brcc	.+48     	; 0x6a0 <_Z13followSegmentv+0x128>
     670:	8f 81       	ldd	r24, Y+7	; 0x07
     672:	98 85       	ldd	r25, Y+8	; 0x08
     674:	8e 35       	cpi	r24, 0x5E	; 94
     676:	91 40       	sbci	r25, 0x01	; 1
     678:	98 f4       	brcc	.+38     	; 0x6a0 <_Z13followSegmentv+0x128>
			// There is no line visible ahead, and we didn't see any
			// intersection.  Must be a dead end.
			
			isLeft = false;
     67a:	10 92 d0 01 	sts	0x01D0, r1
			isRight = false;
     67e:	10 92 cf 01 	sts	0x01CF, r1
			isForward = false;
     682:	10 92 d1 01 	sts	0x01D1, r1
			
			set_motors(40, 40);
     686:	68 e2       	ldi	r22, 0x28	; 40
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	88 e2       	ldi	r24, 0x28	; 40
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <set_motors>
			delay_ms(40);
     692:	88 e2       	ldi	r24, 0x28	; 40
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <delay_ms>
			
			stop();
     69a:	0e 94 19 02 	call	0x432	; 0x432 <_Z4stopv>
			
			break;
     69e:	7f c0       	rjmp	.+254    	; 0x79e <_Z13followSegmentv+0x226>
		} else if(sensors[0] > threshhold || sensors[4] > threshhold) {
     6a0:	89 81       	ldd	r24, Y+1	; 0x01
     6a2:	9a 81       	ldd	r25, Y+2	; 0x02
     6a4:	8f 35       	cpi	r24, 0x5F	; 95
     6a6:	91 40       	sbci	r25, 0x01	; 1
     6a8:	38 f4       	brcc	.+14     	; 0x6b8 <_Z13followSegmentv+0x140>
     6aa:	89 85       	ldd	r24, Y+9	; 0x09
     6ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     6ae:	8f 35       	cpi	r24, 0x5F	; 95
     6b0:	91 40       	sbci	r25, 0x01	; 1
     6b2:	10 f4       	brcc	.+4      	; 0x6b8 <_Z13followSegmentv+0x140>
		// position.
		int derivative = proportional - last_proportional;
		integral += proportional;
		
		// Remember the last position.
		last_proportional = proportional;
     6b4:	18 01       	movw	r2, r16
     6b6:	89 cf       	rjmp	.-238    	; 0x5ca <_Z13followSegmentv+0x52>
			stop();
			
			break;
		} else if(sensors[0] > threshhold || sensors[4] > threshhold) {
			// Found an intersection.
			set_motors(40, 40);
     6b8:	68 e2       	ldi	r22, 0x28	; 40
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	88 e2       	ldi	r24, 0x28	; 40
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <set_motors>
			delay_ms(50);
     6c4:	82 e3       	ldi	r24, 0x32	; 50
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <delay_ms>
			
			read_line(sensors,IR_EMITTERS_ON);
     6cc:	61 e0       	ldi	r22, 0x01	; 1
     6ce:	ce 01       	movw	r24, r28
     6d0:	01 96       	adiw	r24, 0x01	; 1
     6d2:	0e 94 3c 10 	call	0x2078	; 0x2078 <read_line>
			isLeft = (sensors[0] > 500);
     6d6:	21 e0       	ldi	r18, 0x01	; 1
     6d8:	89 81       	ldd	r24, Y+1	; 0x01
     6da:	9a 81       	ldd	r25, Y+2	; 0x02
     6dc:	85 3f       	cpi	r24, 0xF5	; 245
     6de:	91 40       	sbci	r25, 0x01	; 1
     6e0:	08 f4       	brcc	.+2      	; 0x6e4 <_Z13followSegmentv+0x16c>
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	20 93 d0 01 	sts	0x01D0, r18
			isRight = (sensors[4] > 500);
     6e8:	21 e0       	ldi	r18, 0x01	; 1
     6ea:	89 85       	ldd	r24, Y+9	; 0x09
     6ec:	9a 85       	ldd	r25, Y+10	; 0x0a
     6ee:	85 3f       	cpi	r24, 0xF5	; 245
     6f0:	91 40       	sbci	r25, 0x01	; 1
     6f2:	08 f4       	brcc	.+2      	; 0x6f6 <_Z13followSegmentv+0x17e>
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	20 93 cf 01 	sts	0x01CF, r18

			set_motors(40, 40);
     6fa:	68 e2       	ldi	r22, 0x28	; 40
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	88 e2       	ldi	r24, 0x28	; 40
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <set_motors>
			delay_ms(200);
     706:	88 ec       	ldi	r24, 0xC8	; 200
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <delay_ms>
			stop();
     70e:	0e 94 19 02 	call	0x432	; 0x432 <_Z4stopv>
			
			read_line(sensors,IR_EMITTERS_ON);
     712:	61 e0       	ldi	r22, 0x01	; 1
     714:	ce 01       	movw	r24, r28
     716:	01 96       	adiw	r24, 0x01	; 1
     718:	0e 94 3c 10 	call	0x2078	; 0x2078 <read_line>
			
			if (sensors[0] > threshhold && sensors[1] > threshhold && sensors[2] > threshhold && sensors[3] > threshhold && sensors[4] > threshhold){
     71c:	29 81       	ldd	r18, Y+1	; 0x01
     71e:	3a 81       	ldd	r19, Y+2	; 0x02
     720:	8b 81       	ldd	r24, Y+3	; 0x03
     722:	9c 81       	ldd	r25, Y+4	; 0x04
     724:	2f 35       	cpi	r18, 0x5F	; 95
     726:	31 40       	sbci	r19, 0x01	; 1
     728:	20 f1       	brcs	.+72     	; 0x772 <_Z13followSegmentv+0x1fa>
     72a:	8f 35       	cpi	r24, 0x5F	; 95
     72c:	21 e0       	ldi	r18, 0x01	; 1
     72e:	92 07       	cpc	r25, r18
     730:	00 f1       	brcs	.+64     	; 0x772 <_Z13followSegmentv+0x1fa>
     732:	2d 81       	ldd	r18, Y+5	; 0x05
     734:	3e 81       	ldd	r19, Y+6	; 0x06
     736:	2f 35       	cpi	r18, 0x5F	; 95
     738:	31 40       	sbci	r19, 0x01	; 1
     73a:	d8 f0       	brcs	.+54     	; 0x772 <_Z13followSegmentv+0x1fa>
     73c:	2f 81       	ldd	r18, Y+7	; 0x07
     73e:	38 85       	ldd	r19, Y+8	; 0x08
     740:	2f 35       	cpi	r18, 0x5F	; 95
     742:	31 40       	sbci	r19, 0x01	; 1
     744:	b0 f0       	brcs	.+44     	; 0x772 <_Z13followSegmentv+0x1fa>
     746:	29 85       	ldd	r18, Y+9	; 0x09
     748:	3a 85       	ldd	r19, Y+10	; 0x0a
     74a:	2f 35       	cpi	r18, 0x5F	; 95
     74c:	31 40       	sbci	r19, 0x01	; 1
     74e:	88 f0       	brcs	.+34     	; 0x772 <_Z13followSegmentv+0x1fa>
				play_frequency(2500, 100, 10);
     750:	4a e0       	ldi	r20, 0x0A	; 10
     752:	64 e6       	ldi	r22, 0x64	; 100
     754:	70 e0       	ldi	r23, 0x00	; 0
     756:	84 ec       	ldi	r24, 0xC4	; 196
     758:	99 e0       	ldi	r25, 0x09	; 9
     75a:	0e 94 12 0a 	call	0x1424	; 0x1424 <play_frequency>
				
				foundFinish = true;
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	80 93 ce 01 	sts	0x01CE, r24
				isLeft = false;
     764:	10 92 d0 01 	sts	0x01D0, r1
				isRight = false;
     768:	10 92 cf 01 	sts	0x01CF, r1
				isForward = false;
     76c:	10 92 d1 01 	sts	0x01D1, r1
				break;
     770:	16 c0       	rjmp	.+44     	; 0x79e <_Z13followSegmentv+0x226>
			} else {
				foundFinish = false;
     772:	10 92 ce 01 	sts	0x01CE, r1
			}
			
			isForward = (sensors[1] > threshhold || sensors[2] > threshhold || sensors[3] > threshhold);
     776:	8f 35       	cpi	r24, 0x5F	; 95
     778:	91 40       	sbci	r25, 0x01	; 1
     77a:	70 f4       	brcc	.+28     	; 0x798 <_Z13followSegmentv+0x220>
     77c:	8d 81       	ldd	r24, Y+5	; 0x05
     77e:	9e 81       	ldd	r25, Y+6	; 0x06
     780:	8f 35       	cpi	r24, 0x5F	; 95
     782:	91 40       	sbci	r25, 0x01	; 1
     784:	48 f4       	brcc	.+18     	; 0x798 <_Z13followSegmentv+0x220>
     786:	21 e0       	ldi	r18, 0x01	; 1
     788:	8f 81       	ldd	r24, Y+7	; 0x07
     78a:	98 85       	ldd	r25, Y+8	; 0x08
     78c:	8f 35       	cpi	r24, 0x5F	; 95
     78e:	91 40       	sbci	r25, 0x01	; 1
     790:	08 f4       	brcc	.+2      	; 0x794 <_Z13followSegmentv+0x21c>
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	82 2f       	mov	r24, r18
     796:	01 c0       	rjmp	.+2      	; 0x79a <_Z13followSegmentv+0x222>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	80 93 d1 01 	sts	0x01D1, r24
     79e:	0e 94 1c 10 	call	0x2038	; 0x2038 <get_ms>
			
			break;
		}
	}
	
	unsigned long totalTime = millis() - startTime;
     7a2:	68 19       	sub	r22, r8
     7a4:	79 09       	sbc	r23, r9
     7a6:	8a 09       	sbc	r24, r10
     7a8:	9b 09       	sbc	r25, r11
	
	if (totalTime >= 50 && totalTime <= 850){
     7aa:	8b 01       	movw	r16, r22
     7ac:	9c 01       	movw	r18, r24
     7ae:	02 53       	subi	r16, 0x32	; 50
     7b0:	11 09       	sbc	r17, r1
     7b2:	21 09       	sbc	r18, r1
     7b4:	31 09       	sbc	r19, r1
     7b6:	01 32       	cpi	r16, 0x21	; 33
     7b8:	13 40       	sbci	r17, 0x03	; 3
     7ba:	21 05       	cpc	r18, r1
     7bc:	31 05       	cpc	r19, r1
     7be:	18 f1       	brcs	.+70     	; 0x806 <_Z13followSegmentv+0x28e>
		return 1;
	} else if(totalTime > 850 && totalTime <= 1300){
     7c0:	8b 01       	movw	r16, r22
     7c2:	9c 01       	movw	r18, r24
     7c4:	03 55       	subi	r16, 0x53	; 83
     7c6:	13 40       	sbci	r17, 0x03	; 3
     7c8:	21 09       	sbc	r18, r1
     7ca:	31 09       	sbc	r19, r1
     7cc:	02 3c       	cpi	r16, 0xC2	; 194
     7ce:	11 40       	sbci	r17, 0x01	; 1
     7d0:	21 05       	cpc	r18, r1
     7d2:	31 05       	cpc	r19, r1
     7d4:	d0 f0       	brcs	.+52     	; 0x80a <_Z13followSegmentv+0x292>
		return 2;
	} else if(totalTime > 1300 && totalTime <= 1850){
     7d6:	8b 01       	movw	r16, r22
     7d8:	9c 01       	movw	r18, r24
     7da:	05 51       	subi	r16, 0x15	; 21
     7dc:	15 40       	sbci	r17, 0x05	; 5
     7de:	21 09       	sbc	r18, r1
     7e0:	31 09       	sbc	r19, r1
     7e2:	06 32       	cpi	r16, 0x26	; 38
     7e4:	12 40       	sbci	r17, 0x02	; 2
     7e6:	21 05       	cpc	r18, r1
     7e8:	31 05       	cpc	r19, r1
     7ea:	88 f0       	brcs	.+34     	; 0x80e <_Z13followSegmentv+0x296>
		return 3;
	} else if(totalTime > 1850 && totalTime <= 2700){
     7ec:	dc 01       	movw	r26, r24
     7ee:	cb 01       	movw	r24, r22
     7f0:	8b 53       	subi	r24, 0x3B	; 59
     7f2:	97 40       	sbci	r25, 0x07	; 7
     7f4:	a1 09       	sbc	r26, r1
     7f6:	b1 09       	sbc	r27, r1
     7f8:	82 35       	cpi	r24, 0x52	; 82
     7fa:	93 40       	sbci	r25, 0x03	; 3
     7fc:	a1 05       	cpc	r26, r1
     7fe:	b1 05       	cpc	r27, r1
     800:	40 f4       	brcc	.+16     	; 0x812 <_Z13followSegmentv+0x29a>
		return 4;
     802:	84 e0       	ldi	r24, 0x04	; 4
     804:	07 c0       	rjmp	.+14     	; 0x814 <_Z13followSegmentv+0x29c>
	}
	
	unsigned long totalTime = millis() - startTime;
	
	if (totalTime >= 50 && totalTime <= 850){
		return 1;
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	05 c0       	rjmp	.+10     	; 0x814 <_Z13followSegmentv+0x29c>
	} else if(totalTime > 850 && totalTime <= 1300){
		return 2;
     80a:	82 e0       	ldi	r24, 0x02	; 2
     80c:	03 c0       	rjmp	.+6      	; 0x814 <_Z13followSegmentv+0x29c>
	} else if(totalTime > 1300 && totalTime <= 1850){
		return 3;
     80e:	83 e0       	ldi	r24, 0x03	; 3
     810:	01 c0       	rjmp	.+2      	; 0x814 <_Z13followSegmentv+0x29c>
	} else if(totalTime > 1850 && totalTime <= 2700){
		return 4;
	} else {
		return 0;
     812:	80 e0       	ldi	r24, 0x00	; 0
	}
     814:	2a 96       	adiw	r28, 0x0a	; 10
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	f8 94       	cli
     81a:	de bf       	out	0x3e, r29	; 62
     81c:	0f be       	out	0x3f, r0	; 63
     81e:	cd bf       	out	0x3d, r28	; 61
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	df 90       	pop	r13
     82e:	cf 90       	pop	r12
     830:	bf 90       	pop	r11
     832:	af 90       	pop	r10
     834:	9f 90       	pop	r9
     836:	8f 90       	pop	r8
     838:	7f 90       	pop	r7
     83a:	6f 90       	pop	r6
     83c:	5f 90       	pop	r5
     83e:	4f 90       	pop	r4
     840:	3f 90       	pop	r3
     842:	2f 90       	pop	r2
     844:	08 95       	ret

00000846 <_Z10followLinev>:
	play_from_program_space(bloop);
}


int8_t followLine(){
	costCounter = 0;
     846:	10 92 c4 01 	sts	0x01C4, r1
	
	while(1){
		uint8_t tilesTravelled = followSegment();
     84a:	0e 94 bc 02 	call	0x578	; 0x578 <_Z13followSegmentv>
		
		costCounter += tilesTravelled;
     84e:	90 91 c4 01 	lds	r25, 0x01C4
     852:	98 0f       	add	r25, r24
     854:	90 93 c4 01 	sts	0x01C4, r25
		
		switch(currentDir){
     858:	20 91 cd 01 	lds	r18, 0x01CD
     85c:	21 30       	cpi	r18, 0x01	; 1
     85e:	99 f0       	breq	.+38     	; 0x886 <_Z10followLinev+0x40>
     860:	60 f0       	brcs	.+24     	; 0x87a <_Z10followLinev+0x34>
     862:	22 30       	cpi	r18, 0x02	; 2
     864:	31 f0       	breq	.+12     	; 0x872 <_Z10followLinev+0x2c>
     866:	23 30       	cpi	r18, 0x03	; 3
     868:	99 f4       	brne	.+38     	; 0x890 <_Z10followLinev+0x4a>
			break;
			case SOUTH:
			currentPos.y -= tilesTravelled;
			break;
			case EAST:
			currentPos.x -= tilesTravelled;
     86a:	20 91 cb 01 	lds	r18, 0x01CB
     86e:	28 1b       	sub	r18, r24
     870:	0d c0       	rjmp	.+26     	; 0x88c <_Z10followLinev+0x46>
		
		costCounter += tilesTravelled;
		
		switch(currentDir){
			case NORTH:
			currentPos.y += tilesTravelled;
     872:	20 91 cc 01 	lds	r18, 0x01CC
     876:	28 0f       	add	r18, r24
     878:	03 c0       	rjmp	.+6      	; 0x880 <_Z10followLinev+0x3a>
			break;
			case SOUTH:
			currentPos.y -= tilesTravelled;
     87a:	20 91 cc 01 	lds	r18, 0x01CC
     87e:	28 1b       	sub	r18, r24
     880:	20 93 cc 01 	sts	0x01CC, r18
			break;
     884:	05 c0       	rjmp	.+10     	; 0x890 <_Z10followLinev+0x4a>
			case EAST:
			currentPos.x -= tilesTravelled;
			break;
			case WEST:
			currentPos.x += tilesTravelled;
     886:	20 91 cb 01 	lds	r18, 0x01CB
     88a:	28 0f       	add	r18, r24
     88c:	20 93 cb 01 	sts	0x01CB, r18
			break;
			default:
			break;
		}
		
		if (isLeft && !isRight && !isForward){
     890:	80 91 d0 01 	lds	r24, 0x01D0
     894:	20 91 cf 01 	lds	r18, 0x01CF
     898:	88 23       	and	r24, r24
     89a:	39 f0       	breq	.+14     	; 0x8aa <_Z10followLinev+0x64>
     89c:	21 11       	cpse	r18, r1
     89e:	05 c0       	rjmp	.+10     	; 0x8aa <_Z10followLinev+0x64>
     8a0:	80 91 d1 01 	lds	r24, 0x01D1
     8a4:	81 11       	cpse	r24, r1
     8a6:	0d c0       	rjmp	.+26     	; 0x8c2 <_Z10followLinev+0x7c>
     8a8:	09 c0       	rjmp	.+18     	; 0x8bc <_Z10followLinev+0x76>
			turn(LEFT);
		} else if(isRight && !isLeft && !isForward){
     8aa:	22 23       	and	r18, r18
     8ac:	51 f0       	breq	.+20     	; 0x8c2 <_Z10followLinev+0x7c>
     8ae:	81 11       	cpse	r24, r1
     8b0:	08 c0       	rjmp	.+16     	; 0x8c2 <_Z10followLinev+0x7c>
     8b2:	80 91 d1 01 	lds	r24, 0x01D1
     8b6:	81 11       	cpse	r24, r1
     8b8:	04 c0       	rjmp	.+8      	; 0x8c2 <_Z10followLinev+0x7c>
			turn(RIGHT);
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	0e 94 1f 02 	call	0x43e	; 0x43e <_Z4turn4Turn>
     8c0:	c4 cf       	rjmp	.-120    	; 0x84a <_Z10followLinev+0x4>
			break;
		}
	}
	
	return costCounter;
}
     8c2:	89 2f       	mov	r24, r25
     8c4:	08 95       	ret

000008c6 <_Z10travelPathP4node>:
	int8_t totalDiff = xDiff + yDiff;

	return totalDiff;
}

void travelPath(node* n){
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	ec 01       	movw	r28, r24
	while (n->parent != NULL){
     8cc:	28 89       	ldd	r18, Y+16	; 0x10
     8ce:	39 89       	ldd	r19, Y+17	; 0x11
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	b9 f0       	breq	.+46     	; 0x904 <__stack+0x5>
     8d6:	fe 01       	movw	r30, r28
	int8_t totalDiff = xDiff + yDiff;

	return totalDiff;
}

void travelPath(node* n){
     8d8:	80 e0       	ldi	r24, 0x00	; 0
	while (n->parent != NULL){
		int8_t i;
		for (i=0; i<4; i++){
			if (n->connections[i] != NULL){
     8da:	43 81       	ldd	r20, Z+3	; 0x03
     8dc:	54 81       	ldd	r21, Z+4	; 0x04
     8de:	41 15       	cp	r20, r1
     8e0:	51 05       	cpc	r21, r1
     8e2:	19 f0       	breq	.+6      	; 0x8ea <_Z10travelPathP4node+0x24>
				if (n->connections[i] == n->parent){
     8e4:	42 17       	cp	r20, r18
     8e6:	53 07       	cpc	r21, r19
     8e8:	29 f0       	breq	.+10     	; 0x8f4 <_Z10travelPathP4node+0x2e>
     8ea:	8f 5f       	subi	r24, 0xFF	; 255
     8ec:	32 96       	adiw	r30, 0x02	; 2
}

void travelPath(node* n){
	while (n->parent != NULL){
		int8_t i;
		for (i=0; i<4; i++){
     8ee:	84 30       	cpi	r24, 0x04	; 4
     8f0:	a1 f7       	brne	.-24     	; 0x8da <_Z10travelPathP4node+0x14>
     8f2:	f1 cf       	rjmp	.-30     	; 0x8d6 <_Z10travelPathP4node+0x10>
	}
}

void faceDir(int i){
	Direction d = static_cast<Direction>(i);
	faceDir(d);
     8f4:	0e 94 97 02 	call	0x52e	; 0x52e <_Z7faceDir9Direction>
		if (i != 4){
			cDirection cd;
			cd = i;
		
			faceDir(i);
			followLine();
     8f8:	0e 94 23 04 	call	0x846	; 0x846 <_Z10followLinev>

			n = n->parent;
     8fc:	08 88       	ldd	r0, Y+16	; 0x10
     8fe:	d9 89       	ldd	r29, Y+17	; 0x11
     900:	c0 2d       	mov	r28, r0
     902:	e4 cf       	rjmp	.-56     	; 0x8cc <_Z10travelPathP4node+0x6>
		}
	}
}
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	08 95       	ret

0000090a <_Z11astarTravelP4node>:

void astarTravel(node* target){
     90a:	6f 92       	push	r6
     90c:	7f 92       	push	r7
     90e:	8f 92       	push	r8
     910:	9f 92       	push	r9
     912:	af 92       	push	r10
     914:	bf 92       	push	r11
     916:	cf 92       	push	r12
     918:	df 92       	push	r13
     91a:	ef 92       	push	r14
     91c:	ff 92       	push	r15
     91e:	0f 93       	push	r16
     920:	1f 93       	push	r17
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	cd b7       	in	r28, 0x3d	; 61
     928:	de b7       	in	r29, 0x3e	; 62
     92a:	c2 5a       	subi	r28, 0xA2	; 162
     92c:	d1 09       	sbc	r29, r1
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	f8 94       	cli
     932:	de bf       	out	0x3e, r29	; 62
     934:	0f be       	out	0x3f, r0	; 63
     936:	cd bf       	out	0x3d, r28	; 61
	NodeList openlist;
	NodeList closedlist;

	target->gCost = 0;
     938:	fc 01       	movw	r30, r24
     93a:	17 86       	std	Z+15, r1	; 0x0f
	int8_t size(){
		return top;
	}
	void addNode(node* n){
		if (top < 40) {
			nodes[top] = n;
     93c:	64 96       	adiw	r28, 0x14	; 20
     93e:	9f af       	std	Y+63, r25	; 0x3f
     940:	8e af       	std	Y+62, r24	; 0x3e
     942:	64 97       	sbiw	r28, 0x14	; 20
	private:
	node* nodes[40];
	int8_t top;
	public:
	NodeList(){
		top = 0;
     944:	a1 2c       	mov	r10, r1
		return top;
	}
	void addNode(node* n){
		if (top < 40) {
			nodes[top] = n;
			top++;
     946:	bb 24       	eor	r11, r11
     948:	b3 94       	inc	r11
			return NULL;
		}
		return n;
	}
	node* getNodeAtIndex(int8_t i){
		if (i < top){
     94a:	1b 14       	cp	r1, r11
     94c:	2c f4       	brge	.+10     	; 0x958 <_Z11astarTravelP4node+0x4e>
			return nodes[i];
     94e:	64 96       	adiw	r28, 0x14	; 20
     950:	0e ad       	ldd	r16, Y+62	; 0x3e
     952:	1f ad       	ldd	r17, Y+63	; 0x3f
     954:	64 97       	sbiw	r28, 0x14	; 20
     956:	02 c0       	rjmp	.+4      	; 0x95c <_Z11astarTravelP4node+0x52>
		}
		return NULL;
     958:	00 e0       	ldi	r16, 0x00	; 0
     95a:	10 e0       	ldi	r17, 0x00	; 0
	openlist.addNode(target);

	while (!openlist.isEmpty()){

		node* lowest = openlist.getNodeAtIndex(0);
		int8_t lowestFCost = lowest->gCost + hCost(lowest, root);
     95c:	e0 90 c7 01 	lds	r14, 0x01C7
     960:	f0 90 c8 01 	lds	r15, 0x01C8
     964:	b7 01       	movw	r22, r14
     966:	c8 01       	movw	r24, r16
     968:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z5hCostP4nodeS0_>
     96c:	f8 01       	movw	r30, r16
     96e:	67 84       	ldd	r6, Z+15	; 0x0f
     970:	68 0e       	add	r6, r24
		for (int8_t i=0; i<openlist.size(); i++){
     972:	9e 01       	movw	r18, r28
     974:	2e 5a       	subi	r18, 0xAE	; 174
     976:	3f 4f       	sbci	r19, 0xFF	; 255
     978:	49 01       	movw	r8, r18
     97a:	71 2c       	mov	r7, r1
     97c:	7b 14       	cp	r7, r11
     97e:	8c f4       	brge	.+34     	; 0x9a2 <_Z11astarTravelP4node+0x98>
		return false;
	}
	bool isEmpty(){
		return (top == 0);
	}
	node* operator[] (int8_t i) { return nodes[i]; }
     980:	f4 01       	movw	r30, r8
     982:	c1 90       	ld	r12, Z+
     984:	d1 90       	ld	r13, Z+
     986:	4f 01       	movw	r8, r30
	while (!openlist.isEmpty()){

		node* lowest = openlist.getNodeAtIndex(0);
		int8_t lowestFCost = lowest->gCost + hCost(lowest, root);
		for (int8_t i=0; i<openlist.size(); i++){
			int8_t fCost = openlist[i]->gCost + hCost(openlist[i], root);
     988:	b7 01       	movw	r22, r14
     98a:	c6 01       	movw	r24, r12
     98c:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z5hCostP4nodeS0_>
     990:	f6 01       	movw	r30, r12
     992:	97 85       	ldd	r25, Z+15	; 0x0f
     994:	98 0f       	add	r25, r24
			if (fCost < lowestFCost){
     996:	96 15       	cp	r25, r6
     998:	0c f0       	brlt	.+2      	; 0x99c <_Z11astarTravelP4node+0x92>
     99a:	68 01       	movw	r12, r16
     99c:	73 94       	inc	r7

	while (!openlist.isEmpty()){

		node* lowest = openlist.getNodeAtIndex(0);
		int8_t lowestFCost = lowest->gCost + hCost(lowest, root);
		for (int8_t i=0; i<openlist.size(); i++){
     99e:	86 01       	movw	r16, r12
     9a0:	ed cf       	rjmp	.-38     	; 0x97c <_Z11astarTravelP4node+0x72>
     9a2:	f8 01       	movw	r30, r16
     9a4:	90 81       	ld	r25, Z
     9a6:	81 81       	ldd	r24, Z+1	; 0x01
     9a8:	fe 01       	movw	r30, r28
     9aa:	ee 5a       	subi	r30, 0xAE	; 174
     9ac:	ff 4f       	sbci	r31, 0xFF	; 255
		position p;
		p.x = x;
		p.y = y;
		int8_t i;
		node* n;
		for (i=0; i<top && nodes[i]->pos != p; ++i);
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	6b 15       	cp	r22, r11
     9b2:	5c f4       	brge	.+22     	; 0x9ca <_Z11astarTravelP4node+0xc0>
     9b4:	a1 91       	ld	r26, Z+
     9b6:	b1 91       	ld	r27, Z+
	int8_t x, y;
	bool operator == (const position &RHS) {
		return (this->x == RHS.x && this->y == RHS.y);
	}
	bool operator != (const position &RHS) {
		return (this->x != RHS.x || this->y != RHS.y);
     9b8:	2c 91       	ld	r18, X
     9ba:	29 13       	cpse	r18, r25
     9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <_Z11astarTravelP4node+0xbc>
     9be:	11 96       	adiw	r26, 0x01	; 1
     9c0:	2c 91       	ld	r18, X
     9c2:	28 17       	cp	r18, r24
     9c4:	11 f0       	breq	.+4      	; 0x9ca <_Z11astarTravelP4node+0xc0>
     9c6:	6f 5f       	subi	r22, 0xFF	; 255
     9c8:	f3 cf       	rjmp	.-26     	; 0x9b0 <_Z11astarTravelP4node+0xa6>
		n = nodes[i];
     9ca:	e6 2f       	mov	r30, r22
     9cc:	ee 0f       	add	r30, r30
     9ce:	ff 0b       	sbc	r31, r31
     9d0:	22 e5       	ldi	r18, 0x52	; 82
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	2c 0f       	add	r18, r28
     9d6:	3d 1f       	adc	r19, r29
     9d8:	e2 0f       	add	r30, r18
     9da:	f3 1f       	adc	r31, r19
     9dc:	70 81       	ld	r23, Z
     9de:	a1 81       	ldd	r26, Z+1	; 0x01
		if (i == top){
     9e0:	6b 11       	cpse	r22, r11
     9e2:	7a c0       	rjmp	.+244    	; 0xad8 <_Z11astarTravelP4node+0x1ce>
			return NULL;
     9e4:	61 2c       	mov	r6, r1
     9e6:	71 2c       	mov	r7, r1
	}
	int8_t size(){
		return top;
	}
	void addNode(node* n){
		if (top < 40) {
     9e8:	37 e2       	ldi	r19, 0x27	; 39
     9ea:	3a 15       	cp	r19, r10
     9ec:	64 f0       	brlt	.+24     	; 0xa06 <_Z11astarTravelP4node+0xfc>
			nodes[top] = n;
     9ee:	aa 2d       	mov	r26, r10
     9f0:	aa 0f       	add	r26, r26
     9f2:	bb 0b       	sbc	r27, r27
     9f4:	41 e0       	ldi	r20, 0x01	; 1
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	4c 0f       	add	r20, r28
     9fa:	5d 1f       	adc	r21, r29
     9fc:	a4 0f       	add	r26, r20
     9fe:	b5 1f       	adc	r27, r21
     a00:	6d 92       	st	X+, r6
     a02:	7c 92       	st	X, r7
			top++;
     a04:	a3 94       	inc	r10

		node* currentNode = openlist.removeNodeByPosition(lowest->pos);

		closedlist.addNode(currentNode);

		if (currentNode == root){
     a06:	6e 14       	cp	r6, r14
     a08:	7f 04       	cpc	r7, r15
     a0a:	c1 f4       	brne	.+48     	; 0xa3c <_Z11astarTravelP4node+0x132>
				}
			}
		}
	}
	
	travelPath(root);
     a0c:	c7 01       	movw	r24, r14
}
     a0e:	ce 55       	subi	r28, 0x5E	; 94
     a10:	df 4f       	sbci	r29, 0xFF	; 255
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	de bf       	out	0x3e, r29	; 62
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	cd bf       	out	0x3d, r28	; 61
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	ff 90       	pop	r15
     a26:	ef 90       	pop	r14
     a28:	df 90       	pop	r13
     a2a:	cf 90       	pop	r12
     a2c:	bf 90       	pop	r11
     a2e:	af 90       	pop	r10
     a30:	9f 90       	pop	r9
     a32:	8f 90       	pop	r8
     a34:	7f 90       	pop	r7
     a36:	6f 90       	pop	r6
				}
			}
		}
	}
	
	travelPath(root);
     a38:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <_Z10travelPathP4node>
     a3c:	b3 01       	movw	r22, r6

		node* currentNode = openlist.removeNodeByPosition(lowest->pos);

		closedlist.addNode(currentNode);

		if (currentNode == root){
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e0       	ldi	r19, 0x00	; 0
			break;
		}

		for (int8_t i=0; i<4; i++){
			node* child = currentNode->connections[i];
     a42:	fb 01       	movw	r30, r22
     a44:	a3 81       	ldd	r26, Z+3	; 0x03
     a46:	b4 81       	ldd	r27, Z+4	; 0x04
			if (child != NULL){
     a48:	10 97       	sbiw	r26, 0x00	; 0
     a4a:	d9 f1       	breq	.+118    	; 0xac2 <_Z11astarTravelP4node+0x1b8>
     a4c:	ce 01       	movw	r24, r28
     a4e:	01 96       	adiw	r24, 0x01	; 1
     a50:	10 e0       	ldi	r17, 0x00	; 0
		}
		return NULL;
	}
	bool isNodeInList(node* n){
		for (int8_t i=0; i<top; i++){
			if (n == nodes[i]){
     a52:	fc 01       	movw	r30, r24
     a54:	41 91       	ld	r20, Z+
     a56:	51 91       	ld	r21, Z+
     a58:	cf 01       	movw	r24, r30
     a5a:	a4 17       	cp	r26, r20
     a5c:	b5 07       	cpc	r27, r21
     a5e:	89 f1       	breq	.+98     	; 0xac2 <_Z11astarTravelP4node+0x1b8>
     a60:	1f 5f       	subi	r17, 0xFF	; 255
			return nodes[i];
		}
		return NULL;
	}
	bool isNodeInList(node* n){
		for (int8_t i=0; i<top; i++){
     a62:	1a 15       	cp	r17, r10
     a64:	b4 f3       	brlt	.-20     	; 0xa52 <_Z11astarTravelP4node+0x148>
     a66:	ce 01       	movw	r24, r28
     a68:	8e 5a       	subi	r24, 0xAE	; 174
     a6a:	9f 4f       	sbci	r25, 0xFF	; 255
     a6c:	10 e0       	ldi	r17, 0x00	; 0
     a6e:	1b 15       	cp	r17, r11
     a70:	54 f4       	brge	.+20     	; 0xa86 <_Z11astarTravelP4node+0x17c>
			if (n == nodes[i]){
     a72:	fc 01       	movw	r30, r24
     a74:	41 91       	ld	r20, Z+
     a76:	51 91       	ld	r21, Z+
     a78:	cf 01       	movw	r24, r30
     a7a:	a4 17       	cp	r26, r20
     a7c:	b5 07       	cpc	r27, r21
     a7e:	09 f4       	brne	.+2      	; 0xa82 <_Z11astarTravelP4node+0x178>
     a80:	54 c0       	rjmp	.+168    	; 0xb2a <_Z11astarTravelP4node+0x220>
     a82:	1f 5f       	subi	r17, 0xFF	; 255
     a84:	f4 cf       	rjmp	.-24     	; 0xa6e <_Z11astarTravelP4node+0x164>
	}
	int8_t size(){
		return top;
	}
	void addNode(node* n){
		if (top < 40) {
     a86:	47 e2       	ldi	r20, 0x27	; 39
     a88:	4b 15       	cp	r20, r11
     a8a:	6c f0       	brlt	.+26     	; 0xaa6 <_Z11astarTravelP4node+0x19c>
			nodes[top] = n;
     a8c:	8b 2d       	mov	r24, r11
     a8e:	88 0f       	add	r24, r24
     a90:	99 0b       	sbc	r25, r25
     a92:	42 e5       	ldi	r20, 0x52	; 82
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	4c 0f       	add	r20, r28
     a98:	5d 1f       	adc	r21, r29
     a9a:	84 0f       	add	r24, r20
     a9c:	95 1f       	adc	r25, r21
     a9e:	fc 01       	movw	r30, r24
     aa0:	b1 83       	std	Z+1, r27	; 0x01
     aa2:	a0 83       	st	Z, r26
			top++;
     aa4:	b3 94       	inc	r11
				if (closedlist.isNodeInList(child)){
					continue;
				}
				if (!openlist.isNodeInList(child)){
					openlist.addNode(child);
					child->parent = currentNode;
     aa6:	51 96       	adiw	r26, 0x11	; 17
     aa8:	7c 92       	st	X, r7
     aaa:	6e 92       	st	-X, r6
     aac:	50 97       	sbiw	r26, 0x10	; 16
     aae:	c3 01       	movw	r24, r6
     ab0:	82 0f       	add	r24, r18
     ab2:	93 1f       	adc	r25, r19
					child->gCost = currentNode->gCost + currentNode->costs[i];
     ab4:	fc 01       	movw	r30, r24
     ab6:	83 85       	ldd	r24, Z+11	; 0x0b
     ab8:	f3 01       	movw	r30, r6
     aba:	97 85       	ldd	r25, Z+15	; 0x0f
     abc:	89 0f       	add	r24, r25
     abe:	1f 96       	adiw	r26, 0x0f	; 15
     ac0:	8c 93       	st	X, r24
     ac2:	2f 5f       	subi	r18, 0xFF	; 255
     ac4:	3f 4f       	sbci	r19, 0xFF	; 255
     ac6:	6e 5f       	subi	r22, 0xFE	; 254
     ac8:	7f 4f       	sbci	r23, 0xFF	; 255

		if (currentNode == root){
			break;
		}

		for (int8_t i=0; i<4; i++){
     aca:	24 30       	cpi	r18, 0x04	; 4
     acc:	31 05       	cpc	r19, r1
     ace:	09 f0       	breq	.+2      	; 0xad2 <_Z11astarTravelP4node+0x1c8>
     ad0:	b8 cf       	rjmp	.-144    	; 0xa42 <_Z11astarTravelP4node+0x138>

	target->gCost = 0;

	openlist.addNode(target);

	while (!openlist.isEmpty()){
     ad2:	b1 10       	cpse	r11, r1
     ad4:	3a cf       	rjmp	.-396    	; 0x94a <_Z11astarTravelP4node+0x40>
     ad6:	9a cf       	rjmp	.-204    	; 0xa0c <_Z11astarTravelP4node+0x102>
		for (i=0; i<top && nodes[i]->pos != p; ++i);
		n = nodes[i];
		if (i == top){
			return NULL;
		}
		for (;i<top-1; i++){
     ad8:	8b 2d       	mov	r24, r11
     ada:	99 27       	eor	r25, r25
     adc:	87 fd       	sbrc	r24, 7
     ade:	90 95       	com	r25
     ae0:	01 97       	sbiw	r24, 0x01	; 1
     ae2:	26 2f       	mov	r18, r22
     ae4:	33 27       	eor	r19, r19
     ae6:	27 fd       	sbrc	r18, 7
     ae8:	30 95       	com	r19
     aea:	28 17       	cp	r18, r24
     aec:	39 07       	cpc	r19, r25
     aee:	cc f4       	brge	.+50     	; 0xb22 <_Z11astarTravelP4node+0x218>
			nodes[i] = nodes[i+1];
     af0:	f9 01       	movw	r30, r18
     af2:	31 96       	adiw	r30, 0x01	; 1
     af4:	ee 0f       	add	r30, r30
     af6:	ff 1f       	adc	r31, r31
     af8:	42 e5       	ldi	r20, 0x52	; 82
     afa:	50 e0       	ldi	r21, 0x00	; 0
     afc:	4c 0f       	add	r20, r28
     afe:	5d 1f       	adc	r21, r29
     b00:	e4 0f       	add	r30, r20
     b02:	f5 1f       	adc	r31, r21
     b04:	40 81       	ld	r20, Z
     b06:	51 81       	ldd	r21, Z+1	; 0x01
     b08:	f9 01       	movw	r30, r18
     b0a:	ee 0f       	add	r30, r30
     b0c:	ff 1f       	adc	r31, r31
     b0e:	22 e5       	ldi	r18, 0x52	; 82
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	2c 0f       	add	r18, r28
     b14:	3d 1f       	adc	r19, r29
     b16:	e2 0f       	add	r30, r18
     b18:	f3 1f       	adc	r31, r19
     b1a:	51 83       	std	Z+1, r21	; 0x01
     b1c:	40 83       	st	Z, r20
     b1e:	6f 5f       	subi	r22, 0xFF	; 255
     b20:	e0 cf       	rjmp	.-64     	; 0xae2 <_Z11astarTravelP4node+0x1d8>
		}
		top--;
     b22:	ba 94       	dec	r11
		return n;
     b24:	67 2e       	mov	r6, r23
     b26:	7a 2e       	mov	r7, r26
     b28:	5f cf       	rjmp	.-322    	; 0x9e8 <_Z11astarTravelP4node+0xde>
     b2a:	c3 01       	movw	r24, r6
     b2c:	82 0f       	add	r24, r18
     b2e:	93 1f       	adc	r25, r19
				if (!openlist.isNodeInList(child)){
					openlist.addNode(child);
					child->parent = currentNode;
					child->gCost = currentNode->gCost + currentNode->costs[i];
				} else {
					int8_t thisGCost = currentNode->gCost + currentNode->costs[i];
     b30:	fc 01       	movw	r30, r24
     b32:	03 85       	ldd	r16, Z+11	; 0x0b
     b34:	f3 01       	movw	r30, r6
     b36:	87 85       	ldd	r24, Z+15	; 0x0f
     b38:	08 0f       	add	r16, r24
     b3a:	dc 90       	ld	r13, X
     b3c:	11 96       	adiw	r26, 0x01	; 1
     b3e:	cc 90       	ld	r12, X
     b40:	11 97       	sbiw	r26, 0x01	; 1
	}
	node* getNodeByPosition(position p){
		return getNodeByPosition(p.x, p.y);
	}
	node* getNodeByPosition(int8_t x, int8_t y){
		if (isEmpty()){
     b42:	bb 20       	and	r11, r11
     b44:	d9 f0       	breq	.+54     	; 0xb7c <_Z11astarTravelP4node+0x272>
     b46:	10 e0       	ldi	r17, 0x00	; 0
     b48:	81 2f       	mov	r24, r17
     b4a:	99 27       	eor	r25, r25
     b4c:	87 fd       	sbrc	r24, 7
     b4e:	90 95       	com	r25
		position p;
		p.x = x;
		p.y = y;
		int8_t i;
		node* n;
		for (i=0; i<top && nodes[i]->pos != p; ++i);
     b50:	1b 15       	cp	r17, r11
     b52:	24 f5       	brge	.+72     	; 0xb9c <_Z11astarTravelP4node+0x292>
     b54:	ac 01       	movw	r20, r24
     b56:	44 0f       	add	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	e2 e5       	ldi	r30, 0x52	; 82
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	ec 0f       	add	r30, r28
     b60:	fd 1f       	adc	r31, r29
     b62:	4e 0f       	add	r20, r30
     b64:	5f 1f       	adc	r21, r31
     b66:	fa 01       	movw	r30, r20
     b68:	40 81       	ld	r20, Z
     b6a:	51 81       	ldd	r21, Z+1	; 0x01
     b6c:	fa 01       	movw	r30, r20
     b6e:	90 80       	ld	r9, Z
     b70:	9d 10       	cpse	r9, r13
     b72:	12 c0       	rjmp	.+36     	; 0xb98 <_Z11astarTravelP4node+0x28e>
     b74:	41 81       	ldd	r20, Z+1	; 0x01
     b76:	4c 11       	cpse	r20, r12
     b78:	0f c0       	rjmp	.+30     	; 0xb98 <_Z11astarTravelP4node+0x28e>
     b7a:	10 c0       	rjmp	.+32     	; 0xb9c <_Z11astarTravelP4node+0x292>
	node* getNodeByPosition(position p){
		return getNodeByPosition(p.x, p.y);
	}
	node* getNodeByPosition(int8_t x, int8_t y){
		if (isEmpty()){
			return NULL;
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	50 e0       	ldi	r21, 0x00	; 0
					openlist.addNode(child);
					child->parent = currentNode;
					child->gCost = currentNode->gCost + currentNode->costs[i];
				} else {
					int8_t thisGCost = currentNode->gCost + currentNode->costs[i];
					if (thisGCost < openlist.getNodeByPosition(child->pos)->gCost){
     b80:	fa 01       	movw	r30, r20
     b82:	87 85       	ldd	r24, Z+15	; 0x0f
     b84:	08 17       	cp	r16, r24
     b86:	0c f0       	brlt	.+2      	; 0xb8a <_Z11astarTravelP4node+0x280>
     b88:	9c cf       	rjmp	.-200    	; 0xac2 <_Z11astarTravelP4node+0x1b8>
						child->parent = currentNode;
     b8a:	51 96       	adiw	r26, 0x11	; 17
     b8c:	7c 92       	st	X, r7
     b8e:	6e 92       	st	-X, r6
     b90:	50 97       	sbiw	r26, 0x10	; 16
						child->gCost = currentNode->gCost + currentNode->costs[i];
     b92:	1f 96       	adiw	r26, 0x0f	; 15
     b94:	0c 93       	st	X, r16
     b96:	95 cf       	rjmp	.-214    	; 0xac2 <_Z11astarTravelP4node+0x1b8>
     b98:	1f 5f       	subi	r17, 0xFF	; 255
     b9a:	d6 cf       	rjmp	.-84     	; 0xb48 <_Z11astarTravelP4node+0x23e>
		p.x = x;
		p.y = y;
		int8_t i;
		node* n;
		for (i=0; i<top && nodes[i]->pos != p; ++i);
		n = nodes[i];
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	42 e5       	ldi	r20, 0x52	; 82
     ba2:	50 e0       	ldi	r21, 0x00	; 0
     ba4:	4c 0f       	add	r20, r28
     ba6:	5d 1f       	adc	r21, r29
     ba8:	84 0f       	add	r24, r20
     baa:	95 1f       	adc	r25, r21
     bac:	fc 01       	movw	r30, r24
     bae:	d0 80       	ld	r13, Z
     bb0:	81 81       	ldd	r24, Z+1	; 0x01
		if (i == top){
     bb2:	1b 15       	cp	r17, r11
     bb4:	19 f3       	breq	.-58     	; 0xb7c <_Z11astarTravelP4node+0x272>
			return NULL;
		}
		return n;
     bb6:	4d 2d       	mov	r20, r13
     bb8:	58 2f       	mov	r21, r24
     bba:	e2 cf       	rjmp	.-60     	; 0xb80 <_Z11astarTravelP4node+0x276>

00000bbc <_Z7mapMazev>:
	}
	
	travelPath(root);
}

void mapMaze(){
     bbc:	4f 92       	push	r4
     bbe:	5f 92       	push	r5
     bc0:	6f 92       	push	r6
     bc2:	7f 92       	push	r7
     bc4:	8f 92       	push	r8
     bc6:	9f 92       	push	r9
     bc8:	af 92       	push	r10
     bca:	bf 92       	push	r11
     bcc:	cf 92       	push	r12
     bce:	df 92       	push	r13
     bd0:	ef 92       	push	r14
     bd2:	ff 92       	push	r15
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	c5 56       	subi	r28, 0x65	; 101
     be2:	d1 09       	sbc	r29, r1
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	f8 94       	cli
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	cd bf       	out	0x3d, r28	; 61
	int startRAM = get_free_ram();
     bee:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <get_free_ram>
	
	currentDir.dir = NORTH;
     bf2:	82 e0       	ldi	r24, 0x02	; 2
     bf4:	80 93 cd 01 	sts	0x01CD, r24
	currentPos.x = 0;
     bf8:	10 92 cb 01 	sts	0x01CB, r1
	currentPos.y = 0;
     bfc:	10 92 cc 01 	sts	0x01CC, r1
	//myNodeStack = NodeStack();
	
	node* allNodes[50];
	int head = 0;
	
	delete root;
     c00:	00 91 c7 01 	lds	r16, 0x01C7
     c04:	10 91 c8 01 	lds	r17, 0x01C8
     c08:	01 15       	cp	r16, r1
     c0a:	11 05       	cpc	r17, r1
     c0c:	31 f0       	breq	.+12     	; 0xc1a <_Z7mapMazev+0x5e>
     c0e:	c8 01       	movw	r24, r16
     c10:	0e 94 92 00 	call	0x124	; 0x124 <_ZN4nodeD1Ev>
     c14:	c8 01       	movw	r24, r16
     c16:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <free>
#define UTILITY_H_

#include <stdlib.h>

void* operator new(size_t objsize) {
	return malloc(objsize);
     c1a:	82 e1       	ldi	r24, 0x12	; 18
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <malloc>
     c22:	8c 01       	movw	r16, r24
	root = new node;
     c24:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZN4nodeC1Ev>
     c28:	10 93 c8 01 	sts	0x01C8, r17
     c2c:	00 93 c7 01 	sts	0x01C7, r16
     c30:	80 91 cc 01 	lds	r24, 0x01CC
	
	void setPosition(position p){
		this->pos = p;
     c34:	90 91 cb 01 	lds	r25, 0x01CB
     c38:	d8 01       	movw	r26, r16
     c3a:	9c 93       	st	X, r25
     c3c:	11 96       	adiw	r26, 0x01	; 1
     c3e:	8c 93       	st	X, r24
     c40:	82 e1       	ldi	r24, 0x12	; 18
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <malloc>
     c48:	8c 01       	movw	r16, r24
	root->setPosition(currentPos);
	root->connections[2] = new node;
     c4a:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZN4nodeC1Ev>
     c4e:	60 91 c7 01 	lds	r22, 0x01C7
     c52:	70 91 c8 01 	lds	r23, 0x01C8
     c56:	fb 01       	movw	r30, r22
     c58:	10 87       	std	Z+8, r17	; 0x08
     c5a:	07 83       	std	Z+7, r16	; 0x07
	root->visited = true;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	82 83       	std	Z+2, r24	; 0x02
	
	allNodes[head] = root;
     c60:	7a 83       	std	Y+2, r23	; 0x02
     c62:	69 83       	std	Y+1, r22	; 0x01
	
	myNodeStack.push(root, NORTH);
     c64:	42 e0       	ldi	r20, 0x02	; 2
     c66:	89 ec       	ldi	r24, 0xC9	; 201
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	0e 94 b4 00 	call	0x168	; 0x168 <_ZN9NodeStack4pushEP4node9Direction>
	currentPos.y = 0;
	
	//myNodeStack = NodeStack();
	
	node* allNodes[50];
	int head = 0;
     c6e:	a1 2c       	mov	r10, r1
     c70:	b1 2c       	mov	r11, r1
				nextNode->setPosition(currentPos);
				if (isLeft) nextNode->connections[currentDir.getPrevious()] = new node;
				if (isRight) nextNode->connections[currentDir.getNext()] = new node;
				if (isForward) nextNode->connections[currentDir] = new node;
				
				nextNode->visited = true;
     c72:	88 24       	eor	r8, r8
     c74:	83 94       	inc	r8

bool NodeStack::isEmpty() {
	if (top == 0) {
     c76:	80 91 c9 01 	lds	r24, 0x01C9
     c7a:	90 91 ca 01 	lds	r25, 0x01CA
     c7e:	89 2b       	or	r24, r25
     c80:	11 f5       	brne	.+68     	; 0xcc6 <_Z7mapMazev+0x10a>
			
			myNodeStack.push(nextNode, currentDir);
		}
	}
	
	faceDir(currentDir.getOpposite());
     c82:	8d ec       	ldi	r24, 0xCD	; 205
     c84:	91 e0       	ldi	r25, 0x01	; 1
     c86:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN10cDirection11getOppositeEv>
     c8a:	0e 94 97 02 	call	0x52e	; 0x52e <_Z7faceDir9Direction>
	
	play_from_program_space(bloop);
     c8e:	86 e7       	ldi	r24, 0x76	; 118
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 1b 0c 	call	0x1836	; 0x1836 <play_from_program_space>
}
     c96:	cb 59       	subi	r28, 0x9B	; 155
     c98:	df 4f       	sbci	r29, 0xFF	; 255
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	ff 90       	pop	r15
     cae:	ef 90       	pop	r14
     cb0:	df 90       	pop	r13
     cb2:	cf 90       	pop	r12
     cb4:	bf 90       	pop	r11
     cb6:	af 90       	pop	r10
     cb8:	9f 90       	pop	r9
     cba:	8f 90       	pop	r8
     cbc:	7f 90       	pop	r7
     cbe:	6f 90       	pop	r6
     cc0:	5f 90       	pop	r5
     cc2:	4f 90       	pop	r4
     cc4:	08 95       	ret
	
	myNodeStack.push(root, NORTH);
	
	int i;
	while(!myNodeStack.isEmpty()){
		node* currentNode = myNodeStack.getTop();
     cc6:	89 ec       	ldi	r24, 0xC9	; 201
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN9NodeStack6getTopEv>
     cce:	6c 01       	movw	r12, r24
     cd0:	fc 01       	movw	r30, r24
		
		for (i=3; i>-1; i--){
     cd2:	03 e0       	ldi	r16, 0x03	; 3
     cd4:	e0 2e       	mov	r14, r16
     cd6:	f1 2c       	mov	r15, r1
			if (currentNode->connections[i] != NULL){
     cd8:	a1 85       	ldd	r26, Z+9	; 0x09
     cda:	b2 85       	ldd	r27, Z+10	; 0x0a
     cdc:	10 97       	sbiw	r26, 0x00	; 0
     cde:	21 f0       	breq	.+8      	; 0xce8 <_Z7mapMazev+0x12c>
				if (currentNode->connections[i]->visited == false){
     ce0:	12 96       	adiw	r26, 0x02	; 2
     ce2:	8c 91       	ld	r24, X
     ce4:	88 23       	and	r24, r24
     ce6:	41 f0       	breq	.+16     	; 0xcf8 <_Z7mapMazev+0x13c>
	
	int i;
	while(!myNodeStack.isEmpty()){
		node* currentNode = myNodeStack.getTop();
		
		for (i=3; i>-1; i--){
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	e8 1a       	sub	r14, r24
     cec:	f1 08       	sbc	r15, r1
     cee:	32 97       	sbiw	r30, 0x02	; 2
     cf0:	9f ef       	ldi	r25, 0xFF	; 255
     cf2:	e9 16       	cp	r14, r25
     cf4:	f9 06       	cpc	r15, r25
     cf6:	81 f7       	brne	.-32     	; 0xcd8 <_Z7mapMazev+0x11c>
					break;
				}
			}
		}
		
		if (foundFinish == true){
     cf8:	80 91 ce 01 	lds	r24, 0x01CE
     cfc:	88 23       	and	r24, r24
     cfe:	21 f0       	breq	.+8      	; 0xd08 <_Z7mapMazev+0x14c>
			finish = currentNode;
     d00:	d0 92 c6 01 	sts	0x01C6, r13
     d04:	c0 92 c5 01 	sts	0x01C5, r12
		}
		
		foundFinish = false;
     d08:	10 92 ce 01 	sts	0x01CE, r1
		
		if (i == -1){ // this node has no unvisited connections
     d0c:	af ef       	ldi	r26, 0xFF	; 255
     d0e:	ea 16       	cp	r14, r26
     d10:	fa 06       	cpc	r15, r26
     d12:	89 f4       	brne	.+34     	; 0xd36 <_Z7mapMazev+0x17a>
			cDirection d;
			d = myNodeStack.pop();
     d14:	89 ec       	ldi	r24, 0xC9	; 201
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <_ZN9NodeStack3popEv>
			faceInt = -1;
		}
		return static_cast<Direction>(faceInt + 1);
	}
	operator Direction() { return dir; }
	void operator=(const Direction &lhs){ dir = lhs; }
     d1c:	a6 96       	adiw	r28, 0x26	; 38
     d1e:	8f af       	std	Y+63, r24	; 0x3f
     d20:	a6 97       	sbiw	r28, 0x26	; 38
			faceDir(d.getOpposite());
     d22:	ce 01       	movw	r24, r28
     d24:	8b 59       	subi	r24, 0x9B	; 155
     d26:	9f 4f       	sbci	r25, 0xFF	; 255
     d28:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN10cDirection11getOppositeEv>
     d2c:	0e 94 97 02 	call	0x52e	; 0x52e <_Z7faceDir9Direction>
			followLine();
     d30:	0e 94 23 04 	call	0x846	; 0x846 <_Z10followLinev>
     d34:	a0 cf       	rjmp	.-192    	; 0xc76 <_Z7mapMazev+0xba>
	}
}

void faceDir(int i){
	Direction d = static_cast<Direction>(i);
	faceDir(d);
     d36:	8e 2d       	mov	r24, r14
     d38:	0e 94 97 02 	call	0x52e	; 0x52e <_Z7faceDir9Direction>
			d = myNodeStack.pop();
			faceDir(d.getOpposite());
			followLine();
		} else {
			faceDir(i);
			int8_t distanceFromLastNode = followLine();
     d3c:	0e 94 23 04 	call	0x846	; 0x846 <_Z10followLinev>
     d40:	98 2e       	mov	r9, r24
#define POSITION_H_

struct position {
	int8_t x, y;
	bool operator == (const position &RHS) {
		return (this->x == RHS.x && this->y == RHS.y);
     d42:	20 91 cb 01 	lds	r18, 0x01CB
     d46:	30 91 cc 01 	lds	r19, 0x01CC
     d4a:	fe 01       	movw	r30, r28
     d4c:	31 96       	adiw	r30, 0x01	; 1
			
			node* nextNode = NULL;
			for (int j=0; j<=head; j++){
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	90 e0       	ldi	r25, 0x00	; 0
				if (allNodes[j]->pos == currentPos){
     d52:	01 91       	ld	r16, Z+
     d54:	11 91       	ld	r17, Z+
     d56:	d8 01       	movw	r26, r16
     d58:	4c 91       	ld	r20, X
     d5a:	42 13       	cpse	r20, r18
     d5c:	bd c0       	rjmp	.+378    	; 0xed8 <_Z7mapMazev+0x31c>
     d5e:	11 96       	adiw	r26, 0x01	; 1
     d60:	4c 91       	ld	r20, X
     d62:	43 13       	cpse	r20, r19
     d64:	b9 c0       	rjmp	.+370    	; 0xed8 <_Z7mapMazev+0x31c>
					nextNode = allNodes[j];
					break;
				}
			}
			
			if (nextNode == NULL){ // new node
     d66:	01 15       	cp	r16, r1
     d68:	11 05       	cpc	r17, r1
     d6a:	09 f0       	breq	.+2      	; 0xd6e <_Z7mapMazev+0x1b2>
     d6c:	6c c0       	rjmp	.+216    	; 0xe46 <_Z7mapMazev+0x28a>
				play_from_program_space(bloop);
     d6e:	86 e7       	ldi	r24, 0x76	; 118
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 94 1b 0c 	call	0x1836	; 0x1836 <play_from_program_space>
     d76:	82 e1       	ldi	r24, 0x12	; 18
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <malloc>
     d7e:	8c 01       	movw	r16, r24
				
				delete nextNode;
				nextNode = new node;
     d80:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZN4nodeC1Ev>
     d84:	80 91 cc 01 	lds	r24, 0x01CC
     d88:	90 91 cb 01 	lds	r25, 0x01CB
     d8c:	f8 01       	movw	r30, r16
     d8e:	90 83       	st	Z, r25
     d90:	81 83       	std	Z+1, r24	; 0x01

				nextNode->setPosition(currentPos);
				if (isLeft) nextNode->connections[currentDir.getPrevious()] = new node;
     d92:	80 91 d0 01 	lds	r24, 0x01D0
     d96:	88 23       	and	r24, r24
     d98:	b1 f0       	breq	.+44     	; 0xdc6 <_Z7mapMazev+0x20a>
     d9a:	82 e1       	ldi	r24, 0x12	; 18
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <malloc>
     da2:	3c 01       	movw	r6, r24
     da4:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZN4nodeC1Ev>
			faceInt = -1;
		}
		return static_cast<Direction>(faceInt + 1);
	}
	Direction getPrevious() {
		int faceInt = dir;
     da8:	80 91 cd 01 	lds	r24, 0x01CD
     dac:	90 e0       	ldi	r25, 0x00	; 0
		if (faceInt <= 0) {
     dae:	00 97       	sbiw	r24, 0x00	; 0
     db0:	11 f4       	brne	.+4      	; 0xdb6 <_Z7mapMazev+0x1fa>
			faceInt = 4;
     db2:	84 e0       	ldi	r24, 0x04	; 4
     db4:	90 e0       	ldi	r25, 0x00	; 0
		}
		return static_cast<Direction>(faceInt - 1);
     db6:	81 50       	subi	r24, 0x01	; 1
     db8:	f8 01       	movw	r30, r16
     dba:	e8 0f       	add	r30, r24
     dbc:	f1 1d       	adc	r31, r1
     dbe:	e8 0f       	add	r30, r24
     dc0:	f1 1d       	adc	r31, r1
     dc2:	74 82       	std	Z+4, r7	; 0x04
     dc4:	63 82       	std	Z+3, r6	; 0x03
				if (isRight) nextNode->connections[currentDir.getNext()] = new node;
     dc6:	80 91 cf 01 	lds	r24, 0x01CF
     dca:	88 23       	and	r24, r24
     dcc:	b9 f0       	breq	.+46     	; 0xdfc <_Z7mapMazev+0x240>
     dce:	82 e1       	ldi	r24, 0x12	; 18
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <malloc>
     dd6:	3c 01       	movw	r6, r24
     dd8:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZN4nodeC1Ev>
			faceInt = 4;
		}
		this->dir = static_cast<Direction>(faceInt - 1);
	}
	Direction getNext() {
		int faceInt = dir;
     ddc:	80 91 cd 01 	lds	r24, 0x01CD
     de0:	90 e0       	ldi	r25, 0x00	; 0
		if (faceInt >= 3) {
     de2:	83 30       	cpi	r24, 0x03	; 3
     de4:	91 05       	cpc	r25, r1
     de6:	14 f0       	brlt	.+4      	; 0xdec <_Z7mapMazev+0x230>
			faceInt = -1;
     de8:	8f ef       	ldi	r24, 0xFF	; 255
     dea:	9f ef       	ldi	r25, 0xFF	; 255
		}
		return static_cast<Direction>(faceInt + 1);
     dec:	8f 5f       	subi	r24, 0xFF	; 255
     dee:	f8 01       	movw	r30, r16
     df0:	e8 0f       	add	r30, r24
     df2:	f1 1d       	adc	r31, r1
     df4:	e8 0f       	add	r30, r24
     df6:	f1 1d       	adc	r31, r1
     df8:	74 82       	std	Z+4, r7	; 0x04
     dfa:	63 82       	std	Z+3, r6	; 0x03
				if (isForward) nextNode->connections[currentDir] = new node;
     dfc:	80 91 d1 01 	lds	r24, 0x01D1
     e00:	88 23       	and	r24, r24
     e02:	81 f0       	breq	.+32     	; 0xe24 <_Z7mapMazev+0x268>
     e04:	82 e1       	ldi	r24, 0x12	; 18
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <malloc>
     e0c:	3c 01       	movw	r6, r24
     e0e:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZN4nodeC1Ev>
     e12:	80 91 cd 01 	lds	r24, 0x01CD
     e16:	f8 01       	movw	r30, r16
     e18:	e8 0f       	add	r30, r24
     e1a:	f1 1d       	adc	r31, r1
     e1c:	e8 0f       	add	r30, r24
     e1e:	f1 1d       	adc	r31, r1
     e20:	74 82       	std	Z+4, r7	; 0x04
     e22:	63 82       	std	Z+3, r6	; 0x03
				
				nextNode->visited = true;
     e24:	d8 01       	movw	r26, r16
     e26:	12 96       	adiw	r26, 0x02	; 2
     e28:	8c 92       	st	X, r8
				head++;
     e2a:	bf ef       	ldi	r27, 0xFF	; 255
     e2c:	ab 1a       	sub	r10, r27
     e2e:	bb 0a       	sbc	r11, r27
				allNodes[head] = nextNode;
     e30:	f5 01       	movw	r30, r10
     e32:	ee 0f       	add	r30, r30
     e34:	ff 1f       	adc	r31, r31
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	8c 0f       	add	r24, r28
     e3c:	9d 1f       	adc	r25, r29
     e3e:	e8 0f       	add	r30, r24
     e40:	f9 1f       	adc	r31, r25
     e42:	11 83       	std	Z+1, r17	; 0x01
     e44:	00 83       	st	Z, r16
			}
			
			delete currentNode->connections[i];
     e46:	27 01       	movw	r4, r14
     e48:	44 0c       	add	r4, r4
     e4a:	55 1c       	adc	r5, r5
     e4c:	f6 01       	movw	r30, r12
     e4e:	e4 0d       	add	r30, r4
     e50:	f5 1d       	adc	r31, r5
     e52:	63 80       	ldd	r6, Z+3	; 0x03
     e54:	74 80       	ldd	r7, Z+4	; 0x04
     e56:	61 14       	cp	r6, r1
     e58:	71 04       	cpc	r7, r1
     e5a:	31 f0       	breq	.+12     	; 0xe68 <_Z7mapMazev+0x2ac>
     e5c:	c3 01       	movw	r24, r6
     e5e:	0e 94 92 00 	call	0x124	; 0x124 <_ZN4nodeD1Ev>
}

void operator delete(void* obj) {
	free(obj);
     e62:	c3 01       	movw	r24, r6
     e64:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <free>
			currentNode->connections[i] = nextNode;
     e68:	f6 01       	movw	r30, r12
     e6a:	e4 0d       	add	r30, r4
     e6c:	f5 1d       	adc	r31, r5
     e6e:	14 83       	std	Z+4, r17	; 0x04
     e70:	03 83       	std	Z+3, r16	; 0x03
			currentNode->costs[i] = distanceFromLastNode;
     e72:	f6 01       	movw	r30, r12
     e74:	ee 0d       	add	r30, r14
     e76:	ff 1d       	adc	r31, r15
     e78:	93 86       	std	Z+11, r9	; 0x0b
			delete nextNode->connections[currentDir.getOpposite()];
     e7a:	8d ec       	ldi	r24, 0xCD	; 205
     e7c:	91 e0       	ldi	r25, 0x01	; 1
     e7e:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN10cDirection11getOppositeEv>
     e82:	f8 01       	movw	r30, r16
     e84:	e8 0f       	add	r30, r24
     e86:	f1 1d       	adc	r31, r1
     e88:	e8 0f       	add	r30, r24
     e8a:	f1 1d       	adc	r31, r1
     e8c:	e3 80       	ldd	r14, Z+3	; 0x03
     e8e:	f4 80       	ldd	r15, Z+4	; 0x04
     e90:	e1 14       	cp	r14, r1
     e92:	f1 04       	cpc	r15, r1
     e94:	31 f0       	breq	.+12     	; 0xea2 <_Z7mapMazev+0x2e6>
     e96:	c7 01       	movw	r24, r14
     e98:	0e 94 92 00 	call	0x124	; 0x124 <_ZN4nodeD1Ev>
     e9c:	c7 01       	movw	r24, r14
     e9e:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <free>
			nextNode->connections[currentDir.getOpposite()] = currentNode;
     ea2:	8d ec       	ldi	r24, 0xCD	; 205
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN10cDirection11getOppositeEv>
     eaa:	f8 01       	movw	r30, r16
     eac:	e8 0f       	add	r30, r24
     eae:	f1 1d       	adc	r31, r1
     eb0:	e8 0f       	add	r30, r24
     eb2:	f1 1d       	adc	r31, r1
     eb4:	d4 82       	std	Z+4, r13	; 0x04
     eb6:	c3 82       	std	Z+3, r12	; 0x03
			nextNode->costs[currentDir.getOpposite()] = distanceFromLastNode;
     eb8:	8d ec       	ldi	r24, 0xCD	; 205
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN10cDirection11getOppositeEv>
     ec0:	f8 01       	movw	r30, r16
     ec2:	e8 0f       	add	r30, r24
     ec4:	f1 1d       	adc	r31, r1
     ec6:	93 86       	std	Z+11, r9	; 0x0b
			
			myNodeStack.push(nextNode, currentDir);
     ec8:	40 91 cd 01 	lds	r20, 0x01CD
     ecc:	b8 01       	movw	r22, r16
     ece:	89 ec       	ldi	r24, 0xC9	; 201
     ed0:	91 e0       	ldi	r25, 0x01	; 1
     ed2:	0e 94 b4 00 	call	0x168	; 0x168 <_ZN9NodeStack4pushEP4node9Direction>
     ed6:	cf ce       	rjmp	.-610    	; 0xc76 <_Z7mapMazev+0xba>
		} else {
			faceDir(i);
			int8_t distanceFromLastNode = followLine();
			
			node* nextNode = NULL;
			for (int j=0; j<=head; j++){
     ed8:	01 96       	adiw	r24, 0x01	; 1
     eda:	a8 16       	cp	r10, r24
     edc:	b9 06       	cpc	r11, r25
     ede:	0c f0       	brlt	.+2      	; 0xee2 <_Z7mapMazev+0x326>
     ee0:	38 cf       	rjmp	.-400    	; 0xd52 <_Z7mapMazev+0x196>
     ee2:	45 cf       	rjmp	.-374    	; 0xd6e <_Z7mapMazev+0x1b2>

00000ee4 <main>:
	set_motors(0,0);
	
	saveCalibration();
}

int main(){
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	2a 97       	sbiw	r28, 0x0a	; 10
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
	initialise();
     ef8:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z10initialisev>
			print(" Maze");
			lcd_goto_xy(0, 1);
			print(" mapped!");
			wait_for_button(BUTTON_B);
			
			speed = 100;
     efc:	14 e6       	ldi	r17, 0x64	; 100
			
			astarTravel(finish);
			
			speed = 60;
     efe:	0c e3       	ldi	r16, 0x3C	; 60

int main(){
	initialise();
	
	while(1){
		clear();
     f00:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <clear>
		print(" ");
     f04:	8b e3       	ldi	r24, 0x3B	; 59
     f06:	91 e0       	ldi	r25, 0x01	; 1
     f08:	0e 94 75 0d 	call	0x1aea	; 0x1aea <print>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     f0c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <read_battery_millivolts_3pi>
		print_long(read_battery_millivolts());
     f10:	bc 01       	movw	r22, r24
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <print_long>
		print("mv");
     f1a:	8d e3       	ldi	r24, 0x3D	; 61
     f1c:	91 e0       	ldi	r25, 0x01	; 1
     f1e:	0e 94 75 0d 	call	0x1aea	; 0x1aea <print>
		delay_ms(20);
     f22:	84 e1       	ldi	r24, 0x14	; 20
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <delay_ms>
		
		if (button_is_pressed(BUTTON_A)){
     f2a:	82 e0       	ldi	r24, 0x02	; 2
     f2c:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <button_is_pressed>
     f30:	88 23       	and	r24, r24
     f32:	19 f0       	breq	.+6      	; 0xf3a <main+0x56>
			calibrate();
     f34:	0e 94 9f 01 	call	0x33e	; 0x33e <_Z9calibratev>
     f38:	e3 cf       	rjmp	.-58     	; 0xf00 <main+0x1c>
		} else if(button_is_pressed(BUTTON_B)){
     f3a:	80 e1       	ldi	r24, 0x10	; 16
     f3c:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <button_is_pressed>
     f40:	88 23       	and	r24, r24
     f42:	f1 f0       	breq	.+60     	; 0xf80 <main+0x9c>
			mapMaze();
     f44:	0e 94 de 05 	call	0xbbc	; 0xbbc <_Z7mapMazev>
			
			clear();
     f48:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <clear>
			print(" Maze");
     f4c:	80 e4       	ldi	r24, 0x40	; 64
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	0e 94 75 0d 	call	0x1aea	; 0x1aea <print>
			lcd_goto_xy(0, 1);
     f54:	61 e0       	ldi	r22, 0x01	; 1
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <lcd_goto_xy>
			print(" mapped!");
     f5c:	86 e4       	ldi	r24, 0x46	; 70
     f5e:	91 e0       	ldi	r25, 0x01	; 1
     f60:	0e 94 75 0d 	call	0x1aea	; 0x1aea <print>
			wait_for_button(BUTTON_B);
     f64:	80 e1       	ldi	r24, 0x10	; 16
     f66:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <wait_for_button>
			
			speed = 100;
     f6a:	10 93 c3 01 	sts	0x01C3, r17
			
			astarTravel(finish);
     f6e:	80 91 c5 01 	lds	r24, 0x01C5
     f72:	90 91 c6 01 	lds	r25, 0x01C6
     f76:	0e 94 85 04 	call	0x90a	; 0x90a <_Z11astarTravelP4node>
			
			speed = 60;
     f7a:	00 93 c3 01 	sts	0x01C3, r16
     f7e:	c0 cf       	rjmp	.-128    	; 0xf00 <main+0x1c>
			
		} else if(button_is_pressed(BUTTON_C)){
     f80:	80 e2       	ldi	r24, 0x20	; 32
     f82:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <button_is_pressed>
     f86:	88 23       	and	r24, r24
     f88:	09 f4       	brne	.+2      	; 0xf8c <main+0xa8>
     f8a:	ba cf       	rjmp	.-140    	; 0xf00 <main+0x1c>
			unsigned int sensors[5];
			while(1){
				unsigned int position = read_line(sensors, IR_EMITTERS_ON);
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	ce 01       	movw	r24, r28
     f90:	01 96       	adiw	r24, 0x01	; 1
     f92:	0e 94 3c 10 	call	0x2078	; 0x2078 <read_line>
     f96:	8c 01       	movw	r16, r24
				clear();
     f98:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <clear>
				print(" ");
     f9c:	8b e3       	ldi	r24, 0x3B	; 59
     f9e:	91 e0       	ldi	r25, 0x01	; 1
     fa0:	0e 94 75 0d 	call	0x1aea	; 0x1aea <print>
				print_long(position);
     fa4:	b8 01       	movw	r22, r16
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <print_long>
				print(" ");
     fae:	8b e3       	ldi	r24, 0x3B	; 59
     fb0:	91 e0       	ldi	r25, 0x01	; 1
     fb2:	0e 94 75 0d 	call	0x1aea	; 0x1aea <print>
				//print_long(sensors[2]);
				lcd_goto_xy(0,1);
     fb6:	61 e0       	ldi	r22, 0x01	; 1
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <lcd_goto_xy>
				display_readings(sensors);
     fbe:	ce 01       	movw	r24, r28
     fc0:	01 96       	adiw	r24, 0x01	; 1
     fc2:	0e 94 1e 01 	call	0x23c	; 0x23c <_Z16display_readingsPKj>
				delay_ms(100);
     fc6:	84 e6       	ldi	r24, 0x64	; 100
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <delay_ms>
     fce:	de cf       	rjmp	.-68     	; 0xf8c <main+0xa8>

00000fd0 <_GLOBAL__sub_I__Znwj>:
#include "node.h"
#include <stdbool.h>

struct NodeStack {
public:
	NodeStack() : top(0) {
     fd0:	10 92 ca 01 	sts	0x01CA, r1
     fd4:	10 92 c9 01 	sts	0x01C9, r1
     fd8:	08 95       	ret

00000fda <_GLOBAL__sub_D__Znwj>:
	}
	return NULL;
}

bool NodeStack::isEmpty() {
	if (top == 0) {
     fda:	80 91 c9 01 	lds	r24, 0x01C9
     fde:	90 91 ca 01 	lds	r25, 0x01CA
     fe2:	89 2b       	or	r24, r25
     fe4:	29 f0       	breq	.+10     	; 0xff0 <_GLOBAL__sub_D__Znwj+0x16>
	NodeStack() : top(0) {
		
	}
	~NodeStack() {
		while (!isEmpty()) {
			pop();
     fe6:	89 ec       	ldi	r24, 0xC9	; 201
     fe8:	91 e0       	ldi	r25, 0x01	; 1
     fea:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <_ZN9NodeStack3popEv>
     fee:	f5 cf       	rjmp	.-22     	; 0xfda <_GLOBAL__sub_D__Znwj>
     ff0:	08 95       	ret

00000ff2 <_ZN15OrangutanAnalog7setModeEh>:
     ff2:	88 23       	and	r24, r24
     ff4:	21 f4       	brne	.+8      	; 0xffe <_ZN15OrangutanAnalog7setModeEh+0xc>
     ff6:	80 91 7c 00 	lds	r24, 0x007C
     ffa:	8f 7d       	andi	r24, 0xDF	; 223
     ffc:	03 c0       	rjmp	.+6      	; 0x1004 <_ZN15OrangutanAnalog7setModeEh+0x12>
     ffe:	80 91 7c 00 	lds	r24, 0x007C
    1002:	80 62       	ori	r24, 0x20	; 32
    1004:	80 93 7c 00 	sts	0x007C, r24
    1008:	08 95       	ret

0000100a <_ZN15OrangutanAnalog7getModeEv>:
    100a:	80 91 7c 00 	lds	r24, 0x007C
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	25 e0       	ldi	r18, 0x05	; 5
    1012:	95 95       	asr	r25
    1014:	87 95       	ror	r24
    1016:	2a 95       	dec	r18
    1018:	e1 f7       	brne	.-8      	; 0x1012 <_ZN15OrangutanAnalog7getModeEv+0x8>
    101a:	81 70       	andi	r24, 0x01	; 1
    101c:	08 95       	ret

0000101e <_ZN15OrangutanAnalog12isConvertingEv>:
    101e:	80 91 7a 00 	lds	r24, 0x007A
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	36 e0       	ldi	r19, 0x06	; 6
    1026:	95 95       	asr	r25
    1028:	87 95       	ror	r24
    102a:	3a 95       	dec	r19
    102c:	e1 f7       	brne	.-8      	; 0x1026 <_ZN15OrangutanAnalog12isConvertingEv+0x8>
    102e:	81 70       	andi	r24, 0x01	; 1
    1030:	08 95       	ret

00001032 <_ZN15OrangutanAnalog16conversionResultEv>:
    1032:	0e 94 05 08 	call	0x100a	; 0x100a <_ZN15OrangutanAnalog7getModeEv>
    1036:	88 23       	and	r24, r24
    1038:	21 f0       	breq	.+8      	; 0x1042 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
    103a:	20 91 79 00 	lds	r18, 0x0079
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	04 c0       	rjmp	.+8      	; 0x104a <_ZN15OrangutanAnalog16conversionResultEv+0x18>
    1042:	20 91 78 00 	lds	r18, 0x0078
    1046:	30 91 79 00 	lds	r19, 0x0079
    104a:	c9 01       	movw	r24, r18
    104c:	08 95       	ret

0000104e <_ZN15OrangutanAnalog15startConversionEhh>:
    104e:	80 32       	cpi	r24, 0x20	; 32
    1050:	b0 f4       	brcc	.+44     	; 0x107e <_ZN15OrangutanAnalog15startConversionEhh+0x30>
    1052:	97 e8       	ldi	r25, 0x87	; 135
    1054:	90 93 7a 00 	sts	0x007A, r25
    1058:	90 91 7c 00 	lds	r25, 0x007C
    105c:	29 2f       	mov	r18, r25
    105e:	20 64       	ori	r18, 0x40	; 64
    1060:	66 23       	and	r22, r22
    1062:	11 f0       	breq	.+4      	; 0x1068 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
    1064:	90 6c       	ori	r25, 0xC0	; 192
    1066:	02 c0       	rjmp	.+4      	; 0x106c <_ZN15OrangutanAnalog15startConversionEhh+0x1e>
    1068:	92 2f       	mov	r25, r18
    106a:	9f 77       	andi	r25, 0x7F	; 127
    106c:	90 7e       	andi	r25, 0xE0	; 224
    106e:	98 2b       	or	r25, r24
    1070:	90 93 7c 00 	sts	0x007C, r25
    1074:	80 91 7a 00 	lds	r24, 0x007A
    1078:	80 64       	ori	r24, 0x40	; 64
    107a:	80 93 7a 00 	sts	0x007A, r24
    107e:	08 95       	ret

00001080 <_ZN15OrangutanAnalog11readAverageEhj>:
    1080:	a0 e0       	ldi	r26, 0x00	; 0
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e6 e4       	ldi	r30, 0x46	; 70
    1086:	f8 e0       	ldi	r31, 0x08	; 8
    1088:	0c 94 4c 16 	jmp	0x2c98	; 0x2c98 <__prologue_saves__+0x14>
    108c:	6b 01       	movw	r12, r22
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN15OrangutanAnalog15startConversionEhh>
    1094:	0e 94 0f 08 	call	0x101e	; 0x101e <_ZN15OrangutanAnalog12isConvertingEv>
    1098:	88 23       	and	r24, r24
    109a:	e1 f7       	brne	.-8      	; 0x1094 <_ZN15OrangutanAnalog11readAverageEhj+0x14>
    109c:	e6 01       	movw	r28, r12
    109e:	ee 24       	eor	r14, r14
    10a0:	ff 24       	eor	r15, r15
    10a2:	87 01       	movw	r16, r14
    10a4:	80 91 7a 00 	lds	r24, 0x007A
    10a8:	80 64       	ori	r24, 0x40	; 64
    10aa:	80 93 7a 00 	sts	0x007A, r24
    10ae:	0e 94 0f 08 	call	0x101e	; 0x101e <_ZN15OrangutanAnalog12isConvertingEv>
    10b2:	88 23       	and	r24, r24
    10b4:	e1 f7       	brne	.-8      	; 0x10ae <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
    10b6:	0e 94 19 08 	call	0x1032	; 0x1032 <_ZN15OrangutanAnalog16conversionResultEv>
    10ba:	a0 e0       	ldi	r26, 0x00	; 0
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e8 0e       	add	r14, r24
    10c0:	f9 1e       	adc	r15, r25
    10c2:	0a 1f       	adc	r16, r26
    10c4:	1b 1f       	adc	r17, r27
    10c6:	21 97       	sbiw	r28, 0x01	; 1
    10c8:	69 f7       	brne	.-38     	; 0x10a4 <_ZN15OrangutanAnalog11readAverageEhj+0x24>
    10ca:	c6 01       	movw	r24, r12
    10cc:	96 95       	lsr	r25
    10ce:	87 95       	ror	r24
    10d0:	20 e4       	ldi	r18, 0x40	; 64
    10d2:	c2 16       	cp	r12, r18
    10d4:	d1 04       	cpc	r13, r1
    10d6:	40 f4       	brcc	.+16     	; 0x10e8 <_ZN15OrangutanAnalog11readAverageEhj+0x68>
    10d8:	8e 0d       	add	r24, r14
    10da:	9f 1d       	adc	r25, r15
    10dc:	6c 2d       	mov	r22, r12
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <__udivmodhi4>
    10e4:	cb 01       	movw	r24, r22
    10e6:	0d c0       	rjmp	.+26     	; 0x1102 <_ZN15OrangutanAnalog11readAverageEhj+0x82>
    10e8:	bc 01       	movw	r22, r24
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	6e 0d       	add	r22, r14
    10f0:	7f 1d       	adc	r23, r15
    10f2:	80 1f       	adc	r24, r16
    10f4:	91 1f       	adc	r25, r17
    10f6:	96 01       	movw	r18, r12
    10f8:	40 e0       	ldi	r20, 0x00	; 0
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__udivmodsi4>
    1100:	c9 01       	movw	r24, r18
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	e8 e0       	ldi	r30, 0x08	; 8
    1108:	0c 94 68 16 	jmp	0x2cd0	; 0x2cd0 <__epilogue_restores__+0x14>

0000110c <_ZN15OrangutanAnalog12toMillivoltsEj>:
    110c:	a3 e0       	ldi	r26, 0x03	; 3
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	ec e8       	ldi	r30, 0x8C	; 140
    1112:	f8 e0       	ldi	r31, 0x08	; 8
    1114:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <__prologue_saves__+0x1e>
    1118:	bc 01       	movw	r22, r24
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	20 91 00 01 	lds	r18, 0x0100
    1122:	30 91 01 01 	lds	r19, 0x0101
    1126:	40 e0       	ldi	r20, 0x00	; 0
    1128:	50 e0       	ldi	r21, 0x00	; 0
    112a:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__mulsi3>
    112e:	18 2f       	mov	r17, r24
    1130:	69 83       	std	Y+1, r22	; 0x01
    1132:	7a 83       	std	Y+2, r23	; 0x02
    1134:	9b 83       	std	Y+3, r25	; 0x03
    1136:	0e 94 05 08 	call	0x100a	; 0x100a <_ZN15OrangutanAnalog7getModeEv>
    113a:	69 81       	ldd	r22, Y+1	; 0x01
    113c:	7a 81       	ldd	r23, Y+2	; 0x02
    113e:	9b 81       	ldd	r25, Y+3	; 0x03
    1140:	88 23       	and	r24, r24
    1142:	71 f0       	breq	.+28     	; 0x1160 <_ZN15OrangutanAnalog12toMillivoltsEj+0x54>
    1144:	9b 01       	movw	r18, r22
    1146:	41 2f       	mov	r20, r17
    1148:	59 2f       	mov	r21, r25
    114a:	ca 01       	movw	r24, r20
    114c:	b9 01       	movw	r22, r18
    114e:	61 58       	subi	r22, 0x81	; 129
    1150:	7f 4f       	sbci	r23, 0xFF	; 255
    1152:	8f 4f       	sbci	r24, 0xFF	; 255
    1154:	9f 4f       	sbci	r25, 0xFF	; 255
    1156:	2f ef       	ldi	r18, 0xFF	; 255
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	40 e0       	ldi	r20, 0x00	; 0
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	0d c0       	rjmp	.+26     	; 0x117a <_ZN15OrangutanAnalog12toMillivoltsEj+0x6e>
    1160:	9b 01       	movw	r18, r22
    1162:	41 2f       	mov	r20, r17
    1164:	59 2f       	mov	r21, r25
    1166:	ca 01       	movw	r24, r20
    1168:	b9 01       	movw	r22, r18
    116a:	61 50       	subi	r22, 0x01	; 1
    116c:	7e 4f       	sbci	r23, 0xFE	; 254
    116e:	8f 4f       	sbci	r24, 0xFF	; 255
    1170:	9f 4f       	sbci	r25, 0xFF	; 255
    1172:	2f ef       	ldi	r18, 0xFF	; 255
    1174:	33 e0       	ldi	r19, 0x03	; 3
    1176:	40 e0       	ldi	r20, 0x00	; 0
    1178:	50 e0       	ldi	r21, 0x00	; 0
    117a:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__udivmodsi4>
    117e:	c9 01       	movw	r24, r18
    1180:	23 96       	adiw	r28, 0x03	; 3
    1182:	e3 e0       	ldi	r30, 0x03	; 3
    1184:	0c 94 6d 16 	jmp	0x2cda	; 0x2cda <__epilogue_restores__+0x1e>

00001188 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    1188:	0e 94 40 08 	call	0x1080	; 0x1080 <_ZN15OrangutanAnalog11readAverageEhj>
    118c:	0e 94 86 08 	call	0x110c	; 0x110c <_ZN15OrangutanAnalog12toMillivoltsEj>
    1190:	08 95       	ret

00001192 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    1192:	1f 93       	push	r17
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	0e 94 05 08 	call	0x100a	; 0x100a <_ZN15OrangutanAnalog7getModeEv>
    119c:	18 2f       	mov	r17, r24
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	0e 94 f9 07 	call	0xff2	; 0xff2 <_ZN15OrangutanAnalog7setModeEh>
    11a4:	86 e0       	ldi	r24, 0x06	; 6
    11a6:	6a e0       	ldi	r22, 0x0A	; 10
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	0e 94 c4 08 	call	0x1188	; 0x1188 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    11ae:	ec 01       	movw	r28, r24
    11b0:	81 2f       	mov	r24, r17
    11b2:	0e 94 f9 07 	call	0xff2	; 0xff2 <_ZN15OrangutanAnalog7setModeEh>
    11b6:	9e 01       	movw	r18, r28
    11b8:	22 0f       	add	r18, r18
    11ba:	33 1f       	adc	r19, r19
    11bc:	2c 0f       	add	r18, r28
    11be:	3d 1f       	adc	r19, r29
    11c0:	2f 5f       	subi	r18, 0xFF	; 255
    11c2:	3f 4f       	sbci	r19, 0xFF	; 255
    11c4:	36 95       	lsr	r19
    11c6:	27 95       	ror	r18
    11c8:	c9 01       	movw	r24, r18
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	1f 91       	pop	r17
    11d0:	08 95       	ret

000011d2 <read_battery_millivolts_3pi>:
    11d2:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    11d6:	08 95       	ret

000011d8 <_ZL16currentCharacterv>:
    11d8:	90 91 55 01 	lds	r25, 0x0155
    11dc:	e0 91 51 01 	lds	r30, 0x0151
    11e0:	f0 91 52 01 	lds	r31, 0x0152
    11e4:	99 23       	and	r25, r25
    11e6:	11 f0       	breq	.+4      	; 0x11ec <_ZL16currentCharacterv+0x14>
    11e8:	84 91       	lpm	r24, Z
    11ea:	01 c0       	rjmp	.+2      	; 0x11ee <_ZL16currentCharacterv+0x16>
    11ec:	80 81       	ld	r24, Z
    11ee:	28 2f       	mov	r18, r24
    11f0:	21 54       	subi	r18, 0x41	; 65
    11f2:	2a 31       	cpi	r18, 0x1A	; 26
    11f4:	10 f4       	brcc	.+4      	; 0x11fa <_ZL16currentCharacterv+0x22>
    11f6:	80 5e       	subi	r24, 0xE0	; 224
    11f8:	08 95       	ret
    11fa:	80 32       	cpi	r24, 0x20	; 32
    11fc:	71 f4       	brne	.+28     	; 0x121a <_ZL16currentCharacterv+0x42>
    11fe:	20 91 51 01 	lds	r18, 0x0151
    1202:	30 91 52 01 	lds	r19, 0x0152
    1206:	a9 01       	movw	r20, r18
    1208:	4f 5f       	subi	r20, 0xFF	; 255
    120a:	5f 4f       	sbci	r21, 0xFF	; 255
    120c:	50 93 52 01 	sts	0x0152, r21
    1210:	40 93 51 01 	sts	0x0151, r20
    1214:	21 15       	cp	r18, r1
    1216:	31 05       	cpc	r19, r1
    1218:	09 f7       	brne	.-62     	; 0x11dc <_ZL16currentCharacterv+0x4>
    121a:	08 95       	ret

0000121c <_ZL9getNumberv>:
    121c:	ef 92       	push	r14
    121e:	ff 92       	push	r15
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <_ZL16currentCharacterv>
    1228:	c0 e0       	ldi	r28, 0x00	; 0
    122a:	d0 e0       	ldi	r29, 0x00	; 0
    122c:	1b c0       	rjmp	.+54     	; 0x1264 <_ZL9getNumberv+0x48>
    122e:	9e 01       	movw	r18, r28
    1230:	22 0f       	add	r18, r18
    1232:	33 1f       	adc	r19, r19
    1234:	93 e0       	ldi	r25, 0x03	; 3
    1236:	cc 0f       	add	r28, r28
    1238:	dd 1f       	adc	r29, r29
    123a:	9a 95       	dec	r25
    123c:	e1 f7       	brne	.-8      	; 0x1236 <_ZL9getNumberv+0x1a>
    123e:	c2 0f       	add	r28, r18
    1240:	d3 1f       	adc	r29, r19
    1242:	99 27       	eor	r25, r25
    1244:	87 fd       	sbrc	r24, 7
    1246:	90 95       	com	r25
    1248:	c8 0f       	add	r28, r24
    124a:	d9 1f       	adc	r29, r25
    124c:	e0 97       	sbiw	r28, 0x30	; 48
    124e:	80 91 51 01 	lds	r24, 0x0151
    1252:	90 91 52 01 	lds	r25, 0x0152
    1256:	01 96       	adiw	r24, 0x01	; 1
    1258:	90 93 52 01 	sts	0x0152, r25
    125c:	80 93 51 01 	sts	0x0151, r24
    1260:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <_ZL16currentCharacterv>
    1264:	98 2f       	mov	r25, r24
    1266:	90 53       	subi	r25, 0x30	; 48
    1268:	9a 30       	cpi	r25, 0x0A	; 10
    126a:	08 f3       	brcs	.-62     	; 0x122e <_ZL9getNumberv+0x12>
    126c:	ce 01       	movw	r24, r28
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	ff 90       	pop	r15
    1274:	ef 90       	pop	r14
    1276:	08 95       	ret

00001278 <_ZN15OrangutanBuzzer5init2Ev>:
    1278:	10 92 6f 00 	sts	0x006F, r1
    127c:	83 e2       	ldi	r24, 0x23	; 35
    127e:	80 93 80 00 	sts	0x0080, r24
    1282:	81 e1       	ldi	r24, 0x11	; 17
    1284:	80 93 81 00 	sts	0x0081, r24
    1288:	10 92 82 00 	sts	0x0082, r1
    128c:	80 e1       	ldi	r24, 0x10	; 16
    128e:	97 e2       	ldi	r25, 0x27	; 39
    1290:	90 93 89 00 	sts	0x0089, r25
    1294:	80 93 88 00 	sts	0x0088, r24
    1298:	10 92 8b 00 	sts	0x008B, r1
    129c:	10 92 8a 00 	sts	0x008A, r1
    12a0:	22 9a       	sbi	0x04, 2	; 4
    12a2:	78 94       	sei
    12a4:	08 95       	ret

000012a6 <_ZN15OrangutanBuzzer4initEv>:
    12a6:	80 91 50 01 	lds	r24, 0x0150
    12aa:	88 23       	and	r24, r24
    12ac:	29 f4       	brne	.+10     	; 0x12b8 <_ZN15OrangutanBuzzer4initEv+0x12>
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	80 93 50 01 	sts	0x0150, r24
    12b4:	0e 94 3c 09 	call	0x1278	; 0x1278 <_ZN15OrangutanBuzzer5init2Ev>
    12b8:	08 95       	ret

000012ba <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    12ba:	a0 e0       	ldi	r26, 0x00	; 0
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e3 e6       	ldi	r30, 0x63	; 99
    12c0:	f9 e0       	ldi	r31, 0x09	; 9
    12c2:	0c 94 48 16 	jmp	0x2c90	; 0x2c90 <__prologue_saves__+0xc>
    12c6:	8c 01       	movw	r16, r24
    12c8:	5b 01       	movw	r10, r22
    12ca:	e4 2e       	mov	r14, r20
    12cc:	0e 94 53 09 	call	0x12a6	; 0x12a6 <_ZN15OrangutanBuzzer4initEv>
    12d0:	10 92 02 01 	sts	0x0102, r1
    12d4:	17 ff       	sbrs	r17, 7
    12d6:	04 c0       	rjmp	.+8      	; 0x12e0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x26>
    12d8:	1f 77       	andi	r17, 0x7F	; 127
    12da:	aa e0       	ldi	r26, 0x0A	; 10
    12dc:	fa 2e       	mov	r15, r26
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2a>
    12e0:	ff 24       	eor	r15, r15
    12e2:	f3 94       	inc	r15
    12e4:	c0 90 81 00 	lds	r12, 0x0081
    12e8:	dd 24       	eor	r13, r13
    12ea:	28 ef       	ldi	r18, 0xF8	; 248
    12ec:	c2 22       	and	r12, r18
    12ee:	dd 24       	eor	r13, r13
    12f0:	88 ec       	ldi	r24, 0xC8	; 200
    12f2:	3f 2d       	mov	r19, r15
    12f4:	38 9f       	mul	r19, r24
    12f6:	c0 01       	movw	r24, r0
    12f8:	11 24       	eor	r1, r1
    12fa:	80 17       	cp	r24, r16
    12fc:	91 07       	cpc	r25, r17
    12fe:	d8 f4       	brcc	.+54     	; 0x1336 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x7c>
    1300:	e8 01       	movw	r28, r16
    1302:	67 e2       	ldi	r22, 0x27	; 39
    1304:	01 31       	cpi	r16, 0x11	; 17
    1306:	16 07       	cpc	r17, r22
    1308:	10 f0       	brcs	.+4      	; 0x130e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x54>
    130a:	c0 e1       	ldi	r28, 0x10	; 16
    130c:	d7 e2       	ldi	r29, 0x27	; 39
    130e:	be 01       	movw	r22, r28
    1310:	76 95       	lsr	r23
    1312:	67 95       	ror	r22
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	60 58       	subi	r22, 0x80	; 128
    131a:	79 46       	sbci	r23, 0x69	; 105
    131c:	87 46       	sbci	r24, 0x67	; 103
    131e:	9f 4f       	sbci	r25, 0xFF	; 255
    1320:	9e 01       	movw	r18, r28
    1322:	40 e0       	ldi	r20, 0x00	; 0
    1324:	50 e0       	ldi	r21, 0x00	; 0
    1326:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__udivmodsi4>
    132a:	89 01       	movw	r16, r18
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	c8 2a       	or	r12, r24
    1332:	d9 2a       	or	r13, r25
    1334:	2c c0       	rjmp	.+88     	; 0x138e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd4>
    1336:	98 e2       	ldi	r25, 0x28	; 40
    1338:	f9 9e       	mul	r15, r25
    133a:	90 2d       	mov	r25, r0
    133c:	11 24       	eor	r1, r1
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	89 2e       	mov	r8, r25
    1342:	e4 01       	movw	r28, r8
    1344:	4e 01       	movw	r8, r28
    1346:	98 2e       	mov	r9, r24
    1348:	e4 01       	movw	r28, r8
    134a:	80 16       	cp	r8, r16
    134c:	91 06       	cpc	r9, r17
    134e:	08 f4       	brcc	.+2      	; 0x1352 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x98>
    1350:	e8 01       	movw	r28, r16
    1352:	be 01       	movw	r22, r28
    1354:	76 95       	lsr	r23
    1356:	67 95       	ror	r22
    1358:	9e 01       	movw	r18, r28
    135a:	40 e0       	ldi	r20, 0x00	; 0
    135c:	50 e0       	ldi	r21, 0x00	; 0
    135e:	8f 2d       	mov	r24, r15
    1360:	8a 30       	cpi	r24, 0x0A	; 10
    1362:	39 f4       	brne	.+14     	; 0x1372 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xb8>
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	60 5e       	subi	r22, 0xE0	; 224
    136a:	73 44       	sbci	r23, 0x43	; 67
    136c:	81 44       	sbci	r24, 0x41	; 65
    136e:	9f 4f       	sbci	r25, 0xFF	; 255
    1370:	06 c0       	rjmp	.+12     	; 0x137e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc4>
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	60 53       	subi	r22, 0x30	; 48
    1378:	7d 4e       	sbci	r23, 0xED	; 237
    137a:	8c 4e       	sbci	r24, 0xEC	; 236
    137c:	9f 4f       	sbci	r25, 0xFF	; 255
    137e:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__udivmodsi4>
    1382:	89 01       	movw	r16, r18
    1384:	52 e0       	ldi	r21, 0x02	; 2
    1386:	85 2e       	mov	r8, r21
    1388:	91 2c       	mov	r9, r1
    138a:	c8 28       	or	r12, r8
    138c:	d9 28       	or	r13, r9
    138e:	2f 2d       	mov	r18, r15
    1390:	2a 30       	cpi	r18, 0x0A	; 10
    1392:	39 f4       	brne	.+14     	; 0x13a2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xe8>
    1394:	ce 01       	movw	r24, r28
    1396:	05 96       	adiw	r24, 0x05	; 5
    1398:	6a e0       	ldi	r22, 0x0A	; 10
    139a:	70 e0       	ldi	r23, 0x00	; 0
    139c:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <__udivmodhi4>
    13a0:	eb 01       	movw	r28, r22
    13a2:	33 e0       	ldi	r19, 0x03	; 3
    13a4:	c8 3e       	cpi	r28, 0xE8	; 232
    13a6:	d3 07       	cpc	r29, r19
    13a8:	79 f0       	breq	.+30     	; 0x13c8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x10e>
    13aa:	be 01       	movw	r22, r28
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	95 01       	movw	r18, r10
    13b2:	40 e0       	ldi	r20, 0x00	; 0
    13b4:	50 e0       	ldi	r21, 0x00	; 0
    13b6:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__mulsi3>
    13ba:	28 ee       	ldi	r18, 0xE8	; 232
    13bc:	33 e0       	ldi	r19, 0x03	; 3
    13be:	40 e0       	ldi	r20, 0x00	; 0
    13c0:	50 e0       	ldi	r21, 0x00	; 0
    13c2:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__divmodsi4>
    13c6:	01 c0       	rjmp	.+2      	; 0x13ca <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    13c8:	95 01       	movw	r18, r10
    13ca:	10 92 6f 00 	sts	0x006F, r1
    13ce:	c0 92 81 00 	sts	0x0081, r12
    13d2:	10 93 89 00 	sts	0x0089, r17
    13d6:	00 93 88 00 	sts	0x0088, r16
    13da:	40 91 88 00 	lds	r20, 0x0088
    13de:	50 91 89 00 	lds	r21, 0x0089
    13e2:	6e 2d       	mov	r22, r14
    13e4:	60 31       	cpi	r22, 0x10	; 16
    13e6:	08 f0       	brcs	.+2      	; 0x13ea <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    13e8:	6f e0       	ldi	r22, 0x0F	; 15
    13ea:	80 e1       	ldi	r24, 0x10	; 16
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	86 1b       	sub	r24, r22
    13f0:	91 09       	sbc	r25, r1
    13f2:	ba 01       	movw	r22, r20
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    13f6:	76 95       	lsr	r23
    13f8:	67 95       	ror	r22
    13fa:	8a 95       	dec	r24
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    13fe:	70 93 8b 00 	sts	0x008B, r23
    1402:	60 93 8a 00 	sts	0x008A, r22
    1406:	30 93 58 01 	sts	0x0158, r19
    140a:	20 93 57 01 	sts	0x0157, r18
    140e:	86 b3       	in	r24, 0x16	; 22
    1410:	8f ef       	ldi	r24, 0xFF	; 255
    1412:	86 bb       	out	0x16, r24	; 22
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	80 93 6f 00 	sts	0x006F, r24
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	ec e0       	ldi	r30, 0x0C	; 12
    1420:	0c 94 64 16 	jmp	0x2cc8	; 0x2cc8 <__epilogue_restores__+0xc>

00001424 <play_frequency>:
    1424:	0e 94 5d 09 	call	0x12ba	; 0x12ba <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1428:	08 95       	ret

0000142a <_ZN15OrangutanBuzzer8playNoteEhjh>:
    142a:	9b 01       	movw	r18, r22
    142c:	8f 3f       	cpi	r24, 0xFF	; 255
    142e:	11 f0       	breq	.+4      	; 0x1434 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa>
    1430:	44 23       	and	r20, r20
    1432:	29 f4       	brne	.+10     	; 0x143e <_ZN15OrangutanBuzzer8playNoteEhjh+0x14>
    1434:	88 ee       	ldi	r24, 0xE8	; 232
    1436:	93 e0       	ldi	r25, 0x03	; 3
    1438:	b9 01       	movw	r22, r18
    143a:	40 e0       	ldi	r20, 0x00	; 0
    143c:	49 c0       	rjmp	.+146    	; 0x14d0 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa6>
    143e:	81 31       	cpi	r24, 0x11	; 17
    1440:	30 f0       	brcs	.+12     	; 0x144e <_ZN15OrangutanBuzzer8playNoteEhjh+0x24>
    1442:	58 2f       	mov	r21, r24
    1444:	50 51       	subi	r21, 0x10	; 16
    1446:	50 36       	cpi	r21, 0x60	; 96
    1448:	18 f0       	brcs	.+6      	; 0x1450 <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
    144a:	5f e5       	ldi	r21, 0x5F	; 95
    144c:	01 c0       	rjmp	.+2      	; 0x1450 <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
    144e:	50 e0       	ldi	r21, 0x00	; 0
    1450:	85 2f       	mov	r24, r21
    1452:	6c e0       	ldi	r22, 0x0C	; 12
    1454:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__udivmodqi4>
    1458:	a8 2f       	mov	r26, r24
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e4 ef       	ldi	r30, 0xF4	; 244
    145e:	ff ef       	ldi	r31, 0xFF	; 255
    1460:	ae 9f       	mul	r26, r30
    1462:	b0 01       	movw	r22, r0
    1464:	af 9f       	mul	r26, r31
    1466:	70 0d       	add	r23, r0
    1468:	be 9f       	mul	r27, r30
    146a:	70 0d       	add	r23, r0
    146c:	11 24       	eor	r1, r1
    146e:	65 0f       	add	r22, r21
    1470:	71 1d       	adc	r23, r1
    1472:	6c 30       	cpi	r22, 0x0C	; 12
    1474:	71 05       	cpc	r23, r1
    1476:	40 f4       	brcc	.+16     	; 0x1488 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5e>
    1478:	fb 01       	movw	r30, r22
    147a:	ee 0f       	add	r30, r30
    147c:	ff 1f       	adc	r31, r31
    147e:	e4 5f       	subi	r30, 0xF4	; 244
    1480:	fe 4f       	sbci	r31, 0xFE	; 254
    1482:	60 81       	ld	r22, Z
    1484:	71 81       	ldd	r23, Z+1	; 0x01
    1486:	02 c0       	rjmp	.+4      	; 0x148c <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	70 e0       	ldi	r23, 0x00	; 0
    148c:	87 30       	cpi	r24, 0x07	; 7
    148e:	81 f0       	breq	.+32     	; 0x14b0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x86>
    1490:	08 2e       	mov	r0, r24
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <_ZN15OrangutanBuzzer8playNoteEhjh+0x6e>
    1494:	66 0f       	add	r22, r22
    1496:	77 1f       	adc	r23, r23
    1498:	0a 94       	dec	r0
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <_ZN15OrangutanBuzzer8playNoteEhjh+0x6a>
    149c:	82 30       	cpi	r24, 0x02	; 2
    149e:	28 f0       	brcs	.+10     	; 0x14aa <_ZN15OrangutanBuzzer8playNoteEhjh+0x80>
    14a0:	cb 01       	movw	r24, r22
    14a2:	05 96       	adiw	r24, 0x05	; 5
    14a4:	6a e0       	ldi	r22, 0x0A	; 10
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	0c c0       	rjmp	.+24     	; 0x14c2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x98>
    14aa:	60 50       	subi	r22, 0x00	; 0
    14ac:	70 48       	sbci	r23, 0x80	; 128
    14ae:	0b c0       	rjmp	.+22     	; 0x14c6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    14b0:	cb 01       	movw	r24, r22
    14b2:	b6 e0       	ldi	r27, 0x06	; 6
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	ba 95       	dec	r27
    14ba:	e1 f7       	brne	.-8      	; 0x14b4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x8a>
    14bc:	02 96       	adiw	r24, 0x02	; 2
    14be:	65 e0       	ldi	r22, 0x05	; 5
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <__udivmodhi4>
    14c6:	40 31       	cpi	r20, 0x10	; 16
    14c8:	08 f0       	brcs	.+2      	; 0x14cc <_ZN15OrangutanBuzzer8playNoteEhjh+0xa2>
    14ca:	4f e0       	ldi	r20, 0x0F	; 15
    14cc:	cb 01       	movw	r24, r22
    14ce:	b9 01       	movw	r22, r18
    14d0:	0e 94 5d 09 	call	0x12ba	; 0x12ba <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    14d4:	08 95       	ret

000014d6 <_ZL8nextNotev>:
    14d6:	a0 e0       	ldi	r26, 0x00	; 0
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e1 e7       	ldi	r30, 0x71	; 113
    14dc:	fa e0       	ldi	r31, 0x0A	; 10
    14de:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__prologue_saves__+0xa>
    14e2:	b0 90 03 01 	lds	r11, 0x0103
    14e6:	80 91 53 01 	lds	r24, 0x0153
    14ea:	88 23       	and	r24, r24
    14ec:	61 f0       	breq	.+24     	; 0x1506 <_ZL8nextNotev+0x30>
    14ee:	60 91 54 01 	lds	r22, 0x0154
    14f2:	66 23       	and	r22, r22
    14f4:	41 f0       	breq	.+16     	; 0x1506 <_ZL8nextNotev+0x30>
    14f6:	8f ef       	ldi	r24, 0xFF	; 255
    14f8:	70 e0       	ldi	r23, 0x00	; 0
    14fa:	40 e0       	ldi	r20, 0x00	; 0
    14fc:	0e 94 15 0a 	call	0x142a	; 0x142a <_ZN15OrangutanBuzzer8playNoteEhjh>
    1500:	10 92 54 01 	sts	0x0154, r1
    1504:	34 c1       	rjmp	.+616    	; 0x176e <_ZL8nextNotev+0x298>
    1506:	c0 ec       	ldi	r28, 0xC0	; 192
    1508:	dd e5       	ldi	r29, 0x5D	; 93
    150a:	aa 24       	eor	r10, r10
    150c:	a3 94       	inc	r10
    150e:	14 e0       	ldi	r17, 0x04	; 4
    1510:	71 2e       	mov	r7, r17
    1512:	00 ed       	ldi	r16, 0xD0	; 208
    1514:	17 e0       	ldi	r17, 0x07	; 7
    1516:	b4 e0       	ldi	r27, 0x04	; 4
    1518:	eb 2e       	mov	r14, r27
    151a:	f1 2c       	mov	r15, r1
    151c:	a4 ef       	ldi	r26, 0xF4	; 244
    151e:	ca 2e       	mov	r12, r26
    1520:	a1 e0       	ldi	r26, 0x01	; 1
    1522:	da 2e       	mov	r13, r26
    1524:	ff e0       	ldi	r31, 0x0F	; 15
    1526:	8f 2e       	mov	r8, r31
    1528:	91 2c       	mov	r9, r1
    152a:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <_ZL16currentCharacterv>
    152e:	20 91 51 01 	lds	r18, 0x0151
    1532:	30 91 52 01 	lds	r19, 0x0152
    1536:	2f 5f       	subi	r18, 0xFF	; 255
    1538:	3f 4f       	sbci	r19, 0xFF	; 255
    153a:	30 93 52 01 	sts	0x0152, r19
    153e:	20 93 51 01 	sts	0x0151, r18
    1542:	86 36       	cpi	r24, 0x66	; 102
    1544:	f1 f1       	breq	.+124    	; 0x15c2 <_ZL8nextNotev+0xec>
    1546:	87 36       	cpi	r24, 0x67	; 103
    1548:	cc f4       	brge	.+50     	; 0x157c <_ZL8nextNotev+0xa6>
    154a:	82 36       	cpi	r24, 0x62	; 98
    154c:	09 f4       	brne	.+2      	; 0x1550 <_ZL8nextNotev+0x7a>
    154e:	af c0       	rjmp	.+350    	; 0x16ae <_ZL8nextNotev+0x1d8>
    1550:	83 36       	cpi	r24, 0x63	; 99
    1552:	7c f4       	brge	.+30     	; 0x1572 <_ZL8nextNotev+0x9c>
    1554:	8e 33       	cpi	r24, 0x3E	; 62
    1556:	49 f1       	breq	.+82     	; 0x15aa <_ZL8nextNotev+0xd4>
    1558:	8f 33       	cpi	r24, 0x3F	; 63
    155a:	3c f4       	brge	.+14     	; 0x156a <_ZL8nextNotev+0x94>
    155c:	81 32       	cpi	r24, 0x21	; 33
    155e:	09 f4       	brne	.+2      	; 0x1562 <_ZL8nextNotev+0x8c>
    1560:	87 c0       	rjmp	.+270    	; 0x1670 <_ZL8nextNotev+0x19a>
    1562:	8c 33       	cpi	r24, 0x3C	; 60
    1564:	09 f0       	breq	.+2      	; 0x1568 <_ZL8nextNotev+0x92>
    1566:	9b c0       	rjmp	.+310    	; 0x169e <_ZL8nextNotev+0x1c8>
    1568:	22 c0       	rjmp	.+68     	; 0x15ae <_ZL8nextNotev+0xd8>
    156a:	81 36       	cpi	r24, 0x61	; 97
    156c:	09 f0       	breq	.+2      	; 0x1570 <_ZL8nextNotev+0x9a>
    156e:	97 c0       	rjmp	.+302    	; 0x169e <_ZL8nextNotev+0x1c8>
    1570:	9b c0       	rjmp	.+310    	; 0x16a8 <_ZL8nextNotev+0x1d2>
    1572:	84 36       	cpi	r24, 0x64	; 100
    1574:	01 f1       	breq	.+64     	; 0x15b6 <_ZL8nextNotev+0xe0>
    1576:	85 36       	cpi	r24, 0x65	; 101
    1578:	0c f5       	brge	.+66     	; 0x15bc <_ZL8nextNotev+0xe6>
    157a:	1b c0       	rjmp	.+54     	; 0x15b2 <_ZL8nextNotev+0xdc>
    157c:	8f 36       	cpi	r24, 0x6F	; 111
    157e:	09 f4       	brne	.+2      	; 0x1582 <_ZL8nextNotev+0xac>
    1580:	47 c0       	rjmp	.+142    	; 0x1610 <_ZL8nextNotev+0x13a>
    1582:	80 37       	cpi	r24, 0x70	; 112
    1584:	44 f4       	brge	.+16     	; 0x1596 <_ZL8nextNotev+0xc0>
    1586:	8c 36       	cpi	r24, 0x6C	; 108
    1588:	11 f1       	breq	.+68     	; 0x15ce <_ZL8nextNotev+0xf8>
    158a:	8d 36       	cpi	r24, 0x6D	; 109
    158c:	61 f1       	breq	.+88     	; 0x15e6 <_ZL8nextNotev+0x110>
    158e:	87 36       	cpi	r24, 0x67	; 103
    1590:	09 f0       	breq	.+2      	; 0x1594 <_ZL8nextNotev+0xbe>
    1592:	85 c0       	rjmp	.+266    	; 0x169e <_ZL8nextNotev+0x1c8>
    1594:	19 c0       	rjmp	.+50     	; 0x15c8 <_ZL8nextNotev+0xf2>
    1596:	84 37       	cpi	r24, 0x74	; 116
    1598:	09 f4       	brne	.+2      	; 0x159c <_ZL8nextNotev+0xc6>
    159a:	44 c0       	rjmp	.+136    	; 0x1624 <_ZL8nextNotev+0x14e>
    159c:	86 37       	cpi	r24, 0x76	; 118
    159e:	09 f4       	brne	.+2      	; 0x15a2 <_ZL8nextNotev+0xcc>
    15a0:	60 c0       	rjmp	.+192    	; 0x1662 <_ZL8nextNotev+0x18c>
    15a2:	82 37       	cpi	r24, 0x72	; 114
    15a4:	09 f0       	breq	.+2      	; 0x15a8 <_ZL8nextNotev+0xd2>
    15a6:	7b c0       	rjmp	.+246    	; 0x169e <_ZL8nextNotev+0x1c8>
    15a8:	39 c0       	rjmp	.+114    	; 0x161c <_ZL8nextNotev+0x146>
    15aa:	b3 94       	inc	r11
    15ac:	be cf       	rjmp	.-132    	; 0x152a <_ZL8nextNotev+0x54>
    15ae:	ba 94       	dec	r11
    15b0:	bc cf       	rjmp	.-136    	; 0x152a <_ZL8nextNotev+0x54>
    15b2:	ee 24       	eor	r14, r14
    15b4:	35 c0       	rjmp	.+106    	; 0x1620 <_ZL8nextNotev+0x14a>
    15b6:	ee 24       	eor	r14, r14
    15b8:	82 e0       	ldi	r24, 0x02	; 2
    15ba:	7b c0       	rjmp	.+246    	; 0x16b2 <_ZL8nextNotev+0x1dc>
    15bc:	ee 24       	eor	r14, r14
    15be:	84 e0       	ldi	r24, 0x04	; 4
    15c0:	78 c0       	rjmp	.+240    	; 0x16b2 <_ZL8nextNotev+0x1dc>
    15c2:	ee 24       	eor	r14, r14
    15c4:	85 e0       	ldi	r24, 0x05	; 5
    15c6:	75 c0       	rjmp	.+234    	; 0x16b2 <_ZL8nextNotev+0x1dc>
    15c8:	ee 24       	eor	r14, r14
    15ca:	87 e0       	ldi	r24, 0x07	; 7
    15cc:	72 c0       	rjmp	.+228    	; 0x16b2 <_ZL8nextNotev+0x1dc>
    15ce:	0e 94 0e 09 	call	0x121c	; 0x121c <_ZL9getNumberv>
    15d2:	bc 01       	movw	r22, r24
    15d4:	90 93 05 01 	sts	0x0105, r25
    15d8:	80 93 04 01 	sts	0x0104, r24
    15dc:	80 91 06 01 	lds	r24, 0x0106
    15e0:	90 91 07 01 	lds	r25, 0x0107
    15e4:	37 c0       	rjmp	.+110    	; 0x1654 <_ZL8nextNotev+0x17e>
    15e6:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <_ZL16currentCharacterv>
    15ea:	8c 36       	cpi	r24, 0x6C	; 108
    15ec:	19 f4       	brne	.+6      	; 0x15f4 <_ZL8nextNotev+0x11e>
    15ee:	10 92 53 01 	sts	0x0153, r1
    15f2:	04 c0       	rjmp	.+8      	; 0x15fc <_ZL8nextNotev+0x126>
    15f4:	a0 92 53 01 	sts	0x0153, r10
    15f8:	10 92 54 01 	sts	0x0154, r1
    15fc:	80 91 51 01 	lds	r24, 0x0151
    1600:	90 91 52 01 	lds	r25, 0x0152
    1604:	01 96       	adiw	r24, 0x01	; 1
    1606:	90 93 52 01 	sts	0x0152, r25
    160a:	80 93 51 01 	sts	0x0151, r24
    160e:	8d cf       	rjmp	.-230    	; 0x152a <_ZL8nextNotev+0x54>
    1610:	0e 94 0e 09 	call	0x121c	; 0x121c <_ZL9getNumberv>
    1614:	b8 2e       	mov	r11, r24
    1616:	80 93 03 01 	sts	0x0103, r24
    161a:	87 cf       	rjmp	.-242    	; 0x152a <_ZL8nextNotev+0x54>
    161c:	ee 24       	eor	r14, r14
    161e:	e3 94       	inc	r14
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	47 c0       	rjmp	.+142    	; 0x16b2 <_ZL8nextNotev+0x1dc>
    1624:	0e 94 0e 09 	call	0x121c	; 0x121c <_ZL9getNumberv>
    1628:	bc 01       	movw	r22, r24
    162a:	ce 01       	movw	r24, r28
    162c:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <__udivmodhi4>
    1630:	cb 01       	movw	r24, r22
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	53 e0       	ldi	r21, 0x03	; 3
    1638:	66 0f       	add	r22, r22
    163a:	77 1f       	adc	r23, r23
    163c:	5a 95       	dec	r21
    163e:	e1 f7       	brne	.-8      	; 0x1638 <_ZL8nextNotev+0x162>
    1640:	86 0f       	add	r24, r22
    1642:	97 1f       	adc	r25, r23
    1644:	90 93 07 01 	sts	0x0107, r25
    1648:	80 93 06 01 	sts	0x0106, r24
    164c:	60 91 04 01 	lds	r22, 0x0104
    1650:	70 91 05 01 	lds	r23, 0x0105
    1654:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <__udivmodhi4>
    1658:	70 93 09 01 	sts	0x0109, r23
    165c:	60 93 08 01 	sts	0x0108, r22
    1660:	64 cf       	rjmp	.-312    	; 0x152a <_ZL8nextNotev+0x54>
    1662:	0e 94 0e 09 	call	0x121c	; 0x121c <_ZL9getNumberv>
    1666:	90 93 0b 01 	sts	0x010B, r25
    166a:	80 93 0a 01 	sts	0x010A, r24
    166e:	5d cf       	rjmp	.-326    	; 0x152a <_ZL8nextNotev+0x54>
    1670:	70 92 03 01 	sts	0x0103, r7
    1674:	10 93 07 01 	sts	0x0107, r17
    1678:	00 93 06 01 	sts	0x0106, r16
    167c:	f0 92 05 01 	sts	0x0105, r15
    1680:	e0 92 04 01 	sts	0x0104, r14
    1684:	d0 92 09 01 	sts	0x0109, r13
    1688:	c0 92 08 01 	sts	0x0108, r12
    168c:	90 92 0b 01 	sts	0x010B, r9
    1690:	80 92 0a 01 	sts	0x010A, r8
    1694:	10 92 53 01 	sts	0x0153, r1
    1698:	44 e0       	ldi	r20, 0x04	; 4
    169a:	b4 2e       	mov	r11, r20
    169c:	46 cf       	rjmp	.-372    	; 0x152a <_ZL8nextNotev+0x54>
    169e:	10 92 52 01 	sts	0x0152, r1
    16a2:	10 92 51 01 	sts	0x0151, r1
    16a6:	63 c0       	rjmp	.+198    	; 0x176e <_ZL8nextNotev+0x298>
    16a8:	ee 24       	eor	r14, r14
    16aa:	89 e0       	ldi	r24, 0x09	; 9
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <_ZL8nextNotev+0x1dc>
    16ae:	ee 24       	eor	r14, r14
    16b0:	8b e0       	ldi	r24, 0x0B	; 11
    16b2:	9c e0       	ldi	r25, 0x0C	; 12
    16b4:	b9 9e       	mul	r11, r25
    16b6:	b0 2c       	mov	r11, r0
    16b8:	11 24       	eor	r1, r1
    16ba:	b8 0e       	add	r11, r24
    16bc:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <_ZL16currentCharacterv>
    16c0:	8b 32       	cpi	r24, 0x2B	; 43
    16c2:	11 f0       	breq	.+4      	; 0x16c8 <_ZL8nextNotev+0x1f2>
    16c4:	83 32       	cpi	r24, 0x23	; 35
    16c6:	b9 f4       	brne	.+46     	; 0x16f6 <_ZL8nextNotev+0x220>
    16c8:	80 91 51 01 	lds	r24, 0x0151
    16cc:	90 91 52 01 	lds	r25, 0x0152
    16d0:	01 96       	adiw	r24, 0x01	; 1
    16d2:	90 93 52 01 	sts	0x0152, r25
    16d6:	80 93 51 01 	sts	0x0151, r24
    16da:	b3 94       	inc	r11
    16dc:	ef cf       	rjmp	.-34     	; 0x16bc <_ZL8nextNotev+0x1e6>
    16de:	80 91 51 01 	lds	r24, 0x0151
    16e2:	90 91 52 01 	lds	r25, 0x0152
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	90 93 52 01 	sts	0x0152, r25
    16ec:	80 93 51 01 	sts	0x0151, r24
    16f0:	ba 94       	dec	r11
    16f2:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <_ZL16currentCharacterv>
    16f6:	8d 32       	cpi	r24, 0x2D	; 45
    16f8:	91 f3       	breq	.-28     	; 0x16de <_ZL8nextNotev+0x208>
    16fa:	c0 91 08 01 	lds	r28, 0x0108
    16fe:	d0 91 09 01 	lds	r29, 0x0109
    1702:	81 53       	subi	r24, 0x31	; 49
    1704:	88 30       	cpi	r24, 0x08	; 8
    1706:	58 f4       	brcc	.+22     	; 0x171e <_ZL8nextNotev+0x248>
    1708:	c0 91 06 01 	lds	r28, 0x0106
    170c:	d0 91 07 01 	lds	r29, 0x0107
    1710:	0e 94 0e 09 	call	0x121c	; 0x121c <_ZL9getNumberv>
    1714:	bc 01       	movw	r22, r24
    1716:	ce 01       	movw	r24, r28
    1718:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <__udivmodhi4>
    171c:	eb 01       	movw	r28, r22
    171e:	8e 01       	movw	r16, r28
    1720:	0b c0       	rjmp	.+22     	; 0x1738 <_ZL8nextNotev+0x262>
    1722:	80 91 51 01 	lds	r24, 0x0151
    1726:	90 91 52 01 	lds	r25, 0x0152
    172a:	01 96       	adiw	r24, 0x01	; 1
    172c:	90 93 52 01 	sts	0x0152, r25
    1730:	80 93 51 01 	sts	0x0151, r24
    1734:	c0 0f       	add	r28, r16
    1736:	d1 1f       	adc	r29, r17
    1738:	16 95       	lsr	r17
    173a:	07 95       	ror	r16
    173c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <_ZL16currentCharacterv>
    1740:	8e 32       	cpi	r24, 0x2E	; 46
    1742:	79 f3       	breq	.-34     	; 0x1722 <_ZL8nextNotev+0x24c>
    1744:	80 91 53 01 	lds	r24, 0x0153
    1748:	88 23       	and	r24, r24
    174a:	39 f0       	breq	.+14     	; 0x175a <_ZL8nextNotev+0x284>
    174c:	ce 01       	movw	r24, r28
    174e:	96 95       	lsr	r25
    1750:	87 95       	ror	r24
    1752:	80 93 54 01 	sts	0x0154, r24
    1756:	c8 1b       	sub	r28, r24
    1758:	d1 09       	sbc	r29, r1
    175a:	ee 20       	and	r14, r14
    175c:	11 f0       	breq	.+4      	; 0x1762 <_ZL8nextNotev+0x28c>
    175e:	bb 24       	eor	r11, r11
    1760:	ba 94       	dec	r11
    1762:	8b 2d       	mov	r24, r11
    1764:	be 01       	movw	r22, r28
    1766:	40 91 0a 01 	lds	r20, 0x010A
    176a:	0e 94 15 0a 	call	0x142a	; 0x142a <_ZN15OrangutanBuzzer8playNoteEhjh>
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	ed e0       	ldi	r30, 0x0D	; 13
    1774:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__epilogue_restores__+0xa>

00001778 <__vector_13>:
    1778:	1f 92       	push	r1
    177a:	0f 92       	push	r0
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	0f 92       	push	r0
    1780:	11 24       	eor	r1, r1
    1782:	2f 93       	push	r18
    1784:	3f 93       	push	r19
    1786:	4f 93       	push	r20
    1788:	5f 93       	push	r21
    178a:	6f 93       	push	r22
    178c:	7f 93       	push	r23
    178e:	8f 93       	push	r24
    1790:	9f 93       	push	r25
    1792:	af 93       	push	r26
    1794:	bf 93       	push	r27
    1796:	ef 93       	push	r30
    1798:	ff 93       	push	r31
    179a:	80 91 57 01 	lds	r24, 0x0157
    179e:	90 91 58 01 	lds	r25, 0x0158
    17a2:	9c 01       	movw	r18, r24
    17a4:	21 50       	subi	r18, 0x01	; 1
    17a6:	30 40       	sbci	r19, 0x00	; 0
    17a8:	30 93 58 01 	sts	0x0158, r19
    17ac:	20 93 57 01 	sts	0x0157, r18
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	11 f5       	brne	.+68     	; 0x17f8 <__vector_13+0x80>
    17b4:	10 92 6f 00 	sts	0x006F, r1
    17b8:	78 94       	sei
    17ba:	80 91 81 00 	lds	r24, 0x0081
    17be:	88 7f       	andi	r24, 0xF8	; 248
    17c0:	81 60       	ori	r24, 0x01	; 1
    17c2:	80 93 81 00 	sts	0x0081, r24
    17c6:	80 e1       	ldi	r24, 0x10	; 16
    17c8:	97 e2       	ldi	r25, 0x27	; 39
    17ca:	90 93 89 00 	sts	0x0089, r25
    17ce:	80 93 88 00 	sts	0x0088, r24
    17d2:	10 92 8b 00 	sts	0x008B, r1
    17d6:	10 92 8a 00 	sts	0x008A, r1
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	80 93 02 01 	sts	0x0102, r24
    17e0:	80 91 51 01 	lds	r24, 0x0151
    17e4:	90 91 52 01 	lds	r25, 0x0152
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	31 f0       	breq	.+12     	; 0x17f8 <__vector_13+0x80>
    17ec:	80 91 56 01 	lds	r24, 0x0156
    17f0:	88 23       	and	r24, r24
    17f2:	11 f4       	brne	.+4      	; 0x17f8 <__vector_13+0x80>
    17f4:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <_ZL8nextNotev>
    17f8:	ff 91       	pop	r31
    17fa:	ef 91       	pop	r30
    17fc:	bf 91       	pop	r27
    17fe:	af 91       	pop	r26
    1800:	9f 91       	pop	r25
    1802:	8f 91       	pop	r24
    1804:	7f 91       	pop	r23
    1806:	6f 91       	pop	r22
    1808:	5f 91       	pop	r21
    180a:	4f 91       	pop	r20
    180c:	3f 91       	pop	r19
    180e:	2f 91       	pop	r18
    1810:	0f 90       	pop	r0
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	0f 90       	pop	r0
    1816:	1f 90       	pop	r1
    1818:	18 95       	reti

0000181a <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    181a:	10 92 6f 00 	sts	0x006F, r1
    181e:	90 93 52 01 	sts	0x0152, r25
    1822:	80 93 51 01 	sts	0x0151, r24
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	80 93 55 01 	sts	0x0155, r24
    182c:	10 92 54 01 	sts	0x0154, r1
    1830:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <_ZL8nextNotev>
    1834:	08 95       	ret

00001836 <play_from_program_space>:
    1836:	0e 94 0d 0c 	call	0x181a	; 0x181a <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    183a:	08 95       	ret

0000183c <delayMicroseconds.clone.0>:
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	6f 93       	push	r22
    1842:	64 e0       	ldi	r22, 0x04	; 4
    1844:	6a 95       	dec	r22
    1846:	f1 f7       	brne	.-4      	; 0x1844 <delayMicroseconds.clone.0+0x8>
    1848:	6f 91       	pop	r22
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	c9 f7       	brne	.-14     	; 0x1840 <delayMicroseconds.clone.0+0x4>
    184e:	08 95       	ret

00001850 <_ZN12OrangutanLCD8busyWaitEv>:
    1850:	0f 93       	push	r16
    1852:	1f 93       	push	r17
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
    1858:	1a b1       	in	r17, 0x0a	; 10
    185a:	57 98       	cbi	0x0a, 7	; 10
    185c:	5a 98       	cbi	0x0b, 2	; 11
    185e:	28 9a       	sbi	0x05, 0	; 5
    1860:	c0 e0       	ldi	r28, 0x00	; 0
    1862:	d0 e0       	ldi	r29, 0x00	; 0
    1864:	0e 94 1e 0c 	call	0x183c	; 0x183c <delayMicroseconds.clone.0>
    1868:	5c 9a       	sbi	0x0b, 4	; 11
    186a:	0e 94 1e 0c 	call	0x183c	; 0x183c <delayMicroseconds.clone.0>
    186e:	09 b1       	in	r16, 0x09	; 9
    1870:	5c 98       	cbi	0x0b, 4	; 11
    1872:	0e 94 1e 0c 	call	0x183c	; 0x183c <delayMicroseconds.clone.0>
    1876:	5c 9a       	sbi	0x0b, 4	; 11
    1878:	0e 94 1e 0c 	call	0x183c	; 0x183c <delayMicroseconds.clone.0>
    187c:	5c 98       	cbi	0x0b, 4	; 11
    187e:	07 ff       	sbrs	r16, 7
    1880:	11 c0       	rjmp	.+34     	; 0x18a4 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    1882:	24 96       	adiw	r28, 0x04	; 4
    1884:	9e 01       	movw	r18, r28
    1886:	40 e0       	ldi	r20, 0x00	; 0
    1888:	50 e0       	ldi	r21, 0x00	; 0
    188a:	80 91 5d 01 	lds	r24, 0x015D
    188e:	90 91 5e 01 	lds	r25, 0x015E
    1892:	a0 91 5f 01 	lds	r26, 0x015F
    1896:	b0 91 60 01 	lds	r27, 0x0160
    189a:	28 17       	cp	r18, r24
    189c:	39 07       	cpc	r19, r25
    189e:	4a 07       	cpc	r20, r26
    18a0:	5b 07       	cpc	r21, r27
    18a2:	00 f3       	brcs	.-64     	; 0x1864 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    18a4:	1a b9       	out	0x0a, r17	; 10
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	1f 91       	pop	r17
    18ac:	0f 91       	pop	r16
    18ae:	08 95       	ret

000018b0 <_ZN12OrangutanLCD8sendDataEh>:
    18b0:	65 b1       	in	r22, 0x05	; 5
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	ac 01       	movw	r20, r24
    18b6:	41 70       	andi	r20, 0x01	; 1
    18b8:	50 70       	andi	r21, 0x00	; 0
    18ba:	44 0f       	add	r20, r20
    18bc:	55 1f       	adc	r21, r21
    18be:	9c 01       	movw	r18, r24
    18c0:	26 70       	andi	r18, 0x06	; 6
    18c2:	30 70       	andi	r19, 0x00	; 0
    18c4:	53 e0       	ldi	r21, 0x03	; 3
    18c6:	22 0f       	add	r18, r18
    18c8:	33 1f       	adc	r19, r19
    18ca:	5a 95       	dec	r21
    18cc:	e1 f7       	brne	.-8      	; 0x18c6 <_ZN12OrangutanLCD8sendDataEh+0x16>
    18ce:	24 2b       	or	r18, r20
    18d0:	6d 7c       	andi	r22, 0xCD	; 205
    18d2:	26 2b       	or	r18, r22
    18d4:	25 b9       	out	0x05, r18	; 5
    18d6:	2b b1       	in	r18, 0x0b	; 11
    18d8:	88 70       	andi	r24, 0x08	; 8
    18da:	90 70       	andi	r25, 0x00	; 0
    18dc:	34 e0       	ldi	r19, 0x04	; 4
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	3a 95       	dec	r19
    18e4:	e1 f7       	brne	.-8      	; 0x18de <_ZN12OrangutanLCD8sendDataEh+0x2e>
    18e6:	2f 77       	andi	r18, 0x7F	; 127
    18e8:	28 2b       	or	r18, r24
    18ea:	2b b9       	out	0x0b, r18	; 11
    18ec:	5c 9a       	sbi	0x0b, 4	; 11
    18ee:	0e 94 1e 0c 	call	0x183c	; 0x183c <delayMicroseconds.clone.0>
    18f2:	5c 98       	cbi	0x0b, 4	; 11
    18f4:	0e 94 1e 0c 	call	0x183c	; 0x183c <delayMicroseconds.clone.0>
    18f8:	08 95       	ret

000018fa <_ZN12OrangutanLCD4sendEhhh>:
    18fa:	a2 e0       	ldi	r26, 0x02	; 2
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e3 e8       	ldi	r30, 0x83	; 131
    1900:	fc e0       	ldi	r31, 0x0C	; 12
    1902:	0c 94 4d 16 	jmp	0x2c9a	; 0x2c9a <__prologue_saves__+0x16>
    1906:	18 2f       	mov	r17, r24
    1908:	4a 83       	std	Y+2, r20	; 0x02
    190a:	69 83       	std	Y+1, r22	; 0x01
    190c:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <_ZN12OrangutanLCD4initEv>
    1910:	0e 94 28 0c 	call	0x1850	; 0x1850 <_ZN12OrangutanLCD8busyWaitEv>
    1914:	f4 b0       	in	r15, 0x04	; 4
    1916:	05 b1       	in	r16, 0x05	; 5
    1918:	da b0       	in	r13, 0x0a	; 10
    191a:	eb b0       	in	r14, 0x0b	; 11
    191c:	28 98       	cbi	0x05, 0	; 5
    191e:	69 81       	ldd	r22, Y+1	; 0x01
    1920:	4a 81       	ldd	r20, Y+2	; 0x02
    1922:	66 23       	and	r22, r22
    1924:	11 f0       	breq	.+4      	; 0x192a <_ZN12OrangutanLCD4sendEhhh+0x30>
    1926:	5a 9a       	sbi	0x0b, 2	; 11
    1928:	01 c0       	rjmp	.+2      	; 0x192c <_ZN12OrangutanLCD4sendEhhh+0x32>
    192a:	5a 98       	cbi	0x0b, 2	; 11
    192c:	84 b1       	in	r24, 0x04	; 4
    192e:	82 63       	ori	r24, 0x32	; 50
    1930:	84 b9       	out	0x04, r24	; 4
    1932:	57 9a       	sbi	0x0a, 7	; 10
    1934:	41 30       	cpi	r20, 0x01	; 1
    1936:	29 f0       	breq	.+10     	; 0x1942 <_ZN12OrangutanLCD4sendEhhh+0x48>
    1938:	81 2f       	mov	r24, r17
    193a:	82 95       	swap	r24
    193c:	8f 70       	andi	r24, 0x0F	; 15
    193e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN12OrangutanLCD8sendDataEh>
    1942:	81 2f       	mov	r24, r17
    1944:	8f 70       	andi	r24, 0x0F	; 15
    1946:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN12OrangutanLCD8sendDataEh>
    194a:	da b8       	out	0x0a, r13	; 10
    194c:	eb b8       	out	0x0b, r14	; 11
    194e:	f4 b8       	out	0x04, r15	; 4
    1950:	05 b9       	out	0x05, r16	; 5
    1952:	22 96       	adiw	r28, 0x02	; 2
    1954:	e7 e0       	ldi	r30, 0x07	; 7
    1956:	0c 94 69 16 	jmp	0x2cd2	; 0x2cd2 <__epilogue_restores__+0x16>

0000195a <_ZN12OrangutanLCD8send_cmdEh>:
    195a:	60 e0       	ldi	r22, 0x00	; 0
    195c:	42 e0       	ldi	r20, 0x02	; 2
    195e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN12OrangutanLCD4sendEhhh>
    1962:	08 95       	ret

00001964 <_ZN12OrangutanLCD9send_dataEh>:
    1964:	61 e0       	ldi	r22, 0x01	; 1
    1966:	42 e0       	ldi	r20, 0x02	; 2
    1968:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN12OrangutanLCD4sendEhhh>
    196c:	08 95       	ret

0000196e <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    196e:	ef 92       	push	r14
    1970:	ff 92       	push	r15
    1972:	1f 93       	push	r17
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	0f 92       	push	r0
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	66 0f       	add	r22, r22
    1980:	66 0f       	add	r22, r22
    1982:	66 0f       	add	r22, r22
    1984:	48 2f       	mov	r20, r24
    1986:	59 2f       	mov	r21, r25
    1988:	7a 01       	movw	r14, r20
    198a:	10 e0       	ldi	r17, 0x00	; 0
    198c:	81 2f       	mov	r24, r17
    198e:	86 0f       	add	r24, r22
    1990:	80 64       	ori	r24, 0x40	; 64
    1992:	69 83       	std	Y+1, r22	; 0x01
    1994:	0e 94 ad 0c 	call	0x195a	; 0x195a <_ZN12OrangutanLCD8send_cmdEh>
    1998:	f7 01       	movw	r30, r14
    199a:	84 91       	lpm	r24, Z
    199c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN12OrangutanLCD9send_dataEh>
    19a0:	1f 5f       	subi	r17, 0xFF	; 255
    19a2:	08 94       	sec
    19a4:	e1 1c       	adc	r14, r1
    19a6:	f1 1c       	adc	r15, r1
    19a8:	69 81       	ldd	r22, Y+1	; 0x01
    19aa:	18 30       	cpi	r17, 0x08	; 8
    19ac:	79 f7       	brne	.-34     	; 0x198c <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x1e>
    19ae:	0f 90       	pop	r0
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	1f 91       	pop	r17
    19b6:	ff 90       	pop	r15
    19b8:	ef 90       	pop	r14
    19ba:	08 95       	ret

000019bc <lcd_load_custom_character>:
    19bc:	0e 94 b7 0c 	call	0x196e	; 0x196e <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    19c0:	08 95       	ret

000019c2 <print_character>:
    19c2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN12OrangutanLCD9send_dataEh>
    19c6:	08 95       	ret

000019c8 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    19c8:	60 e0       	ldi	r22, 0x00	; 0
    19ca:	41 e0       	ldi	r20, 0x01	; 1
    19cc:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN12OrangutanLCD4sendEhhh>
    19d0:	08 95       	ret

000019d2 <_ZN12OrangutanLCD5init2Ev>:
    19d2:	80 e1       	ldi	r24, 0x10	; 16
    19d4:	97 e2       	ldi	r25, 0x27	; 39
    19d6:	a0 e0       	ldi	r26, 0x00	; 0
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	80 93 5d 01 	sts	0x015D, r24
    19de:	90 93 5e 01 	sts	0x015E, r25
    19e2:	a0 93 5f 01 	sts	0x015F, r26
    19e6:	b0 93 60 01 	sts	0x0160, r27
    19ea:	52 9a       	sbi	0x0a, 2	; 10
    19ec:	20 9a       	sbi	0x04, 0	; 4
    19ee:	54 9a       	sbi	0x0a, 4	; 10
    19f0:	8e e1       	ldi	r24, 0x1E	; 30
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <delay_ms>
    19f8:	83 e0       	ldi	r24, 0x03	; 3
    19fa:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    19fe:	86 e0       	ldi	r24, 0x06	; 6
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <delay_ms>
    1a06:	83 e0       	ldi	r24, 0x03	; 3
    1a08:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1a0c:	82 e0       	ldi	r24, 0x02	; 2
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <delay_ms>
    1a14:	83 e0       	ldi	r24, 0x03	; 3
    1a16:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1a1a:	82 e0       	ldi	r24, 0x02	; 2
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <delay_ms>
    1a22:	82 e0       	ldi	r24, 0x02	; 2
    1a24:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1a28:	82 e0       	ldi	r24, 0x02	; 2
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <delay_ms>
    1a30:	88 e2       	ldi	r24, 0x28	; 40
    1a32:	0e 94 ad 0c 	call	0x195a	; 0x195a <_ZN12OrangutanLCD8send_cmdEh>
    1a36:	88 e0       	ldi	r24, 0x08	; 8
    1a38:	0e 94 ad 0c 	call	0x195a	; 0x195a <_ZN12OrangutanLCD8send_cmdEh>
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	0e 94 ad 0c 	call	0x195a	; 0x195a <_ZN12OrangutanLCD8send_cmdEh>
    1a42:	86 e0       	ldi	r24, 0x06	; 6
    1a44:	0e 94 ad 0c 	call	0x195a	; 0x195a <_ZN12OrangutanLCD8send_cmdEh>
    1a48:	8c e0       	ldi	r24, 0x0C	; 12
    1a4a:	0e 94 ad 0c 	call	0x195a	; 0x195a <_ZN12OrangutanLCD8send_cmdEh>
    1a4e:	08 95       	ret

00001a50 <_ZN12OrangutanLCD4initEv>:
    1a50:	80 91 61 01 	lds	r24, 0x0161
    1a54:	88 23       	and	r24, r24
    1a56:	29 f4       	brne	.+10     	; 0x1a62 <_ZN12OrangutanLCD4initEv+0x12>
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	80 93 61 01 	sts	0x0161, r24
    1a5e:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <_ZN12OrangutanLCD5init2Ev>
    1a62:	08 95       	ret

00001a64 <_ZN12OrangutanLCD5clearEv>:
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	0e 94 ad 0c 	call	0x195a	; 0x195a <_ZN12OrangutanLCD8send_cmdEh>
    1a6a:	80 91 59 01 	lds	r24, 0x0159
    1a6e:	90 91 5a 01 	lds	r25, 0x015A
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	11 f1       	breq	.+68     	; 0x1aba <_ZN12OrangutanLCD5clearEv+0x56>
    1a76:	a0 e0       	ldi	r26, 0x00	; 0
    1a78:	b0 e2       	ldi	r27, 0x20	; 32
    1a7a:	08 c0       	rjmp	.+16     	; 0x1a8c <_ZN12OrangutanLCD5clearEv+0x28>
    1a7c:	e0 91 59 01 	lds	r30, 0x0159
    1a80:	f0 91 5a 01 	lds	r31, 0x015A
    1a84:	e2 0f       	add	r30, r18
    1a86:	f3 1f       	adc	r31, r19
    1a88:	b0 83       	st	Z, r27
    1a8a:	af 5f       	subi	r26, 0xFF	; 255
    1a8c:	2a 2f       	mov	r18, r26
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	80 91 24 01 	lds	r24, 0x0124
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	60 91 25 01 	lds	r22, 0x0125
    1a9c:	70 e0       	ldi	r23, 0x00	; 0
    1a9e:	86 9f       	mul	r24, r22
    1aa0:	a0 01       	movw	r20, r0
    1aa2:	87 9f       	mul	r24, r23
    1aa4:	50 0d       	add	r21, r0
    1aa6:	96 9f       	mul	r25, r22
    1aa8:	50 0d       	add	r21, r0
    1aaa:	11 24       	eor	r1, r1
    1aac:	24 17       	cp	r18, r20
    1aae:	35 07       	cpc	r19, r21
    1ab0:	2c f3       	brlt	.-54     	; 0x1a7c <_ZN12OrangutanLCD5clearEv+0x18>
    1ab2:	10 92 5c 01 	sts	0x015C, r1
    1ab6:	10 92 5b 01 	sts	0x015B, r1
    1aba:	08 95       	ret

00001abc <clear>:
    1abc:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <_ZN12OrangutanLCD5clearEv>
    1ac0:	08 95       	ret

00001ac2 <_ZN12OrangutanLCD5printEPKc>:
    1ac2:	ef 92       	push	r14
    1ac4:	ff 92       	push	r15
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	e8 2e       	mov	r14, r24
    1acc:	e7 01       	movw	r28, r14
    1ace:	7e 01       	movw	r14, r28
    1ad0:	f9 2e       	mov	r15, r25
    1ad2:	e7 01       	movw	r28, r14
    1ad4:	02 c0       	rjmp	.+4      	; 0x1ada <_ZN12OrangutanLCD5printEPKc+0x18>
    1ad6:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN12OrangutanLCD9send_dataEh>
    1ada:	89 91       	ld	r24, Y+
    1adc:	88 23       	and	r24, r24
    1ade:	d9 f7       	brne	.-10     	; 0x1ad6 <_ZN12OrangutanLCD5printEPKc+0x14>
    1ae0:	df 91       	pop	r29
    1ae2:	cf 91       	pop	r28
    1ae4:	ff 90       	pop	r15
    1ae6:	ef 90       	pop	r14
    1ae8:	08 95       	ret

00001aea <print>:
    1aea:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <_ZN12OrangutanLCD5printEPKc>
    1aee:	08 95       	ret

00001af0 <_ZN12OrangutanLCD5printEm>:
    1af0:	aa e0       	ldi	r26, 0x0A	; 10
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	ee e7       	ldi	r30, 0x7E	; 126
    1af6:	fd e0       	ldi	r31, 0x0D	; 13
    1af8:	0c 94 4a 16 	jmp	0x2c94	; 0x2c94 <__prologue_saves__+0x10>
    1afc:	9b 01       	movw	r18, r22
    1afe:	ac 01       	movw	r20, r24
    1b00:	1a e0       	ldi	r17, 0x0A	; 10
    1b02:	ea e0       	ldi	r30, 0x0A	; 10
    1b04:	ce 2e       	mov	r12, r30
    1b06:	d1 2c       	mov	r13, r1
    1b08:	e1 2c       	mov	r14, r1
    1b0a:	f1 2c       	mov	r15, r1
    1b0c:	5e 01       	movw	r10, r28
    1b0e:	08 94       	sec
    1b10:	a1 1c       	adc	r10, r1
    1b12:	b1 1c       	adc	r11, r1
    1b14:	02 2f       	mov	r16, r18
    1b16:	ca 01       	movw	r24, r20
    1b18:	b9 01       	movw	r22, r18
    1b1a:	a7 01       	movw	r20, r14
    1b1c:	96 01       	movw	r18, r12
    1b1e:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__udivmodsi4>
    1b22:	11 50       	subi	r17, 0x01	; 1
    1b24:	f5 01       	movw	r30, r10
    1b26:	e1 0f       	add	r30, r17
    1b28:	f1 1d       	adc	r31, r1
    1b2a:	00 5d       	subi	r16, 0xD0	; 208
    1b2c:	92 2f       	mov	r25, r18
    1b2e:	99 0f       	add	r25, r25
    1b30:	89 2f       	mov	r24, r25
    1b32:	88 0f       	add	r24, r24
    1b34:	88 0f       	add	r24, r24
    1b36:	89 0f       	add	r24, r25
    1b38:	08 1b       	sub	r16, r24
    1b3a:	00 83       	st	Z, r16
    1b3c:	21 15       	cp	r18, r1
    1b3e:	31 05       	cpc	r19, r1
    1b40:	41 05       	cpc	r20, r1
    1b42:	51 05       	cpc	r21, r1
    1b44:	39 f7       	brne	.-50     	; 0x1b14 <_ZN12OrangutanLCD5printEm+0x24>
    1b46:	08 c0       	rjmp	.+16     	; 0x1b58 <_ZN12OrangutanLCD5printEm+0x68>
    1b48:	f6 01       	movw	r30, r12
    1b4a:	e1 0f       	add	r30, r17
    1b4c:	f1 1d       	adc	r31, r1
    1b4e:	80 81       	ld	r24, Z
    1b50:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN12OrangutanLCD9send_dataEh>
    1b54:	1f 5f       	subi	r17, 0xFF	; 255
    1b56:	04 c0       	rjmp	.+8      	; 0x1b60 <_ZN12OrangutanLCD5printEm+0x70>
    1b58:	6e 01       	movw	r12, r28
    1b5a:	08 94       	sec
    1b5c:	c1 1c       	adc	r12, r1
    1b5e:	d1 1c       	adc	r13, r1
    1b60:	1a 30       	cpi	r17, 0x0A	; 10
    1b62:	90 f3       	brcs	.-28     	; 0x1b48 <_ZN12OrangutanLCD5printEm+0x58>
    1b64:	2a 96       	adiw	r28, 0x0a	; 10
    1b66:	ea e0       	ldi	r30, 0x0A	; 10
    1b68:	0c 94 66 16 	jmp	0x2ccc	; 0x2ccc <__epilogue_restores__+0x10>

00001b6c <_ZN12OrangutanLCD5printEl>:
    1b6c:	ef 92       	push	r14
    1b6e:	ff 92       	push	r15
    1b70:	0f 93       	push	r16
    1b72:	1f 93       	push	r17
    1b74:	7b 01       	movw	r14, r22
    1b76:	8c 01       	movw	r16, r24
    1b78:	97 ff       	sbrs	r25, 7
    1b7a:	0b c0       	rjmp	.+22     	; 0x1b92 <_ZN12OrangutanLCD5printEl+0x26>
    1b7c:	10 95       	com	r17
    1b7e:	00 95       	com	r16
    1b80:	f0 94       	com	r15
    1b82:	e0 94       	com	r14
    1b84:	e1 1c       	adc	r14, r1
    1b86:	f1 1c       	adc	r15, r1
    1b88:	01 1d       	adc	r16, r1
    1b8a:	11 1d       	adc	r17, r1
    1b8c:	8d e2       	ldi	r24, 0x2D	; 45
    1b8e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN12OrangutanLCD9send_dataEh>
    1b92:	c8 01       	movw	r24, r16
    1b94:	b7 01       	movw	r22, r14
    1b96:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <_ZN12OrangutanLCD5printEm>
    1b9a:	1f 91       	pop	r17
    1b9c:	0f 91       	pop	r16
    1b9e:	ff 90       	pop	r15
    1ba0:	ef 90       	pop	r14
    1ba2:	08 95       	ret

00001ba4 <print_long>:
    1ba4:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <_ZN12OrangutanLCD5printEl>
    1ba8:	08 95       	ret

00001baa <_ZN12OrangutanLCD6gotoXYEhh>:
    1baa:	a5 e0       	ldi	r26, 0x05	; 5
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	eb ed       	ldi	r30, 0xDB	; 219
    1bb0:	fd e0       	ldi	r31, 0x0D	; 13
    1bb2:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <__prologue_saves__+0x1e>
    1bb6:	18 2f       	mov	r17, r24
    1bb8:	80 e8       	ldi	r24, 0x80	; 128
    1bba:	89 83       	std	Y+1, r24	; 0x01
    1bbc:	80 ec       	ldi	r24, 0xC0	; 192
    1bbe:	8a 83       	std	Y+2, r24	; 0x02
    1bc0:	84 e9       	ldi	r24, 0x94	; 148
    1bc2:	8b 83       	std	Y+3, r24	; 0x03
    1bc4:	84 ed       	ldi	r24, 0xD4	; 212
    1bc6:	8c 83       	std	Y+4, r24	; 0x04
    1bc8:	fe 01       	movw	r30, r28
    1bca:	e6 0f       	add	r30, r22
    1bcc:	f1 1d       	adc	r31, r1
    1bce:	81 81       	ldd	r24, Z+1	; 0x01
    1bd0:	81 0f       	add	r24, r17
    1bd2:	6d 83       	std	Y+5, r22	; 0x05
    1bd4:	0e 94 ad 0c 	call	0x195a	; 0x195a <_ZN12OrangutanLCD8send_cmdEh>
    1bd8:	10 93 5c 01 	sts	0x015C, r17
    1bdc:	6d 81       	ldd	r22, Y+5	; 0x05
    1bde:	60 93 5b 01 	sts	0x015B, r22
    1be2:	25 96       	adiw	r28, 0x05	; 5
    1be4:	e3 e0       	ldi	r30, 0x03	; 3
    1be6:	0c 94 6d 16 	jmp	0x2cda	; 0x2cda <__epilogue_restores__+0x1e>

00001bea <lcd_goto_xy>:
    1bea:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <_ZN12OrangutanLCD6gotoXYEhh>
    1bee:	08 95       	ret

00001bf0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	11 82       	std	Z+1, r1	; 0x01
    1bf4:	10 82       	st	Z, r1
    1bf6:	13 82       	std	Z+3, r1	; 0x03
    1bf8:	12 82       	std	Z+2, r1	; 0x02
    1bfa:	15 82       	std	Z+5, r1	; 0x05
    1bfc:	14 82       	std	Z+4, r1	; 0x04
    1bfe:	16 82       	std	Z+6, r1	; 0x06
    1c00:	68 30       	cpi	r22, 0x08	; 8
    1c02:	68 f4       	brcc	.+26     	; 0x1c1e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    1c04:	89 e2       	ldi	r24, 0x29	; 41
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	91 83       	std	Z+1, r25	; 0x01
    1c0a:	80 83       	st	Z, r24
    1c0c:	8b e2       	ldi	r24, 0x2B	; 43
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	93 83       	std	Z+3, r25	; 0x03
    1c12:	82 83       	std	Z+2, r24	; 0x02
    1c14:	8a e2       	ldi	r24, 0x2A	; 42
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	95 83       	std	Z+5, r25	; 0x05
    1c1a:	84 83       	std	Z+4, r24	; 0x04
    1c1c:	11 c0       	rjmp	.+34     	; 0x1c40 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x50>
    1c1e:	6e 30       	cpi	r22, 0x0E	; 14
    1c20:	c0 f4       	brcc	.+48     	; 0x1c52 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x62>
    1c22:	83 e2       	ldi	r24, 0x23	; 35
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	91 83       	std	Z+1, r25	; 0x01
    1c28:	80 83       	st	Z, r24
    1c2a:	85 e2       	ldi	r24, 0x25	; 37
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	93 83       	std	Z+3, r25	; 0x03
    1c30:	82 83       	std	Z+2, r24	; 0x02
    1c32:	84 e2       	ldi	r24, 0x24	; 36
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	95 83       	std	Z+5, r25	; 0x05
    1c38:	84 83       	std	Z+4, r24	; 0x04
    1c3a:	70 e0       	ldi	r23, 0x00	; 0
    1c3c:	68 50       	subi	r22, 0x08	; 8
    1c3e:	70 40       	sbci	r23, 0x00	; 0
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x5a>
    1c46:	88 0f       	add	r24, r24
    1c48:	99 1f       	adc	r25, r25
    1c4a:	6a 95       	dec	r22
    1c4c:	e2 f7       	brpl	.-8      	; 0x1c46 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x56>
    1c4e:	86 83       	std	Z+6, r24	; 0x06
    1c50:	08 95       	ret
    1c52:	65 31       	cpi	r22, 0x15	; 21
    1c54:	b8 f4       	brcc	.+46     	; 0x1c84 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x94>
    1c56:	86 e2       	ldi	r24, 0x26	; 38
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	91 83       	std	Z+1, r25	; 0x01
    1c5c:	80 83       	st	Z, r24
    1c5e:	88 e2       	ldi	r24, 0x28	; 40
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	93 83       	std	Z+3, r25	; 0x03
    1c64:	82 83       	std	Z+2, r24	; 0x02
    1c66:	87 e2       	ldi	r24, 0x27	; 39
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	95 83       	std	Z+5, r25	; 0x05
    1c6c:	84 83       	std	Z+4, r24	; 0x04
    1c6e:	70 e0       	ldi	r23, 0x00	; 0
    1c70:	6e 50       	subi	r22, 0x0E	; 14
    1c72:	70 40       	sbci	r23, 0x00	; 0
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x8e>
    1c7a:	88 0f       	add	r24, r24
    1c7c:	99 1f       	adc	r25, r25
    1c7e:	6a 95       	dec	r22
    1c80:	e2 f7       	brpl	.-8      	; 0x1c7a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x8a>
    1c82:	86 83       	std	Z+6, r24	; 0x06
    1c84:	08 95       	ret

00001c86 <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh>:
    1c86:	fc 01       	movw	r30, r24
    1c88:	a4 81       	ldd	r26, Z+4	; 0x04
    1c8a:	b5 81       	ldd	r27, Z+5	; 0x05
    1c8c:	86 81       	ldd	r24, Z+6	; 0x06
    1c8e:	66 23       	and	r22, r22
    1c90:	21 f0       	breq	.+8      	; 0x1c9a <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh+0x14>
    1c92:	9c 91       	ld	r25, X
    1c94:	98 2b       	or	r25, r24
    1c96:	9c 93       	st	X, r25
    1c98:	08 95       	ret
    1c9a:	9c 91       	ld	r25, X
    1c9c:	80 95       	com	r24
    1c9e:	89 23       	and	r24, r25
    1ca0:	8c 93       	st	X, r24
    1ca2:	08 95       	ret

00001ca4 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh>:
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	6f 3f       	cpi	r22, 0xFF	; 255
    1ca8:	31 f4       	brne	.+12     	; 0x1cb6 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x12>
    1caa:	a2 81       	ldd	r26, Z+2	; 0x02
    1cac:	b3 81       	ldd	r27, Z+3	; 0x03
    1cae:	8c 91       	ld	r24, X
    1cb0:	96 81       	ldd	r25, Z+6	; 0x06
    1cb2:	89 27       	eor	r24, r25
    1cb4:	0c c0       	rjmp	.+24     	; 0x1cce <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x2a>
    1cb6:	a2 81       	ldd	r26, Z+2	; 0x02
    1cb8:	b3 81       	ldd	r27, Z+3	; 0x03
    1cba:	86 81       	ldd	r24, Z+6	; 0x06
    1cbc:	66 23       	and	r22, r22
    1cbe:	21 f0       	breq	.+8      	; 0x1cc8 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x24>
    1cc0:	9c 91       	ld	r25, X
    1cc2:	98 2b       	or	r25, r24
    1cc4:	9c 93       	st	X, r25
    1cc6:	08 95       	ret
    1cc8:	9c 91       	ld	r25, X
    1cca:	80 95       	com	r24
    1ccc:	89 23       	and	r24, r25
    1cce:	8c 93       	st	X, r24
    1cd0:	08 95       	ret

00001cd2 <_ZN16OrangutanDigital9setOutputEhh>:
    1cd2:	a7 e0       	ldi	r26, 0x07	; 7
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	ef e6       	ldi	r30, 0x6F	; 111
    1cd8:	fe e0       	ldi	r31, 0x0E	; 14
    1cda:	0c 94 4f 16 	jmp	0x2c9e	; 0x2c9e <__prologue_saves__+0x1a>
    1cde:	28 2f       	mov	r18, r24
    1ce0:	f6 2e       	mov	r15, r22
    1ce2:	8e 01       	movw	r16, r28
    1ce4:	0f 5f       	subi	r16, 0xFF	; 255
    1ce6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce8:	c8 01       	movw	r24, r16
    1cea:	62 2f       	mov	r22, r18
    1cec:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1cf0:	c8 01       	movw	r24, r16
    1cf2:	6f 2d       	mov	r22, r15
    1cf4:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh>
    1cf8:	c8 01       	movw	r24, r16
    1cfa:	61 e0       	ldi	r22, 0x01	; 1
    1cfc:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh>
    1d00:	27 96       	adiw	r28, 0x07	; 7
    1d02:	e5 e0       	ldi	r30, 0x05	; 5
    1d04:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <__epilogue_restores__+0x1a>

00001d08 <_ZN15OrangutanMotors5init2Ev>:
    1d08:	e0 eb       	ldi	r30, 0xB0	; 176
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	83 ef       	ldi	r24, 0xF3	; 243
    1d0e:	80 83       	st	Z, r24
    1d10:	80 81       	ld	r24, Z
    1d12:	84 bd       	out	0x24, r24	; 36
    1d14:	e1 eb       	ldi	r30, 0xB1	; 177
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	82 e0       	ldi	r24, 0x02	; 2
    1d1a:	80 83       	st	Z, r24
    1d1c:	80 81       	ld	r24, Z
    1d1e:	85 bd       	out	0x25, r24	; 37
    1d20:	e4 eb       	ldi	r30, 0xB4	; 180
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	10 82       	st	Z, r1
    1d26:	80 81       	ld	r24, Z
    1d28:	e3 eb       	ldi	r30, 0xB3	; 179
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 83       	st	Z, r24
    1d2e:	80 81       	ld	r24, Z
    1d30:	88 bd       	out	0x28, r24	; 40
    1d32:	88 b5       	in	r24, 0x28	; 40
    1d34:	87 bd       	out	0x27, r24	; 39
    1d36:	86 e0       	ldi	r24, 0x06	; 6
    1d38:	60 e0       	ldi	r22, 0x00	; 0
    1d3a:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <_ZN16OrangutanDigital9setOutputEhh>
    1d3e:	85 e0       	ldi	r24, 0x05	; 5
    1d40:	60 e0       	ldi	r22, 0x00	; 0
    1d42:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <_ZN16OrangutanDigital9setOutputEhh>
    1d46:	8b e0       	ldi	r24, 0x0B	; 11
    1d48:	60 e0       	ldi	r22, 0x00	; 0
    1d4a:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <_ZN16OrangutanDigital9setOutputEhh>
    1d4e:	83 e0       	ldi	r24, 0x03	; 3
    1d50:	60 e0       	ldi	r22, 0x00	; 0
    1d52:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <_ZN16OrangutanDigital9setOutputEhh>
    1d56:	08 95       	ret

00001d58 <_ZN15OrangutanMotors4initEv>:
    1d58:	80 91 62 01 	lds	r24, 0x0162
    1d5c:	88 23       	and	r24, r24
    1d5e:	29 f4       	brne	.+10     	; 0x1d6a <_ZN15OrangutanMotors4initEv+0x12>
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	80 93 62 01 	sts	0x0162, r24
    1d66:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <_ZN15OrangutanMotors5init2Ev>
    1d6a:	08 95       	ret

00001d6c <_ZN15OrangutanMotors10setM1SpeedEi>:
    1d6c:	cf 93       	push	r28
    1d6e:	df 93       	push	r29
    1d70:	ec 01       	movw	r28, r24
    1d72:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <_ZN15OrangutanMotors4initEv>
    1d76:	d7 ff       	sbrs	r29, 7
    1d78:	05 c0       	rjmp	.+10     	; 0x1d84 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    1d7a:	d0 95       	com	r29
    1d7c:	c1 95       	neg	r28
    1d7e:	df 4f       	sbci	r29, 0xFF	; 255
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	01 c0       	rjmp	.+2      	; 0x1d86 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	cf 3f       	cpi	r28, 0xFF	; 255
    1d88:	d1 05       	cpc	r29, r1
    1d8a:	19 f0       	breq	.+6      	; 0x1d92 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1d8c:	14 f0       	brlt	.+4      	; 0x1d92 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1d8e:	cf ef       	ldi	r28, 0xFF	; 255
    1d90:	d0 e0       	ldi	r29, 0x00	; 0
    1d92:	88 23       	and	r24, r24
    1d94:	19 f0       	breq	.+6      	; 0x1d9c <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    1d96:	18 bc       	out	0x28, r1	; 40
    1d98:	c7 bd       	out	0x27, r28	; 39
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    1d9c:	c8 bd       	out	0x28, r28	; 40
    1d9e:	17 bc       	out	0x27, r1	; 39
    1da0:	df 91       	pop	r29
    1da2:	cf 91       	pop	r28
    1da4:	08 95       	ret

00001da6 <_ZN15OrangutanMotors10setM2SpeedEi>:
    1da6:	cf 93       	push	r28
    1da8:	df 93       	push	r29
    1daa:	ec 01       	movw	r28, r24
    1dac:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <_ZN15OrangutanMotors4initEv>
    1db0:	d7 ff       	sbrs	r29, 7
    1db2:	05 c0       	rjmp	.+10     	; 0x1dbe <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    1db4:	d0 95       	com	r29
    1db6:	c1 95       	neg	r28
    1db8:	df 4f       	sbci	r29, 0xFF	; 255
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	01 c0       	rjmp	.+2      	; 0x1dc0 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	cf 3f       	cpi	r28, 0xFF	; 255
    1dc2:	d1 05       	cpc	r29, r1
    1dc4:	19 f0       	breq	.+6      	; 0x1dcc <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1dc6:	14 f0       	brlt	.+4      	; 0x1dcc <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1dc8:	cf ef       	ldi	r28, 0xFF	; 255
    1dca:	d0 e0       	ldi	r29, 0x00	; 0
    1dcc:	88 23       	and	r24, r24
    1dce:	29 f0       	breq	.+10     	; 0x1dda <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    1dd0:	10 92 b4 00 	sts	0x00B4, r1
    1dd4:	c0 93 b3 00 	sts	0x00B3, r28
    1dd8:	04 c0       	rjmp	.+8      	; 0x1de2 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    1dda:	c0 93 b4 00 	sts	0x00B4, r28
    1dde:	10 92 b3 00 	sts	0x00B3, r1
    1de2:	df 91       	pop	r29
    1de4:	cf 91       	pop	r28
    1de6:	08 95       	ret

00001de8 <_ZN15OrangutanMotors9setSpeedsEii>:
    1de8:	cf 93       	push	r28
    1dea:	df 93       	push	r29
    1dec:	eb 01       	movw	r28, r22
    1dee:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <_ZN15OrangutanMotors10setM1SpeedEi>
    1df2:	ce 01       	movw	r24, r28
    1df4:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <_ZN15OrangutanMotors10setM2SpeedEi>
    1df8:	df 91       	pop	r29
    1dfa:	cf 91       	pop	r28
    1dfc:	08 95       	ret

00001dfe <set_motors>:
    1dfe:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <_ZN15OrangutanMotors9setSpeedsEii>
    1e02:	08 95       	ret

00001e04 <_ZN20OrangutanPushbuttons5init2Ev>:
    1e04:	84 b1       	in	r24, 0x04	; 4
    1e06:	8d 7c       	andi	r24, 0xCD	; 205
    1e08:	84 b9       	out	0x04, r24	; 4
    1e0a:	85 b1       	in	r24, 0x05	; 5
    1e0c:	82 63       	ori	r24, 0x32	; 50
    1e0e:	85 b9       	out	0x05, r24	; 5
    1e10:	85 e0       	ldi	r24, 0x05	; 5
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	6f 93       	push	r22
    1e16:	64 e0       	ldi	r22, 0x04	; 4
    1e18:	6a 95       	dec	r22
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    1e1c:	6f 91       	pop	r22
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	c9 f7       	brne	.-14     	; 0x1e14 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    1e22:	08 95       	ret

00001e24 <_ZN20OrangutanPushbuttons4initEv>:
    1e24:	80 91 63 01 	lds	r24, 0x0163
    1e28:	88 23       	and	r24, r24
    1e2a:	29 f4       	brne	.+10     	; 0x1e36 <_ZN20OrangutanPushbuttons4initEv+0x12>
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	80 93 63 01 	sts	0x0163, r24
    1e32:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN20OrangutanPushbuttons5init2Ev>
    1e36:	08 95       	ret

00001e38 <_ZN20OrangutanPushbuttons12waitForPressEh>:
    1e38:	1f 93       	push	r17
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
    1e3e:	18 2f       	mov	r17, r24
    1e40:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <_ZN20OrangutanPushbuttons4initEv>
    1e44:	c1 2f       	mov	r28, r17
    1e46:	d0 e0       	ldi	r29, 0x00	; 0
    1e48:	23 b1       	in	r18, 0x03	; 3
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	20 95       	com	r18
    1e4e:	30 95       	com	r19
    1e50:	2c 23       	and	r18, r28
    1e52:	3d 23       	and	r19, r29
    1e54:	21 15       	cp	r18, r1
    1e56:	31 05       	cpc	r19, r1
    1e58:	b9 f3       	breq	.-18     	; 0x1e48 <_ZN20OrangutanPushbuttons12waitForPressEh+0x10>
    1e5a:	8a e0       	ldi	r24, 0x0A	; 10
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <delay_ms>
    1e62:	23 b1       	in	r18, 0x03	; 3
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	20 95       	com	r18
    1e68:	30 95       	com	r19
    1e6a:	2c 23       	and	r18, r28
    1e6c:	3d 23       	and	r19, r29
    1e6e:	21 15       	cp	r18, r1
    1e70:	31 05       	cpc	r19, r1
    1e72:	51 f3       	breq	.-44     	; 0x1e48 <_ZN20OrangutanPushbuttons12waitForPressEh+0x10>
    1e74:	83 b1       	in	r24, 0x03	; 3
    1e76:	80 95       	com	r24
    1e78:	81 23       	and	r24, r17
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	1f 91       	pop	r17
    1e80:	08 95       	ret

00001e82 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    1e82:	1f 93       	push	r17
    1e84:	18 2f       	mov	r17, r24
    1e86:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <_ZN20OrangutanPushbuttons4initEv>
    1e8a:	83 b1       	in	r24, 0x03	; 3
    1e8c:	81 23       	and	r24, r17
    1e8e:	e9 f3       	breq	.-6      	; 0x1e8a <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1e90:	8a e0       	ldi	r24, 0x0A	; 10
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <delay_ms>
    1e98:	83 b1       	in	r24, 0x03	; 3
    1e9a:	81 23       	and	r24, r17
    1e9c:	b1 f3       	breq	.-20     	; 0x1e8a <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1e9e:	83 b1       	in	r24, 0x03	; 3
    1ea0:	81 23       	and	r24, r17
    1ea2:	1f 91       	pop	r17
    1ea4:	08 95       	ret

00001ea6 <_ZN20OrangutanPushbuttons13waitForButtonEh>:
    1ea6:	1f 93       	push	r17
    1ea8:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN20OrangutanPushbuttons12waitForPressEh>
    1eac:	18 2f       	mov	r17, r24
    1eae:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    1eb2:	81 2f       	mov	r24, r17
    1eb4:	1f 91       	pop	r17
    1eb6:	08 95       	ret

00001eb8 <wait_for_button>:
    1eb8:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <_ZN20OrangutanPushbuttons13waitForButtonEh>
    1ebc:	08 95       	ret

00001ebe <_ZN20OrangutanPushbuttons9isPressedEh>:
    1ebe:	a1 e0       	ldi	r26, 0x01	; 1
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e5 e6       	ldi	r30, 0x65	; 101
    1ec4:	ff e0       	ldi	r31, 0x0F	; 15
    1ec6:	0c 94 52 16 	jmp	0x2ca4	; 0x2ca4 <__prologue_saves__+0x20>
    1eca:	89 83       	std	Y+1, r24	; 0x01
    1ecc:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <_ZN20OrangutanPushbuttons4initEv>
    1ed0:	93 b1       	in	r25, 0x03	; 3
    1ed2:	90 95       	com	r25
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	89 23       	and	r24, r25
    1ed8:	21 96       	adiw	r28, 0x01	; 1
    1eda:	e2 e0       	ldi	r30, 0x02	; 2
    1edc:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__epilogue_restores__+0x20>

00001ee0 <button_is_pressed>:
    1ee0:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <_ZN20OrangutanPushbuttons9isPressedEh>
    1ee4:	08 95       	ret

00001ee6 <_ZN18OrangutanResources10getFreeRAMEv>:
    1ee6:	a2 e0       	ldi	r26, 0x02	; 2
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e9 e7       	ldi	r30, 0x79	; 121
    1eec:	ff e0       	ldi	r31, 0x0F	; 15
    1eee:	0c 94 52 16 	jmp	0x2ca4	; 0x2ca4 <__prologue_saves__+0x20>
    1ef2:	80 91 d2 01 	lds	r24, 0x01D2
    1ef6:	90 91 d3 01 	lds	r25, 0x01D3
    1efa:	9e 01       	movw	r18, r28
    1efc:	2f 5f       	subi	r18, 0xFF	; 255
    1efe:	3f 4f       	sbci	r19, 0xFF	; 255
    1f00:	00 97       	sbiw	r24, 0x00	; 0
    1f02:	19 f4       	brne	.+6      	; 0x1f0a <_ZN18OrangutanResources10getFreeRAMEv+0x24>
    1f04:	26 5d       	subi	r18, 0xD6	; 214
    1f06:	31 40       	sbci	r19, 0x01	; 1
    1f08:	02 c0       	rjmp	.+4      	; 0x1f0e <_ZN18OrangutanResources10getFreeRAMEv+0x28>
    1f0a:	28 1b       	sub	r18, r24
    1f0c:	39 0b       	sbc	r19, r25
    1f0e:	3a 83       	std	Y+2, r19	; 0x02
    1f10:	29 83       	std	Y+1, r18	; 0x01
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	9a 81       	ldd	r25, Y+2	; 0x02
    1f16:	22 96       	adiw	r28, 0x02	; 2
    1f18:	e2 e0       	ldi	r30, 0x02	; 2
    1f1a:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__epilogue_restores__+0x20>

00001f1e <get_free_ram>:
    1f1e:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <_ZN18OrangutanResources10getFreeRAMEv>
    1f22:	08 95       	ret

00001f24 <_ZN13OrangutanTime17delayMicrosecondsEj>:
    1f24:	6f 93       	push	r22
    1f26:	64 e0       	ldi	r22, 0x04	; 4
    1f28:	6a 95       	dec	r22
    1f2a:	f1 f7       	brne	.-4      	; 0x1f28 <_ZN13OrangutanTime17delayMicrosecondsEj+0x4>
    1f2c:	6f 91       	pop	r22
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	c9 f7       	brne	.-14     	; 0x1f24 <_ZN13OrangutanTime17delayMicrosecondsEj>
    1f32:	08 95       	ret

00001f34 <__vector_9>:
    1f34:	2f 92       	push	r2
    1f36:	8f 93       	push	r24
    1f38:	9f 93       	push	r25
    1f3a:	2f b6       	in	r2, 0x3f	; 63
    1f3c:	80 91 71 01 	lds	r24, 0x0171
    1f40:	90 91 72 01 	lds	r25, 0x0172
    1f44:	01 96       	adiw	r24, 0x01	; 1
    1f46:	80 93 71 01 	sts	0x0171, r24
    1f4a:	90 93 72 01 	sts	0x0172, r25
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	80 91 73 01 	lds	r24, 0x0173
    1f54:	89 1f       	adc	r24, r25
    1f56:	80 93 73 01 	sts	0x0173, r24
    1f5a:	90 91 79 01 	lds	r25, 0x0179
    1f5e:	9c 5f       	subi	r25, 0xFC	; 252
    1f60:	90 93 79 01 	sts	0x0179, r25
    1f64:	80 91 78 01 	lds	r24, 0x0178
    1f68:	80 51       	subi	r24, 0x10	; 16
    1f6a:	97 42       	sbci	r25, 0x27	; 39
    1f6c:	c0 f0       	brcs	.+48     	; 0x1f9e <end>
    1f6e:	90 93 79 01 	sts	0x0179, r25
    1f72:	80 93 78 01 	sts	0x0178, r24
    1f76:	80 91 74 01 	lds	r24, 0x0174
    1f7a:	90 91 75 01 	lds	r25, 0x0175
    1f7e:	01 96       	adiw	r24, 0x01	; 1
    1f80:	80 93 74 01 	sts	0x0174, r24
    1f84:	90 93 75 01 	sts	0x0175, r25
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	80 91 76 01 	lds	r24, 0x0176
    1f8e:	89 1f       	adc	r24, r25
    1f90:	80 93 76 01 	sts	0x0176, r24
    1f94:	80 91 77 01 	lds	r24, 0x0177
    1f98:	89 1f       	adc	r24, r25
    1f9a:	80 93 77 01 	sts	0x0177, r24

00001f9e <end>:
    1f9e:	2f be       	out	0x3f, r2	; 63
    1fa0:	9f 91       	pop	r25
    1fa2:	8f 91       	pop	r24
    1fa4:	2f 90       	pop	r2
    1fa6:	18 95       	reti

00001fa8 <_ZN13OrangutanTime17delayMillisecondsEj>:
    1fa8:	cf 93       	push	r28
    1faa:	df 93       	push	r29
    1fac:	ec 01       	movw	r28, r24
    1fae:	05 c0       	rjmp	.+10     	; 0x1fba <_ZN13OrangutanTime17delayMillisecondsEj+0x12>
    1fb0:	88 ee       	ldi	r24, 0xE8	; 232
    1fb2:	93 e0       	ldi	r25, 0x03	; 3
    1fb4:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <_ZN13OrangutanTime17delayMicrosecondsEj>
    1fb8:	21 97       	sbiw	r28, 0x01	; 1
    1fba:	20 97       	sbiw	r28, 0x00	; 0
    1fbc:	c9 f7       	brne	.-14     	; 0x1fb0 <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    1fbe:	df 91       	pop	r29
    1fc0:	cf 91       	pop	r28
    1fc2:	08 95       	ret

00001fc4 <delay_ms>:
    1fc4:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <_ZN13OrangutanTime17delayMillisecondsEj>
    1fc8:	08 95       	ret

00001fca <_ZN13OrangutanTime5init2Ev>:
    1fca:	e0 e7       	ldi	r30, 0x70	; 112
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	8e 7f       	andi	r24, 0xFE	; 254
    1fd2:	80 83       	st	Z, r24
    1fd4:	a0 eb       	ldi	r26, 0xB0	; 176
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	8c 91       	ld	r24, X
    1fda:	83 60       	ori	r24, 0x03	; 3
    1fdc:	8c 93       	st	X, r24
    1fde:	a1 eb       	ldi	r26, 0xB1	; 177
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	8c 91       	ld	r24, X
    1fe4:	80 7f       	andi	r24, 0xF0	; 240
    1fe6:	8c 93       	st	X, r24
    1fe8:	8c 91       	ld	r24, X
    1fea:	82 60       	ori	r24, 0x02	; 2
    1fec:	8c 93       	st	X, r24
    1fee:	b8 9a       	sbi	0x17, 0	; 23
    1ff0:	80 81       	ld	r24, Z
    1ff2:	81 60       	ori	r24, 0x01	; 1
    1ff4:	80 83       	st	Z, r24
    1ff6:	78 94       	sei
    1ff8:	08 95       	ret

00001ffa <_ZN13OrangutanTime4initEv>:
    1ffa:	80 91 7a 01 	lds	r24, 0x017A
    1ffe:	88 23       	and	r24, r24
    2000:	29 f4       	brne	.+10     	; 0x200c <_ZN13OrangutanTime4initEv+0x12>
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	80 93 7a 01 	sts	0x017A, r24
    2008:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN13OrangutanTime5init2Ev>
    200c:	08 95       	ret

0000200e <_ZN13OrangutanTime2msEv>:
    200e:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <_ZN13OrangutanTime4initEv>
    2012:	e0 e7       	ldi	r30, 0x70	; 112
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	8e 7f       	andi	r24, 0xFE	; 254
    201a:	80 83       	st	Z, r24
    201c:	20 91 74 01 	lds	r18, 0x0174
    2020:	30 91 75 01 	lds	r19, 0x0175
    2024:	40 91 76 01 	lds	r20, 0x0176
    2028:	50 91 77 01 	lds	r21, 0x0177
    202c:	80 81       	ld	r24, Z
    202e:	81 60       	ori	r24, 0x01	; 1
    2030:	80 83       	st	Z, r24
    2032:	b9 01       	movw	r22, r18
    2034:	ca 01       	movw	r24, r20
    2036:	08 95       	ret

00002038 <get_ms>:
    2038:	0e 94 07 10 	call	0x200e	; 0x200e <_ZN13OrangutanTime2msEv>
    203c:	08 95       	ret

0000203e <_ZN13OrangutanTime5resetEv>:
    203e:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <_ZN13OrangutanTime4initEv>
    2042:	e0 e7       	ldi	r30, 0x70	; 112
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	8e 7f       	andi	r24, 0xFE	; 254
    204a:	80 83       	st	Z, r24
    204c:	10 92 74 01 	sts	0x0174, r1
    2050:	10 92 75 01 	sts	0x0175, r1
    2054:	10 92 76 01 	sts	0x0176, r1
    2058:	10 92 77 01 	sts	0x0177, r1
    205c:	10 92 79 01 	sts	0x0179, r1
    2060:	10 92 78 01 	sts	0x0178, r1
    2064:	80 81       	ld	r24, Z
    2066:	81 60       	ori	r24, 0x01	; 1
    2068:	80 83       	st	Z, r24
    206a:	08 95       	ret

0000206c <calibrate_line_sensors>:
    206c:	68 2f       	mov	r22, r24
    206e:	8b e7       	ldi	r24, 0x7B	; 123
    2070:	91 e0       	ldi	r25, 0x01	; 1
    2072:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <_ZN16PololuQTRSensors9calibrateEh>
    2076:	08 95       	ret

00002078 <read_line>:
    2078:	9c 01       	movw	r18, r24
    207a:	46 2f       	mov	r20, r22
    207c:	8b e7       	ldi	r24, 0x7B	; 123
    207e:	91 e0       	ldi	r25, 0x01	; 1
    2080:	b9 01       	movw	r22, r18
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	0e 94 ce 13 	call	0x279c	; 0x279c <_ZN16PololuQTRSensors8readLineEPjhh>
    2088:	08 95       	ret

0000208a <get_line_sensors_calibrated_minimum_on>:
    208a:	80 91 7b 01 	lds	r24, 0x017B
    208e:	90 91 7c 01 	lds	r25, 0x017C
    2092:	08 95       	ret

00002094 <get_line_sensors_calibrated_maximum_on>:
    2094:	80 91 7d 01 	lds	r24, 0x017D
    2098:	90 91 7e 01 	lds	r25, 0x017E
    209c:	08 95       	ret

0000209e <_ZN9Pololu3pi4initEjh>:
    209e:	0f 93       	push	r16
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	00 d0       	rcall	.+0      	; 0x20a6 <_ZN9Pololu3pi4initEjh+0x8>
    20a6:	00 d0       	rcall	.+0      	; 0x20a8 <_ZN9Pololu3pi4initEjh+0xa>
    20a8:	0f 92       	push	r0
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	9c 01       	movw	r18, r24
    20b0:	96 2f       	mov	r25, r22
    20b2:	de 01       	movw	r26, r28
    20b4:	11 96       	adiw	r26, 0x01	; 1
    20b6:	e6 e2       	ldi	r30, 0x26	; 38
    20b8:	f1 e0       	ldi	r31, 0x01	; 1
    20ba:	85 e0       	ldi	r24, 0x05	; 5
    20bc:	01 90       	ld	r0, Z+
    20be:	0d 92       	st	X+, r0
    20c0:	81 50       	subi	r24, 0x01	; 1
    20c2:	e1 f7       	brne	.-8      	; 0x20bc <_ZN9Pololu3pi4initEjh+0x1e>
    20c4:	be 01       	movw	r22, r28
    20c6:	6f 5f       	subi	r22, 0xFF	; 255
    20c8:	7f 4f       	sbci	r23, 0xFF	; 255
    20ca:	99 23       	and	r25, r25
    20cc:	29 f0       	breq	.+10     	; 0x20d8 <_ZN9Pololu3pi4initEjh+0x3a>
    20ce:	8b e7       	ldi	r24, 0x7B	; 123
    20d0:	91 e0       	ldi	r25, 0x01	; 1
    20d2:	45 e0       	ldi	r20, 0x05	; 5
    20d4:	0f ef       	ldi	r16, 0xFF	; 255
    20d6:	04 c0       	rjmp	.+8      	; 0x20e0 <_ZN9Pololu3pi4initEjh+0x42>
    20d8:	8b e7       	ldi	r24, 0x7B	; 123
    20da:	91 e0       	ldi	r25, 0x01	; 1
    20dc:	45 e0       	ldi	r20, 0x05	; 5
    20de:	03 e1       	ldi	r16, 0x13	; 19
    20e0:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    20e4:	8b e7       	ldi	r24, 0x7B	; 123
    20e6:	91 e0       	ldi	r25, 0x01	; 1
    20e8:	0e 94 c0 10 	call	0x2180	; 0x2180 <_ZN16PololuQTRSensors11emittersOffEv>
    20ec:	0e 94 1f 10 	call	0x203e	; 0x203e <_ZN13OrangutanTime5resetEv>
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	0f 91       	pop	r16
    2100:	08 95       	ret

00002102 <pololu_3pi_init>:
    2102:	60 e0       	ldi	r22, 0x00	; 0
    2104:	0e 94 4f 10 	call	0x209e	; 0x209e <_ZN9Pololu3pi4initEjh>
    2108:	08 95       	ret

0000210a <_GLOBAL__I_pololu_3pi_init>:
    210a:	08 95       	ret

0000210c <_GLOBAL__D_pololu_3pi_init>:
    210c:	8b e7       	ldi	r24, 0x7B	; 123
    210e:	91 e0       	ldi	r25, 0x01	; 1
    2110:	0e 94 94 15 	call	0x2b28	; 0x2b28 <_ZN16PololuQTRSensorsD1Ev>
    2114:	08 95       	ret

00002116 <delayMicroseconds>:
    2116:	6f 93       	push	r22
    2118:	64 e0       	ldi	r22, 0x04	; 4
    211a:	6a 95       	dec	r22
    211c:	f1 f7       	brne	.-4      	; 0x211a <delayMicroseconds+0x4>
    211e:	6f 91       	pop	r22
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	c9 f7       	brne	.-14     	; 0x2116 <delayMicroseconds>
    2124:	08 95       	ret

00002126 <_ZN16PololuQTRSensors4initEhhh>:
    2126:	a7 e0       	ldi	r26, 0x07	; 7
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	e9 e9       	ldi	r30, 0x99	; 153
    212c:	f0 e1       	ldi	r31, 0x10	; 16
    212e:	0c 94 50 16 	jmp	0x2ca0	; 0x2ca0 <__prologue_saves__+0x1c>
    2132:	8c 01       	movw	r16, r24
    2134:	fc 01       	movw	r30, r24
    2136:	11 82       	std	Z+1, r1	; 0x01
    2138:	10 82       	st	Z, r1
    213a:	13 82       	std	Z+3, r1	; 0x03
    213c:	12 82       	std	Z+2, r1	; 0x02
    213e:	15 82       	std	Z+5, r1	; 0x05
    2140:	14 82       	std	Z+4, r1	; 0x04
    2142:	17 82       	std	Z+7, r1	; 0x07
    2144:	16 82       	std	Z+6, r1	; 0x06
    2146:	61 31       	cpi	r22, 0x11	; 17
    2148:	18 f0       	brcs	.+6      	; 0x2150 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    214a:	80 e1       	ldi	r24, 0x10	; 16
    214c:	80 87       	std	Z+8, r24	; 0x08
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    2150:	fc 01       	movw	r30, r24
    2152:	60 87       	std	Z+8, r22	; 0x08
    2154:	f8 01       	movw	r30, r16
    2156:	20 8b       	std	Z+16, r18	; 0x10
    2158:	ce 01       	movw	r24, r28
    215a:	01 96       	adiw	r24, 0x01	; 1
    215c:	64 2f       	mov	r22, r20
    215e:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2162:	8f 81       	ldd	r24, Y+7	; 0x07
    2164:	f8 01       	movw	r30, r16
    2166:	81 87       	std	Z+9, r24	; 0x09
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	9c 81       	ldd	r25, Y+4	; 0x04
    216c:	93 87       	std	Z+11, r25	; 0x0b
    216e:	82 87       	std	Z+10, r24	; 0x0a
    2170:	8d 81       	ldd	r24, Y+5	; 0x05
    2172:	9e 81       	ldd	r25, Y+6	; 0x06
    2174:	95 87       	std	Z+13, r25	; 0x0d
    2176:	84 87       	std	Z+12, r24	; 0x0c
    2178:	27 96       	adiw	r28, 0x07	; 7
    217a:	e4 e0       	ldi	r30, 0x04	; 4
    217c:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__epilogue_restores__+0x1c>

00002180 <_ZN16PololuQTRSensors11emittersOffEv>:
    2180:	fc 01       	movw	r30, r24
    2182:	a4 85       	ldd	r26, Z+12	; 0x0c
    2184:	b5 85       	ldd	r27, Z+13	; 0x0d
    2186:	10 97       	sbiw	r26, 0x00	; 0
    2188:	79 f0       	breq	.+30     	; 0x21a8 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    218a:	8c 91       	ld	r24, X
    218c:	91 85       	ldd	r25, Z+9	; 0x09
    218e:	89 2b       	or	r24, r25
    2190:	8c 93       	st	X, r24
    2192:	a2 85       	ldd	r26, Z+10	; 0x0a
    2194:	b3 85       	ldd	r27, Z+11	; 0x0b
    2196:	9c 91       	ld	r25, X
    2198:	81 85       	ldd	r24, Z+9	; 0x09
    219a:	80 95       	com	r24
    219c:	89 23       	and	r24, r25
    219e:	8c 93       	st	X, r24
    21a0:	88 ec       	ldi	r24, 0xC8	; 200
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	0e 94 8b 10 	call	0x2116	; 0x2116 <delayMicroseconds>
    21a8:	08 95       	ret

000021aa <_ZN16PololuQTRSensors10emittersOnEv>:
    21aa:	fc 01       	movw	r30, r24
    21ac:	a4 85       	ldd	r26, Z+12	; 0x0c
    21ae:	b5 85       	ldd	r27, Z+13	; 0x0d
    21b0:	10 97       	sbiw	r26, 0x00	; 0
    21b2:	71 f0       	breq	.+28     	; 0x21d0 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    21b4:	8c 91       	ld	r24, X
    21b6:	91 85       	ldd	r25, Z+9	; 0x09
    21b8:	89 2b       	or	r24, r25
    21ba:	8c 93       	st	X, r24
    21bc:	a2 85       	ldd	r26, Z+10	; 0x0a
    21be:	b3 85       	ldd	r27, Z+11	; 0x0b
    21c0:	8c 91       	ld	r24, X
    21c2:	91 85       	ldd	r25, Z+9	; 0x09
    21c4:	89 2b       	or	r24, r25
    21c6:	8c 93       	st	X, r24
    21c8:	88 ec       	ldi	r24, 0xC8	; 200
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	0e 94 8b 10 	call	0x2116	; 0x2116 <delayMicroseconds>
    21d0:	08 95       	ret

000021d2 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    21d2:	a7 e0       	ldi	r26, 0x07	; 7
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	ef ee       	ldi	r30, 0xEF	; 239
    21d8:	f0 e1       	ldi	r31, 0x10	; 16
    21da:	0c 94 42 16 	jmp	0x2c84	; 0x2c84 <__prologue_saves__>
    21de:	7c 01       	movw	r14, r24
    21e0:	1b 01       	movw	r2, r22
    21e2:	64 2f       	mov	r22, r20
    21e4:	39 01       	movw	r6, r18
    21e6:	40 2f       	mov	r20, r16
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	0e 94 93 10 	call	0x2126	; 0x2126 <_ZN16PololuQTRSensors4initEhhh>
    21ee:	97 01       	movw	r18, r14
    21f0:	2f 5b       	subi	r18, 0xBF	; 191
    21f2:	3f 4f       	sbci	r19, 0xFF	; 255
    21f4:	f9 01       	movw	r30, r18
    21f6:	10 82       	st	Z, r1
    21f8:	d7 01       	movw	r26, r14
    21fa:	ae 5b       	subi	r26, 0xBE	; 190
    21fc:	bf 4f       	sbci	r27, 0xFF	; 255
    21fe:	1c 92       	st	X, r1
    2200:	c7 01       	movw	r24, r14
    2202:	8d 5b       	subi	r24, 0xBD	; 189
    2204:	9f 4f       	sbci	r25, 0xFF	; 255
    2206:	fc 01       	movw	r30, r24
    2208:	10 82       	st	Z, r1
    220a:	f7 01       	movw	r30, r14
    220c:	77 86       	std	Z+15, r7	; 0x0f
    220e:	66 86       	std	Z+14, r6	; 0x0e
    2210:	66 24       	eor	r6, r6
    2212:	2e 01       	movw	r4, r28
    2214:	08 94       	sec
    2216:	41 1c       	adc	r4, r1
    2218:	51 1c       	adc	r5, r1
    221a:	6c 01       	movw	r12, r24
    221c:	5d 01       	movw	r10, r26
    221e:	49 01       	movw	r8, r18
    2220:	29 c0       	rjmp	.+82     	; 0x2274 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    2222:	06 2d       	mov	r16, r6
    2224:	10 e0       	ldi	r17, 0x00	; 0
    2226:	f1 01       	movw	r30, r2
    2228:	e0 0f       	add	r30, r16
    222a:	f1 1f       	adc	r31, r17
    222c:	c2 01       	movw	r24, r4
    222e:	60 81       	ld	r22, Z
    2230:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2234:	2f 81       	ldd	r18, Y+7	; 0x07
    2236:	f7 01       	movw	r30, r14
    2238:	e0 0f       	add	r30, r16
    223a:	f1 1f       	adc	r31, r17
    223c:	21 8b       	std	Z+17, r18	; 0x11
    223e:	89 81       	ldd	r24, Y+1	; 0x01
    2240:	9a 81       	ldd	r25, Y+2	; 0x02
    2242:	f8 01       	movw	r30, r16
    2244:	ee 0f       	add	r30, r30
    2246:	ff 1f       	adc	r31, r31
    2248:	ee 0d       	add	r30, r14
    224a:	ff 1d       	adc	r31, r15
    224c:	92 a3       	std	Z+34, r25	; 0x22
    224e:	81 a3       	std	Z+33, r24	; 0x21
    2250:	83 32       	cpi	r24, 0x23	; 35
    2252:	91 05       	cpc	r25, r1
    2254:	11 f4       	brne	.+4      	; 0x225a <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    2256:	f4 01       	movw	r30, r8
    2258:	09 c0       	rjmp	.+18     	; 0x226c <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9a>
    225a:	86 32       	cpi	r24, 0x26	; 38
    225c:	91 05       	cpc	r25, r1
    225e:	11 f4       	brne	.+4      	; 0x2264 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    2260:	f5 01       	movw	r30, r10
    2262:	04 c0       	rjmp	.+8      	; 0x226c <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9a>
    2264:	89 32       	cpi	r24, 0x29	; 41
    2266:	91 05       	cpc	r25, r1
    2268:	21 f4       	brne	.+8      	; 0x2272 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa0>
    226a:	f6 01       	movw	r30, r12
    226c:	80 81       	ld	r24, Z
    226e:	82 2b       	or	r24, r18
    2270:	80 83       	st	Z, r24
    2272:	63 94       	inc	r6
    2274:	f7 01       	movw	r30, r14
    2276:	80 85       	ldd	r24, Z+8	; 0x08
    2278:	68 16       	cp	r6, r24
    227a:	98 f2       	brcs	.-90     	; 0x2222 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x50>
    227c:	27 96       	adiw	r28, 0x07	; 7
    227e:	e2 e1       	ldi	r30, 0x12	; 18
    2280:	0c 94 5e 16 	jmp	0x2cbc	; 0x2cbc <__epilogue_restores__>

00002284 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    2284:	a0 e0       	ldi	r26, 0x00	; 0
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e8 e4       	ldi	r30, 0x48	; 72
    228a:	f1 e1       	ldi	r31, 0x11	; 17
    228c:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__prologue_saves__+0xa>
    2290:	ec 01       	movw	r28, r24
    2292:	5b 01       	movw	r10, r22
    2294:	fc 01       	movw	r30, r24
    2296:	ef 5b       	subi	r30, 0xBF	; 191
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	90 80       	ld	r9, Z
    229c:	fc 01       	movw	r30, r24
    229e:	ee 5b       	subi	r30, 0xBE	; 190
    22a0:	ff 4f       	sbci	r31, 0xFF	; 255
    22a2:	80 80       	ld	r8, Z
    22a4:	fc 01       	movw	r30, r24
    22a6:	ed 5b       	subi	r30, 0xBD	; 189
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	70 80       	ld	r7, Z
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	09 c0       	rjmp	.+18     	; 0x22c2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x3e>
    22b0:	e8 2f       	mov	r30, r24
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	ee 0f       	add	r30, r30
    22b6:	ff 1f       	adc	r31, r31
    22b8:	ea 0d       	add	r30, r10
    22ba:	fb 1d       	adc	r31, r11
    22bc:	11 82       	std	Z+1, r1	; 0x01
    22be:	10 82       	st	Z, r1
    22c0:	8f 5f       	subi	r24, 0xFF	; 255
    22c2:	98 85       	ldd	r25, Y+8	; 0x08
    22c4:	89 17       	cp	r24, r25
    22c6:	a0 f3       	brcs	.-24     	; 0x22b0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x2c>
    22c8:	84 b1       	in	r24, 0x04	; 4
    22ca:	21 e4       	ldi	r18, 0x41	; 65
    22cc:	e2 2e       	mov	r14, r18
    22ce:	f1 2c       	mov	r15, r1
    22d0:	ec 0e       	add	r14, r28
    22d2:	fd 1e       	adc	r15, r29
    22d4:	d7 01       	movw	r26, r14
    22d6:	9c 91       	ld	r25, X
    22d8:	89 2b       	or	r24, r25
    22da:	84 b9       	out	0x04, r24	; 4
    22dc:	87 b1       	in	r24, 0x07	; 7
    22de:	8e 01       	movw	r16, r28
    22e0:	0e 5b       	subi	r16, 0xBE	; 190
    22e2:	1f 4f       	sbci	r17, 0xFF	; 255
    22e4:	f8 01       	movw	r30, r16
    22e6:	90 81       	ld	r25, Z
    22e8:	89 2b       	or	r24, r25
    22ea:	87 b9       	out	0x07, r24	; 7
    22ec:	8a b1       	in	r24, 0x0a	; 10
    22ee:	93 e4       	ldi	r25, 0x43	; 67
    22f0:	c9 2e       	mov	r12, r25
    22f2:	d1 2c       	mov	r13, r1
    22f4:	cc 0e       	add	r12, r28
    22f6:	dd 1e       	adc	r13, r29
    22f8:	d6 01       	movw	r26, r12
    22fa:	9c 91       	ld	r25, X
    22fc:	89 2b       	or	r24, r25
    22fe:	8a b9       	out	0x0a, r24	; 10
    2300:	85 b1       	in	r24, 0x05	; 5
    2302:	f7 01       	movw	r30, r14
    2304:	90 81       	ld	r25, Z
    2306:	89 2b       	or	r24, r25
    2308:	85 b9       	out	0x05, r24	; 5
    230a:	88 b1       	in	r24, 0x08	; 8
    230c:	d8 01       	movw	r26, r16
    230e:	9c 91       	ld	r25, X
    2310:	89 2b       	or	r24, r25
    2312:	88 b9       	out	0x08, r24	; 8
    2314:	8b b1       	in	r24, 0x0b	; 11
    2316:	f6 01       	movw	r30, r12
    2318:	90 81       	ld	r25, Z
    231a:	89 2b       	or	r24, r25
    231c:	8b b9       	out	0x0b, r24	; 11
    231e:	8a e0       	ldi	r24, 0x0A	; 10
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	0e 94 8b 10 	call	0x2116	; 0x2116 <delayMicroseconds>
    2326:	94 b1       	in	r25, 0x04	; 4
    2328:	d7 01       	movw	r26, r14
    232a:	8c 91       	ld	r24, X
    232c:	80 95       	com	r24
    232e:	89 23       	and	r24, r25
    2330:	84 b9       	out	0x04, r24	; 4
    2332:	97 b1       	in	r25, 0x07	; 7
    2334:	f8 01       	movw	r30, r16
    2336:	80 81       	ld	r24, Z
    2338:	80 95       	com	r24
    233a:	89 23       	and	r24, r25
    233c:	87 b9       	out	0x07, r24	; 7
    233e:	9a b1       	in	r25, 0x0a	; 10
    2340:	d6 01       	movw	r26, r12
    2342:	8c 91       	ld	r24, X
    2344:	80 95       	com	r24
    2346:	89 23       	and	r24, r25
    2348:	8a b9       	out	0x0a, r24	; 10
    234a:	95 b1       	in	r25, 0x05	; 5
    234c:	f7 01       	movw	r30, r14
    234e:	80 81       	ld	r24, Z
    2350:	80 95       	com	r24
    2352:	89 23       	and	r24, r25
    2354:	85 b9       	out	0x05, r24	; 5
    2356:	98 b1       	in	r25, 0x08	; 8
    2358:	d8 01       	movw	r26, r16
    235a:	8c 91       	ld	r24, X
    235c:	80 95       	com	r24
    235e:	89 23       	and	r24, r25
    2360:	88 b9       	out	0x08, r24	; 8
    2362:	9b b1       	in	r25, 0x0b	; 11
    2364:	f6 01       	movw	r30, r12
    2366:	80 81       	ld	r24, Z
    2368:	80 95       	com	r24
    236a:	89 23       	and	r24, r25
    236c:	8b b9       	out	0x0b, r24	; 11
    236e:	c0 90 b0 00 	lds	r12, 0x00B0
    2372:	e0 90 b1 00 	lds	r14, 0x00B1
    2376:	80 91 b0 00 	lds	r24, 0x00B0
    237a:	83 60       	ori	r24, 0x03	; 3
    237c:	80 93 b0 00 	sts	0x00B0, r24
    2380:	82 e0       	ldi	r24, 0x02	; 2
    2382:	80 93 b1 00 	sts	0x00B1, r24
    2386:	00 91 b2 00 	lds	r16, 0x00B2
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	39 c0       	rjmp	.+114    	; 0x2402 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x17e>
    2390:	20 91 b2 00 	lds	r18, 0x00B2
    2394:	20 1b       	sub	r18, r16
    2396:	82 0f       	add	r24, r18
    2398:	91 1d       	adc	r25, r1
    239a:	02 0f       	add	r16, r18
    239c:	f3 b0       	in	r15, 0x03	; 3
    239e:	f9 14       	cp	r15, r9
    23a0:	09 f0       	breq	.+2      	; 0x23a4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x120>
    23a2:	4d c0       	rjmp	.+154    	; 0x243e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    23a4:	96 b0       	in	r9, 0x06	; 6
    23a6:	98 14       	cp	r9, r8
    23a8:	09 f0       	breq	.+2      	; 0x23ac <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x128>
    23aa:	49 c0       	rjmp	.+146    	; 0x243e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    23ac:	29 b1       	in	r18, 0x09	; 9
    23ae:	27 15       	cp	r18, r7
    23b0:	09 f0       	breq	.+2      	; 0x23b4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x130>
    23b2:	45 c0       	rjmp	.+138    	; 0x243e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    23b4:	24 c0       	rjmp	.+72     	; 0x23fe <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x17a>
    23b6:	21 2f       	mov	r18, r17
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	a9 01       	movw	r20, r18
    23bc:	44 0f       	add	r20, r20
    23be:	55 1f       	adc	r21, r21
    23c0:	f5 01       	movw	r30, r10
    23c2:	e4 0f       	add	r30, r20
    23c4:	f5 1f       	adc	r31, r21
    23c6:	60 81       	ld	r22, Z
    23c8:	71 81       	ldd	r23, Z+1	; 0x01
    23ca:	61 15       	cp	r22, r1
    23cc:	71 05       	cpc	r23, r1
    23ce:	99 f4       	brne	.+38     	; 0x23f6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x172>
    23d0:	4c 0f       	add	r20, r28
    23d2:	5d 1f       	adc	r21, r29
    23d4:	da 01       	movw	r26, r20
    23d6:	91 96       	adiw	r26, 0x21	; 33
    23d8:	4d 91       	ld	r20, X+
    23da:	5c 91       	ld	r21, X
    23dc:	92 97       	sbiw	r26, 0x22	; 34
    23de:	da 01       	movw	r26, r20
    23e0:	4c 91       	ld	r20, X
    23e2:	2c 0f       	add	r18, r28
    23e4:	3d 1f       	adc	r19, r29
    23e6:	d9 01       	movw	r26, r18
    23e8:	51 96       	adiw	r26, 0x11	; 17
    23ea:	2c 91       	ld	r18, X
    23ec:	51 97       	sbiw	r26, 0x11	; 17
    23ee:	42 23       	and	r20, r18
    23f0:	11 f4       	brne	.+4      	; 0x23f6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x172>
    23f2:	91 83       	std	Z+1, r25	; 0x01
    23f4:	80 83       	st	Z, r24
    23f6:	1f 5f       	subi	r17, 0xFF	; 255
    23f8:	28 85       	ldd	r18, Y+8	; 0x08
    23fa:	12 17       	cp	r17, r18
    23fc:	e0 f2       	brcs	.-72     	; 0x23b6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x132>
    23fe:	89 2c       	mov	r8, r9
    2400:	9f 2c       	mov	r9, r15
    2402:	2e 85       	ldd	r18, Y+14	; 0x0e
    2404:	3f 85       	ldd	r19, Y+15	; 0x0f
    2406:	82 17       	cp	r24, r18
    2408:	93 07       	cpc	r25, r19
    240a:	10 f2       	brcs	.-124    	; 0x2390 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x10c>
    240c:	c0 92 b0 00 	sts	0x00B0, r12
    2410:	e0 92 b1 00 	sts	0x00B1, r14
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	0f c0       	rjmp	.+30     	; 0x2436 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1b2>
    2418:	e2 2f       	mov	r30, r18
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	ee 0f       	add	r30, r30
    241e:	ff 1f       	adc	r31, r31
    2420:	ea 0d       	add	r30, r10
    2422:	fb 1d       	adc	r31, r11
    2424:	80 81       	ld	r24, Z
    2426:	91 81       	ldd	r25, Z+1	; 0x01
    2428:	00 97       	sbiw	r24, 0x00	; 0
    242a:	21 f4       	brne	.+8      	; 0x2434 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1b0>
    242c:	8e 85       	ldd	r24, Y+14	; 0x0e
    242e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2430:	91 83       	std	Z+1, r25	; 0x01
    2432:	80 83       	st	Z, r24
    2434:	2f 5f       	subi	r18, 0xFF	; 255
    2436:	88 85       	ldd	r24, Y+8	; 0x08
    2438:	28 17       	cp	r18, r24
    243a:	70 f3       	brcs	.-36     	; 0x2418 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x194>
    243c:	05 c0       	rjmp	.+10     	; 0x2448 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1c4>
    243e:	f3 b0       	in	r15, 0x03	; 3
    2440:	96 b0       	in	r9, 0x06	; 6
    2442:	79 b0       	in	r7, 0x09	; 9
    2444:	10 e0       	ldi	r17, 0x00	; 0
    2446:	d8 cf       	rjmp	.-80     	; 0x23f8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62
    244c:	ed e0       	ldi	r30, 0x0D	; 13
    244e:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__epilogue_restores__+0xa>

00002452 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    2452:	ef 92       	push	r14
    2454:	ff 92       	push	r15
    2456:	0f 93       	push	r16
    2458:	1f 93       	push	r17
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	fc 01       	movw	r30, r24
    2460:	9b 01       	movw	r18, r22
    2462:	00 91 7c 00 	lds	r16, 0x007C
    2466:	10 91 7a 00 	lds	r17, 0x007A
    246a:	e7 b0       	in	r14, 0x07	; 7
    246c:	f8 b0       	in	r15, 0x08	; 8
    246e:	80 91 7a 00 	lds	r24, 0x007A
    2472:	86 fd       	sbrc	r24, 6
    2474:	fc cf       	rjmp	.-8      	; 0x246e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	0a c0       	rjmp	.+20     	; 0x248e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3c>
    247a:	a8 2f       	mov	r26, r24
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	aa 0f       	add	r26, r26
    2480:	bb 1f       	adc	r27, r27
    2482:	a2 0f       	add	r26, r18
    2484:	b3 1f       	adc	r27, r19
    2486:	11 96       	adiw	r26, 0x01	; 1
    2488:	1c 92       	st	X, r1
    248a:	1e 92       	st	-X, r1
    248c:	8f 5f       	subi	r24, 0xFF	; 255
    248e:	90 85       	ldd	r25, Z+8	; 0x08
    2490:	89 17       	cp	r24, r25
    2492:	98 f3       	brcs	.-26     	; 0x247a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x28>
    2494:	97 b1       	in	r25, 0x07	; 7
    2496:	82 a1       	ldd	r24, Z+34	; 0x22
    2498:	80 95       	com	r24
    249a:	89 23       	and	r24, r25
    249c:	87 b9       	out	0x07, r24	; 7
    249e:	98 b1       	in	r25, 0x08	; 8
    24a0:	82 a1       	ldd	r24, Z+34	; 0x22
    24a2:	80 95       	com	r24
    24a4:	89 23       	and	r24, r25
    24a6:	88 b9       	out	0x08, r24	; 8
    24a8:	87 e8       	ldi	r24, 0x87	; 135
    24aa:	80 93 7a 00 	sts	0x007A, r24
    24ae:	70 e0       	ldi	r23, 0x00	; 0
    24b0:	29 c0       	rjmp	.+82     	; 0x2504 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    24b2:	df 01       	movw	r26, r30
    24b4:	a6 0f       	add	r26, r22
    24b6:	b1 1d       	adc	r27, r1
    24b8:	51 96       	adiw	r26, 0x11	; 17
    24ba:	8c 91       	ld	r24, X
    24bc:	51 97       	sbiw	r26, 0x11	; 17
    24be:	80 64       	ori	r24, 0x40	; 64
    24c0:	80 93 7c 00 	sts	0x007C, r24
    24c4:	80 91 7a 00 	lds	r24, 0x007A
    24c8:	80 64       	ori	r24, 0x40	; 64
    24ca:	80 93 7a 00 	sts	0x007A, r24
    24ce:	80 91 7a 00 	lds	r24, 0x007A
    24d2:	86 fd       	sbrc	r24, 6
    24d4:	fc cf       	rjmp	.-8      	; 0x24ce <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x7c>
    24d6:	a6 2f       	mov	r26, r22
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	aa 0f       	add	r26, r26
    24dc:	bb 1f       	adc	r27, r27
    24de:	a2 0f       	add	r26, r18
    24e0:	b3 1f       	adc	r27, r19
    24e2:	40 91 78 00 	lds	r20, 0x0078
    24e6:	50 91 79 00 	lds	r21, 0x0079
    24ea:	8d 91       	ld	r24, X+
    24ec:	9c 91       	ld	r25, X
    24ee:	11 97       	sbiw	r26, 0x01	; 1
    24f0:	84 0f       	add	r24, r20
    24f2:	95 1f       	adc	r25, r21
    24f4:	11 96       	adiw	r26, 0x01	; 1
    24f6:	9c 93       	st	X, r25
    24f8:	8e 93       	st	-X, r24
    24fa:	6f 5f       	subi	r22, 0xFF	; 255
    24fc:	80 85       	ldd	r24, Z+8	; 0x08
    24fe:	68 17       	cp	r22, r24
    2500:	c0 f2       	brcs	.-80     	; 0x24b2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x60>
    2502:	7f 5f       	subi	r23, 0xFF	; 255
    2504:	81 a1       	ldd	r24, Z+33	; 0x21
    2506:	78 17       	cp	r23, r24
    2508:	10 f4       	brcc	.+4      	; 0x250e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xbc>
    250a:	60 e0       	ldi	r22, 0x00	; 0
    250c:	f7 cf       	rjmp	.-18     	; 0x24fc <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xaa>
    250e:	40 e0       	ldi	r20, 0x00	; 0
    2510:	14 c0       	rjmp	.+40     	; 0x253a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe8>
    2512:	c4 2f       	mov	r28, r20
    2514:	d0 e0       	ldi	r29, 0x00	; 0
    2516:	cc 0f       	add	r28, r28
    2518:	dd 1f       	adc	r29, r29
    251a:	c2 0f       	add	r28, r18
    251c:	d3 1f       	adc	r29, r19
    251e:	61 a1       	ldd	r22, Z+33	; 0x21
    2520:	70 e0       	ldi	r23, 0x00	; 0
    2522:	cb 01       	movw	r24, r22
    2524:	95 95       	asr	r25
    2526:	87 95       	ror	r24
    2528:	a8 81       	ld	r26, Y
    252a:	b9 81       	ldd	r27, Y+1	; 0x01
    252c:	8a 0f       	add	r24, r26
    252e:	9b 1f       	adc	r25, r27
    2530:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <__udivmodhi4>
    2534:	79 83       	std	Y+1, r23	; 0x01
    2536:	68 83       	st	Y, r22
    2538:	4f 5f       	subi	r20, 0xFF	; 255
    253a:	80 85       	ldd	r24, Z+8	; 0x08
    253c:	48 17       	cp	r20, r24
    253e:	48 f3       	brcs	.-46     	; 0x2512 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xc0>
    2540:	00 93 7c 00 	sts	0x007C, r16
    2544:	10 93 7a 00 	sts	0x007A, r17
    2548:	f8 b8       	out	0x08, r15	; 8
    254a:	e7 b8       	out	0x07, r14	; 7
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
    2550:	e6 e0       	ldi	r30, 0x06	; 6
    2552:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <__epilogue_restores__+0x18>

00002556 <_ZN16PololuQTRSensors4readEPjh>:
    2556:	a0 e2       	ldi	r26, 0x20	; 32
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	e1 eb       	ldi	r30, 0xB1	; 177
    255c:	f2 e1       	ldi	r31, 0x12	; 18
    255e:	0c 94 4d 16 	jmp	0x2c9a	; 0x2c9a <__prologue_saves__+0x16>
    2562:	8c 01       	movw	r16, r24
    2564:	7b 01       	movw	r14, r22
    2566:	d4 2e       	mov	r13, r20
    2568:	84 2f       	mov	r24, r20
    256a:	81 50       	subi	r24, 0x01	; 1
    256c:	82 30       	cpi	r24, 0x02	; 2
    256e:	18 f4       	brcc	.+6      	; 0x2576 <_ZN16PololuQTRSensors4readEPjh+0x20>
    2570:	c8 01       	movw	r24, r16
    2572:	0e 94 d5 10 	call	0x21aa	; 0x21aa <_ZN16PololuQTRSensors10emittersOnEv>
    2576:	d8 01       	movw	r26, r16
    2578:	50 96       	adiw	r26, 0x10	; 16
    257a:	8c 91       	ld	r24, X
    257c:	50 97       	sbiw	r26, 0x10	; 16
    257e:	88 23       	and	r24, r24
    2580:	89 f4       	brne	.+34     	; 0x25a4 <_ZN16PololuQTRSensors4readEPjh+0x4e>
    2582:	c8 01       	movw	r24, r16
    2584:	b7 01       	movw	r22, r14
    2586:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    258a:	c8 01       	movw	r24, r16
    258c:	0e 94 c0 10 	call	0x2180	; 0x2180 <_ZN16PololuQTRSensors11emittersOffEv>
    2590:	bd 2d       	mov	r27, r13
    2592:	b2 30       	cpi	r27, 0x02	; 2
    2594:	d9 f5       	brne	.+118    	; 0x260c <_ZN16PololuQTRSensors4readEPjh+0xb6>
    2596:	c8 01       	movw	r24, r16
    2598:	be 01       	movw	r22, r28
    259a:	6f 5f       	subi	r22, 0xFF	; 255
    259c:	7f 4f       	sbci	r23, 0xFF	; 255
    259e:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    25a2:	10 c0       	rjmp	.+32     	; 0x25c4 <_ZN16PololuQTRSensors4readEPjh+0x6e>
    25a4:	c8 01       	movw	r24, r16
    25a6:	b7 01       	movw	r22, r14
    25a8:	0e 94 29 12 	call	0x2452	; 0x2452 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    25ac:	c8 01       	movw	r24, r16
    25ae:	0e 94 c0 10 	call	0x2180	; 0x2180 <_ZN16PololuQTRSensors11emittersOffEv>
    25b2:	ed 2d       	mov	r30, r13
    25b4:	e2 30       	cpi	r30, 0x02	; 2
    25b6:	51 f5       	brne	.+84     	; 0x260c <_ZN16PololuQTRSensors4readEPjh+0xb6>
    25b8:	c8 01       	movw	r24, r16
    25ba:	be 01       	movw	r22, r28
    25bc:	6f 5f       	subi	r22, 0xFF	; 255
    25be:	7f 4f       	sbci	r23, 0xFF	; 255
    25c0:	0e 94 29 12 	call	0x2452	; 0x2452 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    25c4:	60 e0       	ldi	r22, 0x00	; 0
    25c6:	ae 01       	movw	r20, r28
    25c8:	4f 5f       	subi	r20, 0xFF	; 255
    25ca:	5f 4f       	sbci	r21, 0xFF	; 255
    25cc:	1b c0       	rjmp	.+54     	; 0x2604 <_ZN16PololuQTRSensors4readEPjh+0xae>
    25ce:	86 2f       	mov	r24, r22
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	88 0f       	add	r24, r24
    25d4:	99 1f       	adc	r25, r25
    25d6:	f7 01       	movw	r30, r14
    25d8:	e8 0f       	add	r30, r24
    25da:	f9 1f       	adc	r31, r25
    25dc:	84 0f       	add	r24, r20
    25de:	95 1f       	adc	r25, r21
    25e0:	d8 01       	movw	r26, r16
    25e2:	1e 96       	adiw	r26, 0x0e	; 14
    25e4:	2d 91       	ld	r18, X+
    25e6:	3c 91       	ld	r19, X
    25e8:	1f 97       	sbiw	r26, 0x0f	; 15
    25ea:	dc 01       	movw	r26, r24
    25ec:	8d 91       	ld	r24, X+
    25ee:	9c 91       	ld	r25, X
    25f0:	11 97       	sbiw	r26, 0x01	; 1
    25f2:	28 1b       	sub	r18, r24
    25f4:	39 0b       	sbc	r19, r25
    25f6:	80 81       	ld	r24, Z
    25f8:	91 81       	ldd	r25, Z+1	; 0x01
    25fa:	82 0f       	add	r24, r18
    25fc:	93 1f       	adc	r25, r19
    25fe:	91 83       	std	Z+1, r25	; 0x01
    2600:	80 83       	st	Z, r24
    2602:	6f 5f       	subi	r22, 0xFF	; 255
    2604:	f8 01       	movw	r30, r16
    2606:	80 85       	ldd	r24, Z+8	; 0x08
    2608:	68 17       	cp	r22, r24
    260a:	08 f3       	brcs	.-62     	; 0x25ce <_ZN16PololuQTRSensors4readEPjh+0x78>
    260c:	a0 96       	adiw	r28, 0x20	; 32
    260e:	e7 e0       	ldi	r30, 0x07	; 7
    2610:	0c 94 69 16 	jmp	0x2cd2	; 0x2cd2 <__epilogue_restores__+0x16>

00002614 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    2614:	8f 92       	push	r8
    2616:	9f 92       	push	r9
    2618:	af 92       	push	r10
    261a:	bf 92       	push	r11
    261c:	cf 92       	push	r12
    261e:	df 92       	push	r13
    2620:	ff 92       	push	r15
    2622:	0f 93       	push	r16
    2624:	1f 93       	push	r17
    2626:	cf 93       	push	r28
    2628:	df 93       	push	r29
    262a:	ec 01       	movw	r28, r24
    262c:	c6 2e       	mov	r12, r22
    262e:	07 2f       	mov	r16, r23
    2630:	f4 2e       	mov	r15, r20
    2632:	42 30       	cpi	r20, 0x02	; 2
    2634:	11 f0       	breq	.+4      	; 0x263a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x26>
    2636:	ff 20       	and	r15, r15
    2638:	51 f4       	brne	.+20     	; 0x264e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3a>
    263a:	8c 81       	ldd	r24, Y+4	; 0x04
    263c:	9d 81       	ldd	r25, Y+5	; 0x05
    263e:	00 97       	sbiw	r24, 0x00	; 0
    2640:	09 f4       	brne	.+2      	; 0x2644 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x30>
    2642:	a0 c0       	rjmp	.+320    	; 0x2784 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    2644:	8e 81       	ldd	r24, Y+6	; 0x06
    2646:	9f 81       	ldd	r25, Y+7	; 0x07
    2648:	00 97       	sbiw	r24, 0x00	; 0
    264a:	09 f4       	brne	.+2      	; 0x264e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3a>
    264c:	9b c0       	rjmp	.+310    	; 0x2784 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    264e:	8f 2d       	mov	r24, r15
    2650:	81 50       	subi	r24, 0x01	; 1
    2652:	82 30       	cpi	r24, 0x02	; 2
    2654:	50 f4       	brcc	.+20     	; 0x266a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x56>
    2656:	88 81       	ld	r24, Y
    2658:	99 81       	ldd	r25, Y+1	; 0x01
    265a:	00 97       	sbiw	r24, 0x00	; 0
    265c:	09 f4       	brne	.+2      	; 0x2660 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x4c>
    265e:	92 c0       	rjmp	.+292    	; 0x2784 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    2660:	8a 81       	ldd	r24, Y+2	; 0x02
    2662:	9b 81       	ldd	r25, Y+3	; 0x03
    2664:	00 97       	sbiw	r24, 0x00	; 0
    2666:	09 f4       	brne	.+2      	; 0x266a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x56>
    2668:	8d c0       	rjmp	.+282    	; 0x2784 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    266a:	ce 01       	movw	r24, r28
    266c:	6c 2d       	mov	r22, r12
    266e:	70 2f       	mov	r23, r16
    2670:	4f 2d       	mov	r20, r15
    2672:	0e 94 ab 12 	call	0x2556	; 0x2556 <_ZN16PololuQTRSensors4readEPjh>
    2676:	ac 2c       	mov	r10, r12
    2678:	b0 2e       	mov	r11, r16
    267a:	00 e0       	ldi	r16, 0x00	; 0
    267c:	10 e0       	ldi	r17, 0x00	; 0
    267e:	88 24       	eor	r8, r8
    2680:	99 24       	eor	r9, r9
    2682:	7a c0       	rjmp	.+244    	; 0x2778 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x164>
    2684:	8f 2d       	mov	r24, r15
    2686:	81 30       	cpi	r24, 0x01	; 1
    2688:	59 f4       	brne	.+22     	; 0x26a0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x8c>
    268a:	ea 81       	ldd	r30, Y+2	; 0x02
    268c:	fb 81       	ldd	r31, Y+3	; 0x03
    268e:	e0 0f       	add	r30, r16
    2690:	f1 1f       	adc	r31, r17
    2692:	c0 80       	ld	r12, Z
    2694:	d1 80       	ldd	r13, Z+1	; 0x01
    2696:	e8 81       	ld	r30, Y
    2698:	f9 81       	ldd	r31, Y+1	; 0x01
    269a:	e0 0f       	add	r30, r16
    269c:	f1 1f       	adc	r31, r17
    269e:	0d c0       	rjmp	.+26     	; 0x26ba <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    26a0:	8c 81       	ldd	r24, Y+4	; 0x04
    26a2:	9d 81       	ldd	r25, Y+5	; 0x05
    26a4:	ff 20       	and	r15, r15
    26a6:	61 f4       	brne	.+24     	; 0x26c0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xac>
    26a8:	ee 81       	ldd	r30, Y+6	; 0x06
    26aa:	ff 81       	ldd	r31, Y+7	; 0x07
    26ac:	e0 0f       	add	r30, r16
    26ae:	f1 1f       	adc	r31, r17
    26b0:	c0 80       	ld	r12, Z
    26b2:	d1 80       	ldd	r13, Z+1	; 0x01
    26b4:	80 0f       	add	r24, r16
    26b6:	91 1f       	adc	r25, r17
    26b8:	fc 01       	movw	r30, r24
    26ba:	40 81       	ld	r20, Z
    26bc:	51 81       	ldd	r21, Z+1	; 0x01
    26be:	2b c0       	rjmp	.+86     	; 0x2716 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x102>
    26c0:	80 0f       	add	r24, r16
    26c2:	91 1f       	adc	r25, r17
    26c4:	fc 01       	movw	r30, r24
    26c6:	80 81       	ld	r24, Z
    26c8:	91 81       	ldd	r25, Z+1	; 0x01
    26ca:	e8 81       	ld	r30, Y
    26cc:	f9 81       	ldd	r31, Y+1	; 0x01
    26ce:	e0 0f       	add	r30, r16
    26d0:	f1 1f       	adc	r31, r17
    26d2:	40 81       	ld	r20, Z
    26d4:	51 81       	ldd	r21, Z+1	; 0x01
    26d6:	ce 84       	ldd	r12, Y+14	; 0x0e
    26d8:	df 84       	ldd	r13, Y+15	; 0x0f
    26da:	84 17       	cp	r24, r20
    26dc:	95 07       	cpc	r25, r21
    26de:	10 f4       	brcc	.+4      	; 0x26e4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd0>
    26e0:	a6 01       	movw	r20, r12
    26e2:	04 c0       	rjmp	.+8      	; 0x26ec <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd8>
    26e4:	4c 0d       	add	r20, r12
    26e6:	5d 1d       	adc	r21, r13
    26e8:	48 1b       	sub	r20, r24
    26ea:	59 0b       	sbc	r21, r25
    26ec:	ee 81       	ldd	r30, Y+6	; 0x06
    26ee:	ff 81       	ldd	r31, Y+7	; 0x07
    26f0:	e0 0f       	add	r30, r16
    26f2:	f1 1f       	adc	r31, r17
    26f4:	80 81       	ld	r24, Z
    26f6:	91 81       	ldd	r25, Z+1	; 0x01
    26f8:	ea 81       	ldd	r30, Y+2	; 0x02
    26fa:	fb 81       	ldd	r31, Y+3	; 0x03
    26fc:	e0 0f       	add	r30, r16
    26fe:	f1 1f       	adc	r31, r17
    2700:	20 81       	ld	r18, Z
    2702:	31 81       	ldd	r19, Z+1	; 0x01
    2704:	ce 84       	ldd	r12, Y+14	; 0x0e
    2706:	df 84       	ldd	r13, Y+15	; 0x0f
    2708:	82 17       	cp	r24, r18
    270a:	93 07       	cpc	r25, r19
    270c:	20 f0       	brcs	.+8      	; 0x2716 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x102>
    270e:	c2 0e       	add	r12, r18
    2710:	d3 1e       	adc	r13, r19
    2712:	c8 1a       	sub	r12, r24
    2714:	d9 0a       	sbc	r13, r25
    2716:	c4 1a       	sub	r12, r20
    2718:	d5 0a       	sbc	r13, r21
    271a:	d1 f0       	breq	.+52     	; 0x2750 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    271c:	f5 01       	movw	r30, r10
    271e:	60 81       	ld	r22, Z
    2720:	71 81       	ldd	r23, Z+1	; 0x01
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	9a 01       	movw	r18, r20
    2728:	40 e0       	ldi	r20, 0x00	; 0
    272a:	50 e0       	ldi	r21, 0x00	; 0
    272c:	62 1b       	sub	r22, r18
    272e:	73 0b       	sbc	r23, r19
    2730:	84 0b       	sbc	r24, r20
    2732:	95 0b       	sbc	r25, r21
    2734:	28 ee       	ldi	r18, 0xE8	; 232
    2736:	33 e0       	ldi	r19, 0x03	; 3
    2738:	40 e0       	ldi	r20, 0x00	; 0
    273a:	50 e0       	ldi	r21, 0x00	; 0
    273c:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__mulsi3>
    2740:	96 01       	movw	r18, r12
    2742:	40 e0       	ldi	r20, 0x00	; 0
    2744:	50 e0       	ldi	r21, 0x00	; 0
    2746:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__divmodsi4>
    274a:	37 fd       	sbrc	r19, 7
    274c:	0a c0       	rjmp	.+20     	; 0x2762 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x14e>
    274e:	02 c0       	rjmp	.+4      	; 0x2754 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x140>
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	f3 e0       	ldi	r31, 0x03	; 3
    2756:	29 3e       	cpi	r18, 0xE9	; 233
    2758:	3f 07       	cpc	r19, r31
    275a:	2c f0       	brlt	.+10     	; 0x2766 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x152>
    275c:	28 ee       	ldi	r18, 0xE8	; 232
    275e:	33 e0       	ldi	r19, 0x03	; 3
    2760:	02 c0       	rjmp	.+4      	; 0x2766 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x152>
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	f5 01       	movw	r30, r10
    2768:	21 93       	st	Z+, r18
    276a:	31 93       	st	Z+, r19
    276c:	5f 01       	movw	r10, r30
    276e:	08 94       	sec
    2770:	81 1c       	adc	r8, r1
    2772:	91 1c       	adc	r9, r1
    2774:	0e 5f       	subi	r16, 0xFE	; 254
    2776:	1f 4f       	sbci	r17, 0xFF	; 255
    2778:	88 85       	ldd	r24, Y+8	; 0x08
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	88 16       	cp	r8, r24
    277e:	99 06       	cpc	r9, r25
    2780:	0c f4       	brge	.+2      	; 0x2784 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    2782:	80 cf       	rjmp	.-256    	; 0x2684 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x70>
    2784:	df 91       	pop	r29
    2786:	cf 91       	pop	r28
    2788:	1f 91       	pop	r17
    278a:	0f 91       	pop	r16
    278c:	ff 90       	pop	r15
    278e:	df 90       	pop	r13
    2790:	cf 90       	pop	r12
    2792:	bf 90       	pop	r11
    2794:	af 90       	pop	r10
    2796:	9f 90       	pop	r9
    2798:	8f 90       	pop	r8
    279a:	08 95       	ret

0000279c <_ZN16PololuQTRSensors8readLineEPjhh>:
    279c:	a5 e0       	ldi	r26, 0x05	; 5
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	e4 ed       	ldi	r30, 0xD4	; 212
    27a2:	f3 e1       	ldi	r31, 0x13	; 19
    27a4:	0c 94 42 16 	jmp	0x2c84	; 0x2c84 <__prologue_saves__>
    27a8:	4c 01       	movw	r8, r24
    27aa:	c6 2e       	mov	r12, r22
    27ac:	e7 2e       	mov	r14, r23
    27ae:	2d 83       	std	Y+5, r18	; 0x05
    27b0:	0e 94 0a 13 	call	0x2614	; 0x2614 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    27b4:	d4 01       	movw	r26, r8
    27b6:	18 96       	adiw	r26, 0x08	; 8
    27b8:	4c 90       	ld	r4, X
    27ba:	18 97       	sbiw	r26, 0x08	; 8
    27bc:	de 2c       	mov	r13, r14
    27be:	64 2d       	mov	r22, r4
    27c0:	70 e0       	ldi	r23, 0x00	; 0
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	28 ee       	ldi	r18, 0xE8	; 232
    27c8:	33 e0       	ldi	r19, 0x03	; 3
    27ca:	40 e0       	ldi	r20, 0x00	; 0
    27cc:	50 e0       	ldi	r21, 0x00	; 0
    27ce:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__mulsi3>
    27d2:	69 83       	std	Y+1, r22	; 0x01
    27d4:	7a 83       	std	Y+2, r23	; 0x02
    27d6:	8b 83       	std	Y+3, r24	; 0x03
    27d8:	9c 83       	std	Y+4, r25	; 0x04
    27da:	ee 24       	eor	r14, r14
    27dc:	ff 24       	eor	r15, r15
    27de:	87 01       	movw	r16, r14
    27e0:	66 24       	eor	r6, r6
    27e2:	77 24       	eor	r7, r7
    27e4:	88 24       	eor	r8, r8
    27e6:	99 24       	eor	r9, r9
    27e8:	54 01       	movw	r10, r8
    27ea:	55 24       	eor	r5, r5
    27ec:	36 c0       	rjmp	.+108    	; 0x285a <_ZN16PololuQTRSensors8readLineEPjhh+0xbe>
    27ee:	f6 01       	movw	r30, r12
    27f0:	30 81       	ld	r19, Z
    27f2:	21 81       	ldd	r18, Z+1	; 0x01
    27f4:	42 e0       	ldi	r20, 0x02	; 2
    27f6:	24 2e       	mov	r2, r20
    27f8:	31 2c       	mov	r3, r1
    27fa:	c2 0c       	add	r12, r2
    27fc:	d3 1c       	adc	r13, r3
    27fe:	c9 01       	movw	r24, r18
    2800:	49 2f       	mov	r20, r25
    2802:	58 2f       	mov	r21, r24
    2804:	1a 01       	movw	r2, r20
    2806:	2d 81       	ldd	r18, Y+5	; 0x05
    2808:	22 23       	and	r18, r18
    280a:	29 f0       	breq	.+10     	; 0x2816 <_ZN16PololuQTRSensors8readLineEPjhh+0x7a>
    280c:	88 ee       	ldi	r24, 0xE8	; 232
    280e:	93 e0       	ldi	r25, 0x03	; 3
    2810:	82 19       	sub	r24, r2
    2812:	93 09       	sbc	r25, r3
    2814:	1c 01       	movw	r2, r24
    2816:	99 ec       	ldi	r25, 0xC9	; 201
    2818:	29 16       	cp	r2, r25
    281a:	31 04       	cpc	r3, r1
    281c:	2c f4       	brge	.+10     	; 0x2828 <_ZN16PololuQTRSensors8readLineEPjhh+0x8c>
    281e:	a3 e3       	ldi	r26, 0x33	; 51
    2820:	2a 16       	cp	r2, r26
    2822:	31 04       	cpc	r3, r1
    2824:	94 f0       	brlt	.+36     	; 0x284a <_ZN16PololuQTRSensors8readLineEPjhh+0xae>
    2826:	02 c0       	rjmp	.+4      	; 0x282c <_ZN16PololuQTRSensors8readLineEPjhh+0x90>
    2828:	55 24       	eor	r5, r5
    282a:	53 94       	inc	r5
    282c:	b1 01       	movw	r22, r2
    282e:	88 27       	eor	r24, r24
    2830:	77 fd       	sbrc	r23, 7
    2832:	80 95       	com	r24
    2834:	98 2f       	mov	r25, r24
    2836:	a8 01       	movw	r20, r16
    2838:	97 01       	movw	r18, r14
    283a:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__mulsi3>
    283e:	86 0e       	add	r8, r22
    2840:	97 1e       	adc	r9, r23
    2842:	a8 1e       	adc	r10, r24
    2844:	b9 1e       	adc	r11, r25
    2846:	62 0c       	add	r6, r2
    2848:	73 1c       	adc	r7, r3
    284a:	88 ee       	ldi	r24, 0xE8	; 232
    284c:	93 e0       	ldi	r25, 0x03	; 3
    284e:	a0 e0       	ldi	r26, 0x00	; 0
    2850:	b0 e0       	ldi	r27, 0x00	; 0
    2852:	e8 0e       	add	r14, r24
    2854:	f9 1e       	adc	r15, r25
    2856:	0a 1f       	adc	r16, r26
    2858:	1b 1f       	adc	r17, r27
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	9a 81       	ldd	r25, Y+2	; 0x02
    285e:	ab 81       	ldd	r26, Y+3	; 0x03
    2860:	bc 81       	ldd	r27, Y+4	; 0x04
    2862:	e8 16       	cp	r14, r24
    2864:	f9 06       	cpc	r15, r25
    2866:	0a 07       	cpc	r16, r26
    2868:	1b 07       	cpc	r17, r27
    286a:	09 f6       	brne	.-126    	; 0x27ee <_ZN16PololuQTRSensors8readLineEPjhh+0x52>
    286c:	55 20       	and	r5, r5
    286e:	f1 f4       	brne	.+60     	; 0x28ac <_ZN16PololuQTRSensors8readLineEPjhh+0x110>
    2870:	55 24       	eor	r5, r5
    2872:	08 94       	sec
    2874:	41 08       	sbc	r4, r1
    2876:	51 08       	sbc	r5, r1
    2878:	24 ef       	ldi	r18, 0xF4	; 244
    287a:	31 e0       	ldi	r19, 0x01	; 1
    287c:	42 9e       	mul	r4, r18
    287e:	c0 01       	movw	r24, r0
    2880:	43 9e       	mul	r4, r19
    2882:	90 0d       	add	r25, r0
    2884:	52 9e       	mul	r5, r18
    2886:	90 0d       	add	r25, r0
    2888:	11 24       	eor	r1, r1
    288a:	20 91 bf 01 	lds	r18, 0x01BF
    288e:	30 91 c0 01 	lds	r19, 0x01C0
    2892:	28 17       	cp	r18, r24
    2894:	39 07       	cpc	r19, r25
    2896:	b4 f0       	brlt	.+44     	; 0x28c4 <_ZN16PololuQTRSensors8readLineEPjhh+0x128>
    2898:	88 ee       	ldi	r24, 0xE8	; 232
    289a:	93 e0       	ldi	r25, 0x03	; 3
    289c:	48 9e       	mul	r4, r24
    289e:	90 01       	movw	r18, r0
    28a0:	49 9e       	mul	r4, r25
    28a2:	30 0d       	add	r19, r0
    28a4:	58 9e       	mul	r5, r24
    28a6:	30 0d       	add	r19, r0
    28a8:	11 24       	eor	r1, r1
    28aa:	0e c0       	rjmp	.+28     	; 0x28c8 <_ZN16PololuQTRSensors8readLineEPjhh+0x12c>
    28ac:	93 01       	movw	r18, r6
    28ae:	40 e0       	ldi	r20, 0x00	; 0
    28b0:	50 e0       	ldi	r21, 0x00	; 0
    28b2:	c5 01       	movw	r24, r10
    28b4:	b4 01       	movw	r22, r8
    28b6:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__udivmodsi4>
    28ba:	20 93 bf 01 	sts	0x01BF, r18
    28be:	30 93 c0 01 	sts	0x01C0, r19
    28c2:	02 c0       	rjmp	.+4      	; 0x28c8 <_ZN16PololuQTRSensors8readLineEPjhh+0x12c>
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	c9 01       	movw	r24, r18
    28ca:	25 96       	adiw	r28, 0x05	; 5
    28cc:	e2 e1       	ldi	r30, 0x12	; 18
    28ce:	0c 94 5e 16 	jmp	0x2cbc	; 0x2cbc <__epilogue_restores__>

000028d2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    28d2:	a7 e6       	ldi	r26, 0x67	; 103
    28d4:	b0 e0       	ldi	r27, 0x00	; 0
    28d6:	ef e6       	ldi	r30, 0x6F	; 111
    28d8:	f4 e1       	ldi	r31, 0x14	; 20
    28da:	0c 94 42 16 	jmp	0x2c84	; 0x2c84 <__prologue_saves__>
    28de:	8c 01       	movw	r16, r24
    28e0:	4b 01       	movw	r8, r22
    28e2:	6a 01       	movw	r12, r20
    28e4:	a6 96       	adiw	r28, 0x26	; 38
    28e6:	2f af       	std	Y+63, r18	; 0x3f
    28e8:	a6 97       	sbiw	r28, 0x26	; 38
    28ea:	da 01       	movw	r26, r20
    28ec:	8d 91       	ld	r24, X+
    28ee:	9c 91       	ld	r25, X
    28f0:	11 97       	sbiw	r26, 0x01	; 1
    28f2:	00 97       	sbiw	r24, 0x00	; 0
    28f4:	e9 f4       	brne	.+58     	; 0x2930 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x5e>
    28f6:	f8 01       	movw	r30, r16
    28f8:	80 85       	ldd	r24, Z+8	; 0x08
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	88 0f       	add	r24, r24
    28fe:	99 1f       	adc	r25, r25
    2900:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <malloc>
    2904:	d6 01       	movw	r26, r12
    2906:	11 96       	adiw	r26, 0x01	; 1
    2908:	9c 93       	st	X, r25
    290a:	8e 93       	st	-X, r24
    290c:	00 97       	sbiw	r24, 0x00	; 0
    290e:	09 f4       	brne	.+2      	; 0x2912 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x40>
    2910:	e2 c0       	rjmp	.+452    	; 0x2ad6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x204>
    2912:	fc 01       	movw	r30, r24
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	03 c0       	rjmp	.+6      	; 0x2920 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x4e>
    291a:	11 92       	st	Z+, r1
    291c:	11 92       	st	Z+, r1
    291e:	01 96       	adiw	r24, 0x01	; 1
    2920:	d8 01       	movw	r26, r16
    2922:	18 96       	adiw	r26, 0x08	; 8
    2924:	2c 91       	ld	r18, X
    2926:	18 97       	sbiw	r26, 0x08	; 8
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	82 17       	cp	r24, r18
    292c:	93 07       	cpc	r25, r19
    292e:	ac f3       	brlt	.-22     	; 0x291a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x48>
    2930:	f4 01       	movw	r30, r8
    2932:	80 81       	ld	r24, Z
    2934:	91 81       	ldd	r25, Z+1	; 0x01
    2936:	00 97       	sbiw	r24, 0x00	; 0
    2938:	89 f0       	breq	.+34     	; 0x295c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8a>
    293a:	ee 24       	eor	r14, r14
    293c:	ff 24       	eor	r15, r15
    293e:	5e 01       	movw	r10, r28
    2940:	08 94       	sec
    2942:	a1 1c       	adc	r10, r1
    2944:	b1 1c       	adc	r11, r1
    2946:	b1 e4       	ldi	r27, 0x41	; 65
    2948:	6b 2e       	mov	r6, r27
    294a:	71 2c       	mov	r7, r1
    294c:	6c 0e       	add	r6, r28
    294e:	7d 1e       	adc	r7, r29
    2950:	a1 e2       	ldi	r26, 0x21	; 33
    2952:	4a 2e       	mov	r4, r26
    2954:	51 2c       	mov	r5, r1
    2956:	4c 0e       	add	r4, r28
    2958:	5d 1e       	adc	r5, r29
    295a:	23 c0       	rjmp	.+70     	; 0x29a2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xd0>
    295c:	d8 01       	movw	r26, r16
    295e:	18 96       	adiw	r26, 0x08	; 8
    2960:	8c 91       	ld	r24, X
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	88 0f       	add	r24, r24
    2966:	99 1f       	adc	r25, r25
    2968:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <malloc>
    296c:	f4 01       	movw	r30, r8
    296e:	91 83       	std	Z+1, r25	; 0x01
    2970:	80 83       	st	Z, r24
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	09 f4       	brne	.+2      	; 0x2978 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xa6>
    2976:	af c0       	rjmp	.+350    	; 0x2ad6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x204>
    2978:	fc 01       	movw	r30, r24
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	d8 01       	movw	r26, r16
    2980:	07 c0       	rjmp	.+14     	; 0x2990 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xbe>
    2982:	1e 96       	adiw	r26, 0x0e	; 14
    2984:	2d 91       	ld	r18, X+
    2986:	3c 91       	ld	r19, X
    2988:	1f 97       	sbiw	r26, 0x0f	; 15
    298a:	21 93       	st	Z+, r18
    298c:	31 93       	st	Z+, r19
    298e:	01 96       	adiw	r24, 0x01	; 1
    2990:	18 96       	adiw	r26, 0x08	; 8
    2992:	2c 91       	ld	r18, X
    2994:	18 97       	sbiw	r26, 0x08	; 8
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	82 17       	cp	r24, r18
    299a:	93 07       	cpc	r25, r19
    299c:	94 f3       	brlt	.-28     	; 0x2982 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb0>
    299e:	8d 01       	movw	r16, r26
    29a0:	cc cf       	rjmp	.-104    	; 0x293a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x68>
    29a2:	c8 01       	movw	r24, r16
    29a4:	b5 01       	movw	r22, r10
    29a6:	a6 96       	adiw	r28, 0x26	; 38
    29a8:	4f ad       	ldd	r20, Y+63	; 0x3f
    29aa:	a6 97       	sbiw	r28, 0x26	; 38
    29ac:	0e 94 ab 12 	call	0x2556	; 0x2556 <_ZN16PololuQTRSensors4readEPjh>
    29b0:	d8 01       	movw	r26, r16
    29b2:	18 96       	adiw	r26, 0x08	; 8
    29b4:	8c 91       	ld	r24, X
    29b6:	18 97       	sbiw	r26, 0x08	; 8
    29b8:	e8 2f       	mov	r30, r24
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	a5 96       	adiw	r28, 0x25	; 37
    29be:	ff af       	std	Y+63, r31	; 0x3f
    29c0:	ee af       	std	Y+62, r30	; 0x3e
    29c2:	a5 97       	sbiw	r28, 0x25	; 37
    29c4:	13 01       	movw	r2, r6
    29c6:	f5 01       	movw	r30, r10
    29c8:	a3 96       	adiw	r28, 0x23	; 35
    29ca:	5f ae       	std	Y+63, r5	; 0x3f
    29cc:	4e ae       	std	Y+62, r4	; 0x3e
    29ce:	a3 97       	sbiw	r28, 0x23	; 35
    29d0:	93 01       	movw	r18, r6
    29d2:	40 e0       	ldi	r20, 0x00	; 0
    29d4:	50 e0       	ldi	r21, 0x00	; 0
    29d6:	a8 96       	adiw	r28, 0x28	; 40
    29d8:	5f ae       	std	Y+63, r5	; 0x3f
    29da:	4e ae       	std	Y+62, r4	; 0x3e
    29dc:	a8 97       	sbiw	r28, 0x28	; 40
    29de:	37 c0       	rjmp	.+110    	; 0x2a4e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17c>
    29e0:	e1 14       	cp	r14, r1
    29e2:	f1 04       	cpc	r15, r1
    29e4:	61 f0       	breq	.+24     	; 0x29fe <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x12c>
    29e6:	a8 96       	adiw	r28, 0x28	; 40
    29e8:	ae ad       	ldd	r26, Y+62	; 0x3e
    29ea:	bf ad       	ldd	r27, Y+63	; 0x3f
    29ec:	a8 97       	sbiw	r28, 0x28	; 40
    29ee:	6d 91       	ld	r22, X+
    29f0:	7c 91       	ld	r23, X
    29f2:	11 97       	sbiw	r26, 0x01	; 1
    29f4:	80 81       	ld	r24, Z
    29f6:	91 81       	ldd	r25, Z+1	; 0x01
    29f8:	68 17       	cp	r22, r24
    29fa:	79 07       	cpc	r23, r25
    29fc:	60 f4       	brcc	.+24     	; 0x2a16 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x144>
    29fe:	80 81       	ld	r24, Z
    2a00:	91 81       	ldd	r25, Z+1	; 0x01
    2a02:	a8 96       	adiw	r28, 0x28	; 40
    2a04:	ae ad       	ldd	r26, Y+62	; 0x3e
    2a06:	bf ad       	ldd	r27, Y+63	; 0x3f
    2a08:	a8 97       	sbiw	r28, 0x28	; 40
    2a0a:	11 96       	adiw	r26, 0x01	; 1
    2a0c:	9c 93       	st	X, r25
    2a0e:	8e 93       	st	-X, r24
    2a10:	e1 14       	cp	r14, r1
    2a12:	f1 04       	cpc	r15, r1
    2a14:	49 f0       	breq	.+18     	; 0x2a28 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x156>
    2a16:	d9 01       	movw	r26, r18
    2a18:	6d 91       	ld	r22, X+
    2a1a:	7c 91       	ld	r23, X
    2a1c:	11 97       	sbiw	r26, 0x01	; 1
    2a1e:	80 81       	ld	r24, Z
    2a20:	91 81       	ldd	r25, Z+1	; 0x01
    2a22:	86 17       	cp	r24, r22
    2a24:	97 07       	cpc	r25, r23
    2a26:	28 f4       	brcc	.+10     	; 0x2a32 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x160>
    2a28:	80 81       	ld	r24, Z
    2a2a:	91 81       	ldd	r25, Z+1	; 0x01
    2a2c:	d9 01       	movw	r26, r18
    2a2e:	8d 93       	st	X+, r24
    2a30:	9c 93       	st	X, r25
    2a32:	4f 5f       	subi	r20, 0xFF	; 255
    2a34:	5f 4f       	sbci	r21, 0xFF	; 255
    2a36:	2e 5f       	subi	r18, 0xFE	; 254
    2a38:	3f 4f       	sbci	r19, 0xFF	; 255
    2a3a:	32 96       	adiw	r30, 0x02	; 2
    2a3c:	a8 96       	adiw	r28, 0x28	; 40
    2a3e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a40:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a42:	a8 97       	sbiw	r28, 0x28	; 40
    2a44:	02 96       	adiw	r24, 0x02	; 2
    2a46:	a8 96       	adiw	r28, 0x28	; 40
    2a48:	9f af       	std	Y+63, r25	; 0x3f
    2a4a:	8e af       	std	Y+62, r24	; 0x3e
    2a4c:	a8 97       	sbiw	r28, 0x28	; 40
    2a4e:	a5 96       	adiw	r28, 0x25	; 37
    2a50:	ae ad       	ldd	r26, Y+62	; 0x3e
    2a52:	bf ad       	ldd	r27, Y+63	; 0x3f
    2a54:	a5 97       	sbiw	r28, 0x25	; 37
    2a56:	4a 17       	cp	r20, r26
    2a58:	5b 07       	cpc	r21, r27
    2a5a:	14 f2       	brlt	.-124    	; 0x29e0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x10e>
    2a5c:	08 94       	sec
    2a5e:	e1 1c       	adc	r14, r1
    2a60:	f1 1c       	adc	r15, r1
    2a62:	ba e0       	ldi	r27, 0x0A	; 10
    2a64:	eb 16       	cp	r14, r27
    2a66:	f1 04       	cpc	r15, r1
    2a68:	09 f0       	breq	.+2      	; 0x2a6c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x19a>
    2a6a:	9b cf       	rjmp	.-202    	; 0x29a2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xd0>
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	2c c0       	rjmp	.+88     	; 0x2aca <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1f8>
    2a72:	f1 01       	movw	r30, r2
    2a74:	41 91       	ld	r20, Z+
    2a76:	51 91       	ld	r21, Z+
    2a78:	1f 01       	movw	r2, r30
    2a7a:	bc 01       	movw	r22, r24
    2a7c:	66 0f       	add	r22, r22
    2a7e:	77 1f       	adc	r23, r23
    2a80:	d6 01       	movw	r26, r12
    2a82:	ed 91       	ld	r30, X+
    2a84:	fc 91       	ld	r31, X
    2a86:	11 97       	sbiw	r26, 0x01	; 1
    2a88:	e6 0f       	add	r30, r22
    2a8a:	f7 1f       	adc	r31, r23
    2a8c:	20 81       	ld	r18, Z
    2a8e:	31 81       	ldd	r19, Z+1	; 0x01
    2a90:	24 17       	cp	r18, r20
    2a92:	35 07       	cpc	r19, r21
    2a94:	10 f4       	brcc	.+4      	; 0x2a9a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1c8>
    2a96:	51 83       	std	Z+1, r21	; 0x01
    2a98:	40 83       	st	Z, r20
    2a9a:	a3 96       	adiw	r28, 0x23	; 35
    2a9c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2a9e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2aa0:	a3 97       	sbiw	r28, 0x23	; 35
    2aa2:	41 91       	ld	r20, Z+
    2aa4:	51 91       	ld	r21, Z+
    2aa6:	a3 96       	adiw	r28, 0x23	; 35
    2aa8:	ff af       	std	Y+63, r31	; 0x3f
    2aaa:	ee af       	std	Y+62, r30	; 0x3e
    2aac:	a3 97       	sbiw	r28, 0x23	; 35
    2aae:	d4 01       	movw	r26, r8
    2ab0:	ed 91       	ld	r30, X+
    2ab2:	fc 91       	ld	r31, X
    2ab4:	11 97       	sbiw	r26, 0x01	; 1
    2ab6:	e6 0f       	add	r30, r22
    2ab8:	f7 1f       	adc	r31, r23
    2aba:	20 81       	ld	r18, Z
    2abc:	31 81       	ldd	r19, Z+1	; 0x01
    2abe:	42 17       	cp	r20, r18
    2ac0:	53 07       	cpc	r21, r19
    2ac2:	10 f4       	brcc	.+4      	; 0x2ac8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1f6>
    2ac4:	51 83       	std	Z+1, r21	; 0x01
    2ac6:	40 83       	st	Z, r20
    2ac8:	01 96       	adiw	r24, 0x01	; 1
    2aca:	f8 01       	movw	r30, r16
    2acc:	20 85       	ldd	r18, Z+8	; 0x08
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	82 17       	cp	r24, r18
    2ad2:	93 07       	cpc	r25, r19
    2ad4:	74 f2       	brlt	.-100    	; 0x2a72 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1a0>
    2ad6:	c9 59       	subi	r28, 0x99	; 153
    2ad8:	df 4f       	sbci	r29, 0xFF	; 255
    2ada:	e2 e1       	ldi	r30, 0x12	; 18
    2adc:	0c 94 5e 16 	jmp	0x2cbc	; 0x2cbc <__epilogue_restores__>

00002ae0 <_ZN16PololuQTRSensors9calibrateEh>:
    2ae0:	1f 93       	push	r17
    2ae2:	cf 93       	push	r28
    2ae4:	df 93       	push	r29
    2ae6:	ec 01       	movw	r28, r24
    2ae8:	16 2f       	mov	r17, r22
    2aea:	86 2f       	mov	r24, r22
    2aec:	81 50       	subi	r24, 0x01	; 1
    2aee:	82 30       	cpi	r24, 0x02	; 2
    2af0:	58 f4       	brcc	.+22     	; 0x2b08 <_ZN16PololuQTRSensors9calibrateEh+0x28>
    2af2:	ae 01       	movw	r20, r28
    2af4:	4e 5f       	subi	r20, 0xFE	; 254
    2af6:	5f 4f       	sbci	r21, 0xFF	; 255
    2af8:	ce 01       	movw	r24, r28
    2afa:	be 01       	movw	r22, r28
    2afc:	21 e0       	ldi	r18, 0x01	; 1
    2afe:	0e 94 69 14 	call	0x28d2	; 0x28d2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2b02:	12 30       	cpi	r17, 0x02	; 2
    2b04:	19 f0       	breq	.+6      	; 0x2b0c <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    2b06:	0c c0       	rjmp	.+24     	; 0x2b20 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2b08:	66 23       	and	r22, r22
    2b0a:	51 f4       	brne	.+20     	; 0x2b20 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2b0c:	be 01       	movw	r22, r28
    2b0e:	6c 5f       	subi	r22, 0xFC	; 252
    2b10:	7f 4f       	sbci	r23, 0xFF	; 255
    2b12:	ae 01       	movw	r20, r28
    2b14:	4a 5f       	subi	r20, 0xFA	; 250
    2b16:	5f 4f       	sbci	r21, 0xFF	; 255
    2b18:	ce 01       	movw	r24, r28
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	0e 94 69 14 	call	0x28d2	; 0x28d2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2b20:	df 91       	pop	r29
    2b22:	cf 91       	pop	r28
    2b24:	1f 91       	pop	r17
    2b26:	08 95       	ret

00002b28 <_ZN16PololuQTRSensorsD1Ev>:
    2b28:	cf 93       	push	r28
    2b2a:	df 93       	push	r29
    2b2c:	ec 01       	movw	r28, r24
    2b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b30:	9b 81       	ldd	r25, Y+3	; 0x03
    2b32:	00 97       	sbiw	r24, 0x00	; 0
    2b34:	11 f0       	breq	.+4      	; 0x2b3a <_ZN16PololuQTRSensorsD1Ev+0x12>
    2b36:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <free>
    2b3a:	8e 81       	ldd	r24, Y+6	; 0x06
    2b3c:	9f 81       	ldd	r25, Y+7	; 0x07
    2b3e:	00 97       	sbiw	r24, 0x00	; 0
    2b40:	11 f0       	breq	.+4      	; 0x2b46 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    2b42:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <free>
    2b46:	88 81       	ld	r24, Y
    2b48:	99 81       	ldd	r25, Y+1	; 0x01
    2b4a:	00 97       	sbiw	r24, 0x00	; 0
    2b4c:	11 f0       	breq	.+4      	; 0x2b52 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    2b4e:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <free>
    2b52:	8c 81       	ldd	r24, Y+4	; 0x04
    2b54:	9d 81       	ldd	r25, Y+5	; 0x05
    2b56:	00 97       	sbiw	r24, 0x00	; 0
    2b58:	11 f0       	breq	.+4      	; 0x2b5e <_ZN16PololuQTRSensorsD1Ev+0x36>
    2b5a:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <free>
    2b5e:	df 91       	pop	r29
    2b60:	cf 91       	pop	r28
    2b62:	08 95       	ret

00002b64 <__mulsi3>:
    2b64:	db 01       	movw	r26, r22
    2b66:	8f 93       	push	r24
    2b68:	9f 93       	push	r25
    2b6a:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <__muluhisi3>
    2b6e:	bf 91       	pop	r27
    2b70:	af 91       	pop	r26
    2b72:	a2 9f       	mul	r26, r18
    2b74:	80 0d       	add	r24, r0
    2b76:	91 1d       	adc	r25, r1
    2b78:	a3 9f       	mul	r26, r19
    2b7a:	90 0d       	add	r25, r0
    2b7c:	b2 9f       	mul	r27, r18
    2b7e:	90 0d       	add	r25, r0
    2b80:	11 24       	eor	r1, r1
    2b82:	08 95       	ret

00002b84 <__udivmodqi4>:
    2b84:	99 1b       	sub	r25, r25
    2b86:	79 e0       	ldi	r23, 0x09	; 9
    2b88:	04 c0       	rjmp	.+8      	; 0x2b92 <__udivmodqi4_ep>

00002b8a <__udivmodqi4_loop>:
    2b8a:	99 1f       	adc	r25, r25
    2b8c:	96 17       	cp	r25, r22
    2b8e:	08 f0       	brcs	.+2      	; 0x2b92 <__udivmodqi4_ep>
    2b90:	96 1b       	sub	r25, r22

00002b92 <__udivmodqi4_ep>:
    2b92:	88 1f       	adc	r24, r24
    2b94:	7a 95       	dec	r23
    2b96:	c9 f7       	brne	.-14     	; 0x2b8a <__udivmodqi4_loop>
    2b98:	80 95       	com	r24
    2b9a:	08 95       	ret

00002b9c <__udivmodhi4>:
    2b9c:	aa 1b       	sub	r26, r26
    2b9e:	bb 1b       	sub	r27, r27
    2ba0:	51 e1       	ldi	r21, 0x11	; 17
    2ba2:	07 c0       	rjmp	.+14     	; 0x2bb2 <__udivmodhi4_ep>

00002ba4 <__udivmodhi4_loop>:
    2ba4:	aa 1f       	adc	r26, r26
    2ba6:	bb 1f       	adc	r27, r27
    2ba8:	a6 17       	cp	r26, r22
    2baa:	b7 07       	cpc	r27, r23
    2bac:	10 f0       	brcs	.+4      	; 0x2bb2 <__udivmodhi4_ep>
    2bae:	a6 1b       	sub	r26, r22
    2bb0:	b7 0b       	sbc	r27, r23

00002bb2 <__udivmodhi4_ep>:
    2bb2:	88 1f       	adc	r24, r24
    2bb4:	99 1f       	adc	r25, r25
    2bb6:	5a 95       	dec	r21
    2bb8:	a9 f7       	brne	.-22     	; 0x2ba4 <__udivmodhi4_loop>
    2bba:	80 95       	com	r24
    2bbc:	90 95       	com	r25
    2bbe:	bc 01       	movw	r22, r24
    2bc0:	cd 01       	movw	r24, r26
    2bc2:	08 95       	ret

00002bc4 <__divmodhi4>:
    2bc4:	97 fb       	bst	r25, 7
    2bc6:	07 2e       	mov	r0, r23
    2bc8:	16 f4       	brtc	.+4      	; 0x2bce <__divmodhi4+0xa>
    2bca:	00 94       	com	r0
    2bcc:	07 d0       	rcall	.+14     	; 0x2bdc <__divmodhi4_neg1>
    2bce:	77 fd       	sbrc	r23, 7
    2bd0:	09 d0       	rcall	.+18     	; 0x2be4 <__divmodhi4_neg2>
    2bd2:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <__udivmodhi4>
    2bd6:	07 fc       	sbrc	r0, 7
    2bd8:	05 d0       	rcall	.+10     	; 0x2be4 <__divmodhi4_neg2>
    2bda:	3e f4       	brtc	.+14     	; 0x2bea <__divmodhi4_exit>

00002bdc <__divmodhi4_neg1>:
    2bdc:	90 95       	com	r25
    2bde:	81 95       	neg	r24
    2be0:	9f 4f       	sbci	r25, 0xFF	; 255
    2be2:	08 95       	ret

00002be4 <__divmodhi4_neg2>:
    2be4:	70 95       	com	r23
    2be6:	61 95       	neg	r22
    2be8:	7f 4f       	sbci	r23, 0xFF	; 255

00002bea <__divmodhi4_exit>:
    2bea:	08 95       	ret

00002bec <__udivmodsi4>:
    2bec:	a1 e2       	ldi	r26, 0x21	; 33
    2bee:	1a 2e       	mov	r1, r26
    2bf0:	aa 1b       	sub	r26, r26
    2bf2:	bb 1b       	sub	r27, r27
    2bf4:	fd 01       	movw	r30, r26
    2bf6:	0d c0       	rjmp	.+26     	; 0x2c12 <__udivmodsi4_ep>

00002bf8 <__udivmodsi4_loop>:
    2bf8:	aa 1f       	adc	r26, r26
    2bfa:	bb 1f       	adc	r27, r27
    2bfc:	ee 1f       	adc	r30, r30
    2bfe:	ff 1f       	adc	r31, r31
    2c00:	a2 17       	cp	r26, r18
    2c02:	b3 07       	cpc	r27, r19
    2c04:	e4 07       	cpc	r30, r20
    2c06:	f5 07       	cpc	r31, r21
    2c08:	20 f0       	brcs	.+8      	; 0x2c12 <__udivmodsi4_ep>
    2c0a:	a2 1b       	sub	r26, r18
    2c0c:	b3 0b       	sbc	r27, r19
    2c0e:	e4 0b       	sbc	r30, r20
    2c10:	f5 0b       	sbc	r31, r21

00002c12 <__udivmodsi4_ep>:
    2c12:	66 1f       	adc	r22, r22
    2c14:	77 1f       	adc	r23, r23
    2c16:	88 1f       	adc	r24, r24
    2c18:	99 1f       	adc	r25, r25
    2c1a:	1a 94       	dec	r1
    2c1c:	69 f7       	brne	.-38     	; 0x2bf8 <__udivmodsi4_loop>
    2c1e:	60 95       	com	r22
    2c20:	70 95       	com	r23
    2c22:	80 95       	com	r24
    2c24:	90 95       	com	r25
    2c26:	9b 01       	movw	r18, r22
    2c28:	ac 01       	movw	r20, r24
    2c2a:	bd 01       	movw	r22, r26
    2c2c:	cf 01       	movw	r24, r30
    2c2e:	08 95       	ret

00002c30 <__divmodsi4>:
    2c30:	05 2e       	mov	r0, r21
    2c32:	97 fb       	bst	r25, 7
    2c34:	1e f4       	brtc	.+6      	; 0x2c3c <__divmodsi4+0xc>
    2c36:	00 94       	com	r0
    2c38:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <__negsi2>
    2c3c:	57 fd       	sbrc	r21, 7
    2c3e:	07 d0       	rcall	.+14     	; 0x2c4e <__divmodsi4_neg2>
    2c40:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__udivmodsi4>
    2c44:	07 fc       	sbrc	r0, 7
    2c46:	03 d0       	rcall	.+6      	; 0x2c4e <__divmodsi4_neg2>
    2c48:	4e f4       	brtc	.+18     	; 0x2c5c <__divmodsi4_exit>
    2c4a:	0c 94 2f 16 	jmp	0x2c5e	; 0x2c5e <__negsi2>

00002c4e <__divmodsi4_neg2>:
    2c4e:	50 95       	com	r21
    2c50:	40 95       	com	r20
    2c52:	30 95       	com	r19
    2c54:	21 95       	neg	r18
    2c56:	3f 4f       	sbci	r19, 0xFF	; 255
    2c58:	4f 4f       	sbci	r20, 0xFF	; 255
    2c5a:	5f 4f       	sbci	r21, 0xFF	; 255

00002c5c <__divmodsi4_exit>:
    2c5c:	08 95       	ret

00002c5e <__negsi2>:
    2c5e:	90 95       	com	r25
    2c60:	80 95       	com	r24
    2c62:	70 95       	com	r23
    2c64:	61 95       	neg	r22
    2c66:	7f 4f       	sbci	r23, 0xFF	; 255
    2c68:	8f 4f       	sbci	r24, 0xFF	; 255
    2c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c6c:	08 95       	ret

00002c6e <__muluhisi3>:
    2c6e:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <__umulhisi3>
    2c72:	a5 9f       	mul	r26, r21
    2c74:	90 0d       	add	r25, r0
    2c76:	b4 9f       	mul	r27, r20
    2c78:	90 0d       	add	r25, r0
    2c7a:	a4 9f       	mul	r26, r20
    2c7c:	80 0d       	add	r24, r0
    2c7e:	91 1d       	adc	r25, r1
    2c80:	11 24       	eor	r1, r1
    2c82:	08 95       	ret

00002c84 <__prologue_saves__>:
    2c84:	2f 92       	push	r2
    2c86:	3f 92       	push	r3
    2c88:	4f 92       	push	r4
    2c8a:	5f 92       	push	r5
    2c8c:	6f 92       	push	r6
    2c8e:	7f 92       	push	r7
    2c90:	8f 92       	push	r8
    2c92:	9f 92       	push	r9
    2c94:	af 92       	push	r10
    2c96:	bf 92       	push	r11
    2c98:	cf 92       	push	r12
    2c9a:	df 92       	push	r13
    2c9c:	ef 92       	push	r14
    2c9e:	ff 92       	push	r15
    2ca0:	0f 93       	push	r16
    2ca2:	1f 93       	push	r17
    2ca4:	cf 93       	push	r28
    2ca6:	df 93       	push	r29
    2ca8:	cd b7       	in	r28, 0x3d	; 61
    2caa:	de b7       	in	r29, 0x3e	; 62
    2cac:	ca 1b       	sub	r28, r26
    2cae:	db 0b       	sbc	r29, r27
    2cb0:	0f b6       	in	r0, 0x3f	; 63
    2cb2:	f8 94       	cli
    2cb4:	de bf       	out	0x3e, r29	; 62
    2cb6:	0f be       	out	0x3f, r0	; 63
    2cb8:	cd bf       	out	0x3d, r28	; 61
    2cba:	09 94       	ijmp

00002cbc <__epilogue_restores__>:
    2cbc:	2a 88       	ldd	r2, Y+18	; 0x12
    2cbe:	39 88       	ldd	r3, Y+17	; 0x11
    2cc0:	48 88       	ldd	r4, Y+16	; 0x10
    2cc2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cc4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cc6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2cc8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2cca:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ccc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2cce:	b9 84       	ldd	r11, Y+9	; 0x09
    2cd0:	c8 84       	ldd	r12, Y+8	; 0x08
    2cd2:	df 80       	ldd	r13, Y+7	; 0x07
    2cd4:	ee 80       	ldd	r14, Y+6	; 0x06
    2cd6:	fd 80       	ldd	r15, Y+5	; 0x05
    2cd8:	0c 81       	ldd	r16, Y+4	; 0x04
    2cda:	1b 81       	ldd	r17, Y+3	; 0x03
    2cdc:	aa 81       	ldd	r26, Y+2	; 0x02
    2cde:	b9 81       	ldd	r27, Y+1	; 0x01
    2ce0:	ce 0f       	add	r28, r30
    2ce2:	d1 1d       	adc	r29, r1
    2ce4:	0f b6       	in	r0, 0x3f	; 63
    2ce6:	f8 94       	cli
    2ce8:	de bf       	out	0x3e, r29	; 62
    2cea:	0f be       	out	0x3f, r0	; 63
    2cec:	cd bf       	out	0x3d, r28	; 61
    2cee:	ed 01       	movw	r28, r26
    2cf0:	08 95       	ret

00002cf2 <__tablejump2__>:
    2cf2:	ee 0f       	add	r30, r30
    2cf4:	ff 1f       	adc	r31, r31

00002cf6 <__tablejump__>:
    2cf6:	05 90       	lpm	r0, Z+
    2cf8:	f4 91       	lpm	r31, Z
    2cfa:	e0 2d       	mov	r30, r0
    2cfc:	09 94       	ijmp

00002cfe <__umulhisi3>:
    2cfe:	a2 9f       	mul	r26, r18
    2d00:	b0 01       	movw	r22, r0
    2d02:	b3 9f       	mul	r27, r19
    2d04:	c0 01       	movw	r24, r0
    2d06:	a3 9f       	mul	r26, r19
    2d08:	70 0d       	add	r23, r0
    2d0a:	81 1d       	adc	r24, r1
    2d0c:	11 24       	eor	r1, r1
    2d0e:	91 1d       	adc	r25, r1
    2d10:	b2 9f       	mul	r27, r18
    2d12:	70 0d       	add	r23, r0
    2d14:	81 1d       	adc	r24, r1
    2d16:	11 24       	eor	r1, r1
    2d18:	91 1d       	adc	r25, r1
    2d1a:	08 95       	ret

00002d1c <malloc>:
    2d1c:	cf 93       	push	r28
    2d1e:	df 93       	push	r29
    2d20:	82 30       	cpi	r24, 0x02	; 2
    2d22:	91 05       	cpc	r25, r1
    2d24:	10 f4       	brcc	.+4      	; 0x2d2a <malloc+0xe>
    2d26:	82 e0       	ldi	r24, 0x02	; 2
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	e0 91 d4 01 	lds	r30, 0x01D4
    2d2e:	f0 91 d5 01 	lds	r31, 0x01D5
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	a0 e0       	ldi	r26, 0x00	; 0
    2d38:	b0 e0       	ldi	r27, 0x00	; 0
    2d3a:	30 97       	sbiw	r30, 0x00	; 0
    2d3c:	39 f1       	breq	.+78     	; 0x2d8c <malloc+0x70>
    2d3e:	40 81       	ld	r20, Z
    2d40:	51 81       	ldd	r21, Z+1	; 0x01
    2d42:	48 17       	cp	r20, r24
    2d44:	59 07       	cpc	r21, r25
    2d46:	b8 f0       	brcs	.+46     	; 0x2d76 <malloc+0x5a>
    2d48:	48 17       	cp	r20, r24
    2d4a:	59 07       	cpc	r21, r25
    2d4c:	71 f4       	brne	.+28     	; 0x2d6a <malloc+0x4e>
    2d4e:	82 81       	ldd	r24, Z+2	; 0x02
    2d50:	93 81       	ldd	r25, Z+3	; 0x03
    2d52:	10 97       	sbiw	r26, 0x00	; 0
    2d54:	29 f0       	breq	.+10     	; 0x2d60 <malloc+0x44>
    2d56:	13 96       	adiw	r26, 0x03	; 3
    2d58:	9c 93       	st	X, r25
    2d5a:	8e 93       	st	-X, r24
    2d5c:	12 97       	sbiw	r26, 0x02	; 2
    2d5e:	2c c0       	rjmp	.+88     	; 0x2db8 <malloc+0x9c>
    2d60:	90 93 d5 01 	sts	0x01D5, r25
    2d64:	80 93 d4 01 	sts	0x01D4, r24
    2d68:	27 c0       	rjmp	.+78     	; 0x2db8 <malloc+0x9c>
    2d6a:	21 15       	cp	r18, r1
    2d6c:	31 05       	cpc	r19, r1
    2d6e:	31 f0       	breq	.+12     	; 0x2d7c <malloc+0x60>
    2d70:	42 17       	cp	r20, r18
    2d72:	53 07       	cpc	r21, r19
    2d74:	18 f0       	brcs	.+6      	; 0x2d7c <malloc+0x60>
    2d76:	a9 01       	movw	r20, r18
    2d78:	db 01       	movw	r26, r22
    2d7a:	01 c0       	rjmp	.+2      	; 0x2d7e <malloc+0x62>
    2d7c:	ef 01       	movw	r28, r30
    2d7e:	9a 01       	movw	r18, r20
    2d80:	bd 01       	movw	r22, r26
    2d82:	df 01       	movw	r26, r30
    2d84:	02 80       	ldd	r0, Z+2	; 0x02
    2d86:	f3 81       	ldd	r31, Z+3	; 0x03
    2d88:	e0 2d       	mov	r30, r0
    2d8a:	d7 cf       	rjmp	.-82     	; 0x2d3a <malloc+0x1e>
    2d8c:	21 15       	cp	r18, r1
    2d8e:	31 05       	cpc	r19, r1
    2d90:	f9 f0       	breq	.+62     	; 0x2dd0 <malloc+0xb4>
    2d92:	28 1b       	sub	r18, r24
    2d94:	39 0b       	sbc	r19, r25
    2d96:	24 30       	cpi	r18, 0x04	; 4
    2d98:	31 05       	cpc	r19, r1
    2d9a:	80 f4       	brcc	.+32     	; 0x2dbc <malloc+0xa0>
    2d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9e:	9b 81       	ldd	r25, Y+3	; 0x03
    2da0:	61 15       	cp	r22, r1
    2da2:	71 05       	cpc	r23, r1
    2da4:	21 f0       	breq	.+8      	; 0x2dae <malloc+0x92>
    2da6:	fb 01       	movw	r30, r22
    2da8:	93 83       	std	Z+3, r25	; 0x03
    2daa:	82 83       	std	Z+2, r24	; 0x02
    2dac:	04 c0       	rjmp	.+8      	; 0x2db6 <malloc+0x9a>
    2dae:	90 93 d5 01 	sts	0x01D5, r25
    2db2:	80 93 d4 01 	sts	0x01D4, r24
    2db6:	fe 01       	movw	r30, r28
    2db8:	32 96       	adiw	r30, 0x02	; 2
    2dba:	44 c0       	rjmp	.+136    	; 0x2e44 <malloc+0x128>
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	e2 0f       	add	r30, r18
    2dc0:	f3 1f       	adc	r31, r19
    2dc2:	81 93       	st	Z+, r24
    2dc4:	91 93       	st	Z+, r25
    2dc6:	22 50       	subi	r18, 0x02	; 2
    2dc8:	31 09       	sbc	r19, r1
    2dca:	39 83       	std	Y+1, r19	; 0x01
    2dcc:	28 83       	st	Y, r18
    2dce:	3a c0       	rjmp	.+116    	; 0x2e44 <malloc+0x128>
    2dd0:	20 91 d2 01 	lds	r18, 0x01D2
    2dd4:	30 91 d3 01 	lds	r19, 0x01D3
    2dd8:	23 2b       	or	r18, r19
    2dda:	41 f4       	brne	.+16     	; 0x2dec <malloc+0xd0>
    2ddc:	20 91 2d 01 	lds	r18, 0x012D
    2de0:	30 91 2e 01 	lds	r19, 0x012E
    2de4:	30 93 d3 01 	sts	0x01D3, r19
    2de8:	20 93 d2 01 	sts	0x01D2, r18
    2dec:	20 91 2b 01 	lds	r18, 0x012B
    2df0:	30 91 2c 01 	lds	r19, 0x012C
    2df4:	21 15       	cp	r18, r1
    2df6:	31 05       	cpc	r19, r1
    2df8:	41 f4       	brne	.+16     	; 0x2e0a <malloc+0xee>
    2dfa:	2d b7       	in	r18, 0x3d	; 61
    2dfc:	3e b7       	in	r19, 0x3e	; 62
    2dfe:	40 91 2f 01 	lds	r20, 0x012F
    2e02:	50 91 30 01 	lds	r21, 0x0130
    2e06:	24 1b       	sub	r18, r20
    2e08:	35 0b       	sbc	r19, r21
    2e0a:	e0 91 d2 01 	lds	r30, 0x01D2
    2e0e:	f0 91 d3 01 	lds	r31, 0x01D3
    2e12:	e2 17       	cp	r30, r18
    2e14:	f3 07       	cpc	r31, r19
    2e16:	a0 f4       	brcc	.+40     	; 0x2e40 <malloc+0x124>
    2e18:	2e 1b       	sub	r18, r30
    2e1a:	3f 0b       	sbc	r19, r31
    2e1c:	28 17       	cp	r18, r24
    2e1e:	39 07       	cpc	r19, r25
    2e20:	78 f0       	brcs	.+30     	; 0x2e40 <malloc+0x124>
    2e22:	ac 01       	movw	r20, r24
    2e24:	4e 5f       	subi	r20, 0xFE	; 254
    2e26:	5f 4f       	sbci	r21, 0xFF	; 255
    2e28:	24 17       	cp	r18, r20
    2e2a:	35 07       	cpc	r19, r21
    2e2c:	48 f0       	brcs	.+18     	; 0x2e40 <malloc+0x124>
    2e2e:	4e 0f       	add	r20, r30
    2e30:	5f 1f       	adc	r21, r31
    2e32:	50 93 d3 01 	sts	0x01D3, r21
    2e36:	40 93 d2 01 	sts	0x01D2, r20
    2e3a:	81 93       	st	Z+, r24
    2e3c:	91 93       	st	Z+, r25
    2e3e:	02 c0       	rjmp	.+4      	; 0x2e44 <malloc+0x128>
    2e40:	e0 e0       	ldi	r30, 0x00	; 0
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	cf 01       	movw	r24, r30
    2e46:	df 91       	pop	r29
    2e48:	cf 91       	pop	r28
    2e4a:	08 95       	ret

00002e4c <free>:
    2e4c:	cf 93       	push	r28
    2e4e:	df 93       	push	r29
    2e50:	00 97       	sbiw	r24, 0x00	; 0
    2e52:	09 f4       	brne	.+2      	; 0x2e56 <free+0xa>
    2e54:	87 c0       	rjmp	.+270    	; 0x2f64 <free+0x118>
    2e56:	fc 01       	movw	r30, r24
    2e58:	32 97       	sbiw	r30, 0x02	; 2
    2e5a:	13 82       	std	Z+3, r1	; 0x03
    2e5c:	12 82       	std	Z+2, r1	; 0x02
    2e5e:	c0 91 d4 01 	lds	r28, 0x01D4
    2e62:	d0 91 d5 01 	lds	r29, 0x01D5
    2e66:	20 97       	sbiw	r28, 0x00	; 0
    2e68:	81 f4       	brne	.+32     	; 0x2e8a <free+0x3e>
    2e6a:	20 81       	ld	r18, Z
    2e6c:	31 81       	ldd	r19, Z+1	; 0x01
    2e6e:	28 0f       	add	r18, r24
    2e70:	39 1f       	adc	r19, r25
    2e72:	80 91 d2 01 	lds	r24, 0x01D2
    2e76:	90 91 d3 01 	lds	r25, 0x01D3
    2e7a:	82 17       	cp	r24, r18
    2e7c:	93 07       	cpc	r25, r19
    2e7e:	79 f5       	brne	.+94     	; 0x2ede <free+0x92>
    2e80:	f0 93 d3 01 	sts	0x01D3, r31
    2e84:	e0 93 d2 01 	sts	0x01D2, r30
    2e88:	6d c0       	rjmp	.+218    	; 0x2f64 <free+0x118>
    2e8a:	de 01       	movw	r26, r28
    2e8c:	20 e0       	ldi	r18, 0x00	; 0
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	ae 17       	cp	r26, r30
    2e92:	bf 07       	cpc	r27, r31
    2e94:	50 f4       	brcc	.+20     	; 0x2eaa <free+0x5e>
    2e96:	12 96       	adiw	r26, 0x02	; 2
    2e98:	4d 91       	ld	r20, X+
    2e9a:	5c 91       	ld	r21, X
    2e9c:	13 97       	sbiw	r26, 0x03	; 3
    2e9e:	9d 01       	movw	r18, r26
    2ea0:	41 15       	cp	r20, r1
    2ea2:	51 05       	cpc	r21, r1
    2ea4:	09 f1       	breq	.+66     	; 0x2ee8 <free+0x9c>
    2ea6:	da 01       	movw	r26, r20
    2ea8:	f3 cf       	rjmp	.-26     	; 0x2e90 <free+0x44>
    2eaa:	b3 83       	std	Z+3, r27	; 0x03
    2eac:	a2 83       	std	Z+2, r26	; 0x02
    2eae:	40 81       	ld	r20, Z
    2eb0:	51 81       	ldd	r21, Z+1	; 0x01
    2eb2:	84 0f       	add	r24, r20
    2eb4:	95 1f       	adc	r25, r21
    2eb6:	8a 17       	cp	r24, r26
    2eb8:	9b 07       	cpc	r25, r27
    2eba:	71 f4       	brne	.+28     	; 0x2ed8 <free+0x8c>
    2ebc:	8d 91       	ld	r24, X+
    2ebe:	9c 91       	ld	r25, X
    2ec0:	11 97       	sbiw	r26, 0x01	; 1
    2ec2:	84 0f       	add	r24, r20
    2ec4:	95 1f       	adc	r25, r21
    2ec6:	02 96       	adiw	r24, 0x02	; 2
    2ec8:	91 83       	std	Z+1, r25	; 0x01
    2eca:	80 83       	st	Z, r24
    2ecc:	12 96       	adiw	r26, 0x02	; 2
    2ece:	8d 91       	ld	r24, X+
    2ed0:	9c 91       	ld	r25, X
    2ed2:	13 97       	sbiw	r26, 0x03	; 3
    2ed4:	93 83       	std	Z+3, r25	; 0x03
    2ed6:	82 83       	std	Z+2, r24	; 0x02
    2ed8:	21 15       	cp	r18, r1
    2eda:	31 05       	cpc	r19, r1
    2edc:	29 f4       	brne	.+10     	; 0x2ee8 <free+0x9c>
    2ede:	f0 93 d5 01 	sts	0x01D5, r31
    2ee2:	e0 93 d4 01 	sts	0x01D4, r30
    2ee6:	3e c0       	rjmp	.+124    	; 0x2f64 <free+0x118>
    2ee8:	d9 01       	movw	r26, r18
    2eea:	13 96       	adiw	r26, 0x03	; 3
    2eec:	fc 93       	st	X, r31
    2eee:	ee 93       	st	-X, r30
    2ef0:	12 97       	sbiw	r26, 0x02	; 2
    2ef2:	4d 91       	ld	r20, X+
    2ef4:	5d 91       	ld	r21, X+
    2ef6:	a4 0f       	add	r26, r20
    2ef8:	b5 1f       	adc	r27, r21
    2efa:	ea 17       	cp	r30, r26
    2efc:	fb 07       	cpc	r31, r27
    2efe:	79 f4       	brne	.+30     	; 0x2f1e <free+0xd2>
    2f00:	80 81       	ld	r24, Z
    2f02:	91 81       	ldd	r25, Z+1	; 0x01
    2f04:	84 0f       	add	r24, r20
    2f06:	95 1f       	adc	r25, r21
    2f08:	02 96       	adiw	r24, 0x02	; 2
    2f0a:	d9 01       	movw	r26, r18
    2f0c:	11 96       	adiw	r26, 0x01	; 1
    2f0e:	9c 93       	st	X, r25
    2f10:	8e 93       	st	-X, r24
    2f12:	82 81       	ldd	r24, Z+2	; 0x02
    2f14:	93 81       	ldd	r25, Z+3	; 0x03
    2f16:	13 96       	adiw	r26, 0x03	; 3
    2f18:	9c 93       	st	X, r25
    2f1a:	8e 93       	st	-X, r24
    2f1c:	12 97       	sbiw	r26, 0x02	; 2
    2f1e:	e0 e0       	ldi	r30, 0x00	; 0
    2f20:	f0 e0       	ldi	r31, 0x00	; 0
    2f22:	8a 81       	ldd	r24, Y+2	; 0x02
    2f24:	9b 81       	ldd	r25, Y+3	; 0x03
    2f26:	00 97       	sbiw	r24, 0x00	; 0
    2f28:	19 f0       	breq	.+6      	; 0x2f30 <free+0xe4>
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	ec 01       	movw	r28, r24
    2f2e:	f9 cf       	rjmp	.-14     	; 0x2f22 <free+0xd6>
    2f30:	ce 01       	movw	r24, r28
    2f32:	02 96       	adiw	r24, 0x02	; 2
    2f34:	28 81       	ld	r18, Y
    2f36:	39 81       	ldd	r19, Y+1	; 0x01
    2f38:	82 0f       	add	r24, r18
    2f3a:	93 1f       	adc	r25, r19
    2f3c:	20 91 d2 01 	lds	r18, 0x01D2
    2f40:	30 91 d3 01 	lds	r19, 0x01D3
    2f44:	28 17       	cp	r18, r24
    2f46:	39 07       	cpc	r19, r25
    2f48:	69 f4       	brne	.+26     	; 0x2f64 <free+0x118>
    2f4a:	30 97       	sbiw	r30, 0x00	; 0
    2f4c:	29 f4       	brne	.+10     	; 0x2f58 <free+0x10c>
    2f4e:	10 92 d5 01 	sts	0x01D5, r1
    2f52:	10 92 d4 01 	sts	0x01D4, r1
    2f56:	02 c0       	rjmp	.+4      	; 0x2f5c <free+0x110>
    2f58:	13 82       	std	Z+3, r1	; 0x03
    2f5a:	12 82       	std	Z+2, r1	; 0x02
    2f5c:	d0 93 d3 01 	sts	0x01D3, r29
    2f60:	c0 93 d2 01 	sts	0x01D2, r28
    2f64:	df 91       	pop	r29
    2f66:	cf 91       	pop	r28
    2f68:	08 95       	ret

00002f6a <__eerd_word_m328p>:
    2f6a:	a8 e1       	ldi	r26, 0x18	; 24
    2f6c:	b0 e0       	ldi	r27, 0x00	; 0
    2f6e:	42 e0       	ldi	r20, 0x02	; 2
    2f70:	50 e0       	ldi	r21, 0x00	; 0
    2f72:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <__eerd_blraw_m328p>

00002f76 <__eewr_word_m328p>:
    2f76:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <__eewr_byte_m328p>
    2f7a:	27 2f       	mov	r18, r23
    2f7c:	0c 94 d1 17 	jmp	0x2fa2	; 0x2fa2 <__eewr_r18_m328p>

00002f80 <__eerd_block_m328p>:
    2f80:	dc 01       	movw	r26, r24
    2f82:	cb 01       	movw	r24, r22

00002f84 <__eerd_blraw_m328p>:
    2f84:	fc 01       	movw	r30, r24
    2f86:	f9 99       	sbic	0x1f, 1	; 31
    2f88:	fe cf       	rjmp	.-4      	; 0x2f86 <__eerd_blraw_m328p+0x2>
    2f8a:	06 c0       	rjmp	.+12     	; 0x2f98 <__eerd_blraw_m328p+0x14>
    2f8c:	f2 bd       	out	0x22, r31	; 34
    2f8e:	e1 bd       	out	0x21, r30	; 33
    2f90:	f8 9a       	sbi	0x1f, 0	; 31
    2f92:	31 96       	adiw	r30, 0x01	; 1
    2f94:	00 b4       	in	r0, 0x20	; 32
    2f96:	0d 92       	st	X+, r0
    2f98:	41 50       	subi	r20, 0x01	; 1
    2f9a:	50 40       	sbci	r21, 0x00	; 0
    2f9c:	b8 f7       	brcc	.-18     	; 0x2f8c <__eerd_blraw_m328p+0x8>
    2f9e:	08 95       	ret

00002fa0 <__eewr_byte_m328p>:
    2fa0:	26 2f       	mov	r18, r22

00002fa2 <__eewr_r18_m328p>:
    2fa2:	f9 99       	sbic	0x1f, 1	; 31
    2fa4:	fe cf       	rjmp	.-4      	; 0x2fa2 <__eewr_r18_m328p>
    2fa6:	1f ba       	out	0x1f, r1	; 31
    2fa8:	92 bd       	out	0x22, r25	; 34
    2faa:	81 bd       	out	0x21, r24	; 33
    2fac:	20 bd       	out	0x20, r18	; 32
    2fae:	0f b6       	in	r0, 0x3f	; 63
    2fb0:	f8 94       	cli
    2fb2:	fa 9a       	sbi	0x1f, 2	; 31
    2fb4:	f9 9a       	sbi	0x1f, 1	; 31
    2fb6:	0f be       	out	0x3f, r0	; 63
    2fb8:	01 96       	adiw	r24, 0x01	; 1
    2fba:	08 95       	ret

00002fbc <__do_global_dtors>:
    2fbc:	10 e0       	ldi	r17, 0x00	; 0
    2fbe:	c4 e8       	ldi	r28, 0x84	; 132
    2fc0:	d0 e0       	ldi	r29, 0x00	; 0
    2fc2:	04 c0       	rjmp	.+8      	; 0x2fcc <__do_global_dtors+0x10>
    2fc4:	fe 01       	movw	r30, r28
    2fc6:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__tablejump__>
    2fca:	22 96       	adiw	r28, 0x02	; 2
    2fcc:	c8 38       	cpi	r28, 0x88	; 136
    2fce:	d1 07       	cpc	r29, r17
    2fd0:	c9 f7       	brne	.-14     	; 0x2fc4 <__do_global_dtors+0x8>
    2fd2:	f8 94       	cli

00002fd4 <__stop_program>:
    2fd4:	ff cf       	rjmp	.-2      	; 0x2fd4 <__stop_program>
